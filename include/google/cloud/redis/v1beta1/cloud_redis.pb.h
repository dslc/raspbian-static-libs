// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/redis/v1beta1/cloud_redis.proto

#ifndef PROTOBUF_INCLUDED_google_2fcloud_2fredis_2fv1beta1_2fcloud_5fredis_2eproto
#define PROTOBUF_INCLUDED_google_2fcloud_2fredis_2fv1beta1_2fcloud_5fredis_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fredis_2fv1beta1_2fcloud_5fredis_2eproto 

namespace protobuf_google_2fcloud_2fredis_2fv1beta1_2fcloud_5fredis_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[12];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fcloud_2fredis_2fv1beta1_2fcloud_5fredis_2eproto
namespace google {
namespace cloud {
namespace redis {
namespace v1beta1 {
class CreateInstanceRequest;
class CreateInstanceRequestDefaultTypeInternal;
extern CreateInstanceRequestDefaultTypeInternal _CreateInstanceRequest_default_instance_;
class DeleteInstanceRequest;
class DeleteInstanceRequestDefaultTypeInternal;
extern DeleteInstanceRequestDefaultTypeInternal _DeleteInstanceRequest_default_instance_;
class GetInstanceRequest;
class GetInstanceRequestDefaultTypeInternal;
extern GetInstanceRequestDefaultTypeInternal _GetInstanceRequest_default_instance_;
class Instance;
class InstanceDefaultTypeInternal;
extern InstanceDefaultTypeInternal _Instance_default_instance_;
class Instance_LabelsEntry_DoNotUse;
class Instance_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Instance_LabelsEntry_DoNotUseDefaultTypeInternal _Instance_LabelsEntry_DoNotUse_default_instance_;
class Instance_RedisConfigsEntry_DoNotUse;
class Instance_RedisConfigsEntry_DoNotUseDefaultTypeInternal;
extern Instance_RedisConfigsEntry_DoNotUseDefaultTypeInternal _Instance_RedisConfigsEntry_DoNotUse_default_instance_;
class ListInstancesRequest;
class ListInstancesRequestDefaultTypeInternal;
extern ListInstancesRequestDefaultTypeInternal _ListInstancesRequest_default_instance_;
class ListInstancesResponse;
class ListInstancesResponseDefaultTypeInternal;
extern ListInstancesResponseDefaultTypeInternal _ListInstancesResponse_default_instance_;
class LocationMetadata;
class LocationMetadataDefaultTypeInternal;
extern LocationMetadataDefaultTypeInternal _LocationMetadata_default_instance_;
class LocationMetadata_AvailableZonesEntry_DoNotUse;
class LocationMetadata_AvailableZonesEntry_DoNotUseDefaultTypeInternal;
extern LocationMetadata_AvailableZonesEntry_DoNotUseDefaultTypeInternal _LocationMetadata_AvailableZonesEntry_DoNotUse_default_instance_;
class UpdateInstanceRequest;
class UpdateInstanceRequestDefaultTypeInternal;
extern UpdateInstanceRequestDefaultTypeInternal _UpdateInstanceRequest_default_instance_;
class ZoneMetadata;
class ZoneMetadataDefaultTypeInternal;
extern ZoneMetadataDefaultTypeInternal _ZoneMetadata_default_instance_;
}  // namespace v1beta1
}  // namespace redis
}  // namespace cloud
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::cloud::redis::v1beta1::CreateInstanceRequest* Arena::CreateMaybeMessage<::google::cloud::redis::v1beta1::CreateInstanceRequest>(Arena*);
template<> ::google::cloud::redis::v1beta1::DeleteInstanceRequest* Arena::CreateMaybeMessage<::google::cloud::redis::v1beta1::DeleteInstanceRequest>(Arena*);
template<> ::google::cloud::redis::v1beta1::GetInstanceRequest* Arena::CreateMaybeMessage<::google::cloud::redis::v1beta1::GetInstanceRequest>(Arena*);
template<> ::google::cloud::redis::v1beta1::Instance* Arena::CreateMaybeMessage<::google::cloud::redis::v1beta1::Instance>(Arena*);
template<> ::google::cloud::redis::v1beta1::Instance_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::cloud::redis::v1beta1::Instance_LabelsEntry_DoNotUse>(Arena*);
template<> ::google::cloud::redis::v1beta1::Instance_RedisConfigsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::cloud::redis::v1beta1::Instance_RedisConfigsEntry_DoNotUse>(Arena*);
template<> ::google::cloud::redis::v1beta1::ListInstancesRequest* Arena::CreateMaybeMessage<::google::cloud::redis::v1beta1::ListInstancesRequest>(Arena*);
template<> ::google::cloud::redis::v1beta1::ListInstancesResponse* Arena::CreateMaybeMessage<::google::cloud::redis::v1beta1::ListInstancesResponse>(Arena*);
template<> ::google::cloud::redis::v1beta1::LocationMetadata* Arena::CreateMaybeMessage<::google::cloud::redis::v1beta1::LocationMetadata>(Arena*);
template<> ::google::cloud::redis::v1beta1::LocationMetadata_AvailableZonesEntry_DoNotUse* Arena::CreateMaybeMessage<::google::cloud::redis::v1beta1::LocationMetadata_AvailableZonesEntry_DoNotUse>(Arena*);
template<> ::google::cloud::redis::v1beta1::UpdateInstanceRequest* Arena::CreateMaybeMessage<::google::cloud::redis::v1beta1::UpdateInstanceRequest>(Arena*);
template<> ::google::cloud::redis::v1beta1::ZoneMetadata* Arena::CreateMaybeMessage<::google::cloud::redis::v1beta1::ZoneMetadata>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace cloud {
namespace redis {
namespace v1beta1 {

enum Instance_State {
  Instance_State_STATE_UNSPECIFIED = 0,
  Instance_State_CREATING = 1,
  Instance_State_READY = 2,
  Instance_State_UPDATING = 3,
  Instance_State_DELETING = 4,
  Instance_State_REPAIRING = 5,
  Instance_State_MAINTENANCE = 6,
  Instance_State_Instance_State_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Instance_State_Instance_State_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Instance_State_IsValid(int value);
const Instance_State Instance_State_State_MIN = Instance_State_STATE_UNSPECIFIED;
const Instance_State Instance_State_State_MAX = Instance_State_MAINTENANCE;
const int Instance_State_State_ARRAYSIZE = Instance_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* Instance_State_descriptor();
inline const ::std::string& Instance_State_Name(Instance_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    Instance_State_descriptor(), value);
}
inline bool Instance_State_Parse(
    const ::std::string& name, Instance_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Instance_State>(
    Instance_State_descriptor(), name, value);
}
enum Instance_Tier {
  Instance_Tier_TIER_UNSPECIFIED = 0,
  Instance_Tier_BASIC = 1,
  Instance_Tier_STANDARD_HA = 3,
  Instance_Tier_Instance_Tier_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Instance_Tier_Instance_Tier_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Instance_Tier_IsValid(int value);
const Instance_Tier Instance_Tier_Tier_MIN = Instance_Tier_TIER_UNSPECIFIED;
const Instance_Tier Instance_Tier_Tier_MAX = Instance_Tier_STANDARD_HA;
const int Instance_Tier_Tier_ARRAYSIZE = Instance_Tier_Tier_MAX + 1;

const ::google::protobuf::EnumDescriptor* Instance_Tier_descriptor();
inline const ::std::string& Instance_Tier_Name(Instance_Tier value) {
  return ::google::protobuf::internal::NameOfEnum(
    Instance_Tier_descriptor(), value);
}
inline bool Instance_Tier_Parse(
    const ::std::string& name, Instance_Tier* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Instance_Tier>(
    Instance_Tier_descriptor(), name, value);
}
// ===================================================================

class Instance_LabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Instance_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Instance_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Instance_LabelsEntry_DoNotUse();
  Instance_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Instance_LabelsEntry_DoNotUse& other);
  static const Instance_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Instance_LabelsEntry_DoNotUse*>(&_Instance_LabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Instance_RedisConfigsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Instance_RedisConfigsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Instance_RedisConfigsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Instance_RedisConfigsEntry_DoNotUse();
  Instance_RedisConfigsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Instance_RedisConfigsEntry_DoNotUse& other);
  static const Instance_RedisConfigsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Instance_RedisConfigsEntry_DoNotUse*>(&_Instance_RedisConfigsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Instance : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.redis.v1beta1.Instance) */ {
 public:
  Instance();
  virtual ~Instance();

  Instance(const Instance& from);

  inline Instance& operator=(const Instance& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Instance(Instance&& from) noexcept
    : Instance() {
    *this = ::std::move(from);
  }

  inline Instance& operator=(Instance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Instance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Instance* internal_default_instance() {
    return reinterpret_cast<const Instance*>(
               &_Instance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Instance* other);
  friend void swap(Instance& a, Instance& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Instance* New() const final {
    return CreateMaybeMessage<Instance>(NULL);
  }

  Instance* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Instance>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Instance& from);
  void MergeFrom(const Instance& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Instance* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef Instance_State State;
  static const State STATE_UNSPECIFIED =
    Instance_State_STATE_UNSPECIFIED;
  static const State CREATING =
    Instance_State_CREATING;
  static const State READY =
    Instance_State_READY;
  static const State UPDATING =
    Instance_State_UPDATING;
  static const State DELETING =
    Instance_State_DELETING;
  static const State REPAIRING =
    Instance_State_REPAIRING;
  static const State MAINTENANCE =
    Instance_State_MAINTENANCE;
  static inline bool State_IsValid(int value) {
    return Instance_State_IsValid(value);
  }
  static const State State_MIN =
    Instance_State_State_MIN;
  static const State State_MAX =
    Instance_State_State_MAX;
  static const int State_ARRAYSIZE =
    Instance_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return Instance_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return Instance_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return Instance_State_Parse(name, value);
  }

  typedef Instance_Tier Tier;
  static const Tier TIER_UNSPECIFIED =
    Instance_Tier_TIER_UNSPECIFIED;
  static const Tier BASIC =
    Instance_Tier_BASIC;
  static const Tier STANDARD_HA =
    Instance_Tier_STANDARD_HA;
  static inline bool Tier_IsValid(int value) {
    return Instance_Tier_IsValid(value);
  }
  static const Tier Tier_MIN =
    Instance_Tier_Tier_MIN;
  static const Tier Tier_MAX =
    Instance_Tier_Tier_MAX;
  static const int Tier_ARRAYSIZE =
    Instance_Tier_Tier_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tier_descriptor() {
    return Instance_Tier_descriptor();
  }
  static inline const ::std::string& Tier_Name(Tier value) {
    return Instance_Tier_Name(value);
  }
  static inline bool Tier_Parse(const ::std::string& name,
      Tier* value) {
    return Instance_Tier_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // map<string, string> labels = 3;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // map<string, string> redis_configs = 16;
  int redis_configs_size() const;
  void clear_redis_configs();
  static const int kRedisConfigsFieldNumber = 16;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      redis_configs() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_redis_configs();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string display_name = 2;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string location_id = 4;
  void clear_location_id();
  static const int kLocationIdFieldNumber = 4;
  const ::std::string& location_id() const;
  void set_location_id(const ::std::string& value);
  #if LANG_CXX11
  void set_location_id(::std::string&& value);
  #endif
  void set_location_id(const char* value);
  void set_location_id(const char* value, size_t size);
  ::std::string* mutable_location_id();
  ::std::string* release_location_id();
  void set_allocated_location_id(::std::string* location_id);

  // string alternative_location_id = 5;
  void clear_alternative_location_id();
  static const int kAlternativeLocationIdFieldNumber = 5;
  const ::std::string& alternative_location_id() const;
  void set_alternative_location_id(const ::std::string& value);
  #if LANG_CXX11
  void set_alternative_location_id(::std::string&& value);
  #endif
  void set_alternative_location_id(const char* value);
  void set_alternative_location_id(const char* value, size_t size);
  ::std::string* mutable_alternative_location_id();
  ::std::string* release_alternative_location_id();
  void set_allocated_alternative_location_id(::std::string* alternative_location_id);

  // string redis_version = 7;
  void clear_redis_version();
  static const int kRedisVersionFieldNumber = 7;
  const ::std::string& redis_version() const;
  void set_redis_version(const ::std::string& value);
  #if LANG_CXX11
  void set_redis_version(::std::string&& value);
  #endif
  void set_redis_version(const char* value);
  void set_redis_version(const char* value, size_t size);
  ::std::string* mutable_redis_version();
  ::std::string* release_redis_version();
  void set_allocated_redis_version(::std::string* redis_version);

  // string reserved_ip_range = 9;
  void clear_reserved_ip_range();
  static const int kReservedIpRangeFieldNumber = 9;
  const ::std::string& reserved_ip_range() const;
  void set_reserved_ip_range(const ::std::string& value);
  #if LANG_CXX11
  void set_reserved_ip_range(::std::string&& value);
  #endif
  void set_reserved_ip_range(const char* value);
  void set_reserved_ip_range(const char* value, size_t size);
  ::std::string* mutable_reserved_ip_range();
  ::std::string* release_reserved_ip_range();
  void set_allocated_reserved_ip_range(::std::string* reserved_ip_range);

  // string host = 10;
  void clear_host();
  static const int kHostFieldNumber = 10;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // string current_location_id = 12;
  void clear_current_location_id();
  static const int kCurrentLocationIdFieldNumber = 12;
  const ::std::string& current_location_id() const;
  void set_current_location_id(const ::std::string& value);
  #if LANG_CXX11
  void set_current_location_id(::std::string&& value);
  #endif
  void set_current_location_id(const char* value);
  void set_current_location_id(const char* value, size_t size);
  ::std::string* mutable_current_location_id();
  ::std::string* release_current_location_id();
  void set_allocated_current_location_id(::std::string* current_location_id);

  // string status_message = 15;
  void clear_status_message();
  static const int kStatusMessageFieldNumber = 15;
  const ::std::string& status_message() const;
  void set_status_message(const ::std::string& value);
  #if LANG_CXX11
  void set_status_message(::std::string&& value);
  #endif
  void set_status_message(const char* value);
  void set_status_message(const char* value, size_t size);
  ::std::string* mutable_status_message();
  ::std::string* release_status_message();
  void set_allocated_status_message(::std::string* status_message);

  // string authorized_network = 20;
  void clear_authorized_network();
  static const int kAuthorizedNetworkFieldNumber = 20;
  const ::std::string& authorized_network() const;
  void set_authorized_network(const ::std::string& value);
  #if LANG_CXX11
  void set_authorized_network(::std::string&& value);
  #endif
  void set_authorized_network(const char* value);
  void set_authorized_network(const char* value, size_t size);
  ::std::string* mutable_authorized_network();
  ::std::string* release_authorized_network();
  void set_allocated_authorized_network(::std::string* authorized_network);

  // .google.protobuf.Timestamp create_time = 13;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 13;
  private:
  const ::google::protobuf::Timestamp& _internal_create_time() const;
  public:
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // int32 port = 11;
  void clear_port();
  static const int kPortFieldNumber = 11;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // .google.cloud.redis.v1beta1.Instance.State state = 14;
  void clear_state();
  static const int kStateFieldNumber = 14;
  ::google::cloud::redis::v1beta1::Instance_State state() const;
  void set_state(::google::cloud::redis::v1beta1::Instance_State value);

  // .google.cloud.redis.v1beta1.Instance.Tier tier = 17;
  void clear_tier();
  static const int kTierFieldNumber = 17;
  ::google::cloud::redis::v1beta1::Instance_Tier tier() const;
  void set_tier(::google::cloud::redis::v1beta1::Instance_Tier value);

  // int32 memory_size_gb = 18;
  void clear_memory_size_gb();
  static const int kMemorySizeGbFieldNumber = 18;
  ::google::protobuf::int32 memory_size_gb() const;
  void set_memory_size_gb(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.cloud.redis.v1beta1.Instance)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Instance_LabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::google::protobuf::internal::MapField<
      Instance_RedisConfigsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > redis_configs_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr location_id_;
  ::google::protobuf::internal::ArenaStringPtr alternative_location_id_;
  ::google::protobuf::internal::ArenaStringPtr redis_version_;
  ::google::protobuf::internal::ArenaStringPtr reserved_ip_range_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr current_location_id_;
  ::google::protobuf::internal::ArenaStringPtr status_message_;
  ::google::protobuf::internal::ArenaStringPtr authorized_network_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::int32 port_;
  int state_;
  int tier_;
  ::google::protobuf::int32 memory_size_gb_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fredis_2fv1beta1_2fcloud_5fredis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListInstancesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.redis.v1beta1.ListInstancesRequest) */ {
 public:
  ListInstancesRequest();
  virtual ~ListInstancesRequest();

  ListInstancesRequest(const ListInstancesRequest& from);

  inline ListInstancesRequest& operator=(const ListInstancesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListInstancesRequest(ListInstancesRequest&& from) noexcept
    : ListInstancesRequest() {
    *this = ::std::move(from);
  }

  inline ListInstancesRequest& operator=(ListInstancesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListInstancesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListInstancesRequest* internal_default_instance() {
    return reinterpret_cast<const ListInstancesRequest*>(
               &_ListInstancesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ListInstancesRequest* other);
  friend void swap(ListInstancesRequest& a, ListInstancesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListInstancesRequest* New() const final {
    return CreateMaybeMessage<ListInstancesRequest>(NULL);
  }

  ListInstancesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListInstancesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListInstancesRequest& from);
  void MergeFrom(const ListInstancesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListInstancesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.cloud.redis.v1beta1.ListInstancesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fredis_2fv1beta1_2fcloud_5fredis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListInstancesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.redis.v1beta1.ListInstancesResponse) */ {
 public:
  ListInstancesResponse();
  virtual ~ListInstancesResponse();

  ListInstancesResponse(const ListInstancesResponse& from);

  inline ListInstancesResponse& operator=(const ListInstancesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListInstancesResponse(ListInstancesResponse&& from) noexcept
    : ListInstancesResponse() {
    *this = ::std::move(from);
  }

  inline ListInstancesResponse& operator=(ListInstancesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListInstancesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListInstancesResponse* internal_default_instance() {
    return reinterpret_cast<const ListInstancesResponse*>(
               &_ListInstancesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ListInstancesResponse* other);
  friend void swap(ListInstancesResponse& a, ListInstancesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListInstancesResponse* New() const final {
    return CreateMaybeMessage<ListInstancesResponse>(NULL);
  }

  ListInstancesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListInstancesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListInstancesResponse& from);
  void MergeFrom(const ListInstancesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListInstancesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.redis.v1beta1.Instance instances = 1;
  int instances_size() const;
  void clear_instances();
  static const int kInstancesFieldNumber = 1;
  ::google::cloud::redis::v1beta1::Instance* mutable_instances(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::redis::v1beta1::Instance >*
      mutable_instances();
  const ::google::cloud::redis::v1beta1::Instance& instances(int index) const;
  ::google::cloud::redis::v1beta1::Instance* add_instances();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::redis::v1beta1::Instance >&
      instances() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.cloud.redis.v1beta1.ListInstancesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::redis::v1beta1::Instance > instances_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fredis_2fv1beta1_2fcloud_5fredis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetInstanceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.redis.v1beta1.GetInstanceRequest) */ {
 public:
  GetInstanceRequest();
  virtual ~GetInstanceRequest();

  GetInstanceRequest(const GetInstanceRequest& from);

  inline GetInstanceRequest& operator=(const GetInstanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetInstanceRequest(GetInstanceRequest&& from) noexcept
    : GetInstanceRequest() {
    *this = ::std::move(from);
  }

  inline GetInstanceRequest& operator=(GetInstanceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetInstanceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInstanceRequest* internal_default_instance() {
    return reinterpret_cast<const GetInstanceRequest*>(
               &_GetInstanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GetInstanceRequest* other);
  friend void swap(GetInstanceRequest& a, GetInstanceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetInstanceRequest* New() const final {
    return CreateMaybeMessage<GetInstanceRequest>(NULL);
  }

  GetInstanceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetInstanceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetInstanceRequest& from);
  void MergeFrom(const GetInstanceRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInstanceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.cloud.redis.v1beta1.GetInstanceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fredis_2fv1beta1_2fcloud_5fredis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateInstanceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.redis.v1beta1.CreateInstanceRequest) */ {
 public:
  CreateInstanceRequest();
  virtual ~CreateInstanceRequest();

  CreateInstanceRequest(const CreateInstanceRequest& from);

  inline CreateInstanceRequest& operator=(const CreateInstanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateInstanceRequest(CreateInstanceRequest&& from) noexcept
    : CreateInstanceRequest() {
    *this = ::std::move(from);
  }

  inline CreateInstanceRequest& operator=(CreateInstanceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateInstanceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateInstanceRequest* internal_default_instance() {
    return reinterpret_cast<const CreateInstanceRequest*>(
               &_CreateInstanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CreateInstanceRequest* other);
  friend void swap(CreateInstanceRequest& a, CreateInstanceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateInstanceRequest* New() const final {
    return CreateMaybeMessage<CreateInstanceRequest>(NULL);
  }

  CreateInstanceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateInstanceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateInstanceRequest& from);
  void MergeFrom(const CreateInstanceRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateInstanceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string instance_id = 2;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 2;
  const ::std::string& instance_id() const;
  void set_instance_id(const ::std::string& value);
  #if LANG_CXX11
  void set_instance_id(::std::string&& value);
  #endif
  void set_instance_id(const char* value);
  void set_instance_id(const char* value, size_t size);
  ::std::string* mutable_instance_id();
  ::std::string* release_instance_id();
  void set_allocated_instance_id(::std::string* instance_id);

  // .google.cloud.redis.v1beta1.Instance instance = 3;
  bool has_instance() const;
  void clear_instance();
  static const int kInstanceFieldNumber = 3;
  private:
  const ::google::cloud::redis::v1beta1::Instance& _internal_instance() const;
  public:
  const ::google::cloud::redis::v1beta1::Instance& instance() const;
  ::google::cloud::redis::v1beta1::Instance* release_instance();
  ::google::cloud::redis::v1beta1::Instance* mutable_instance();
  void set_allocated_instance(::google::cloud::redis::v1beta1::Instance* instance);

  // @@protoc_insertion_point(class_scope:google.cloud.redis.v1beta1.CreateInstanceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr instance_id_;
  ::google::cloud::redis::v1beta1::Instance* instance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fredis_2fv1beta1_2fcloud_5fredis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateInstanceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.redis.v1beta1.UpdateInstanceRequest) */ {
 public:
  UpdateInstanceRequest();
  virtual ~UpdateInstanceRequest();

  UpdateInstanceRequest(const UpdateInstanceRequest& from);

  inline UpdateInstanceRequest& operator=(const UpdateInstanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateInstanceRequest(UpdateInstanceRequest&& from) noexcept
    : UpdateInstanceRequest() {
    *this = ::std::move(from);
  }

  inline UpdateInstanceRequest& operator=(UpdateInstanceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateInstanceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateInstanceRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateInstanceRequest*>(
               &_UpdateInstanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(UpdateInstanceRequest* other);
  friend void swap(UpdateInstanceRequest& a, UpdateInstanceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateInstanceRequest* New() const final {
    return CreateMaybeMessage<UpdateInstanceRequest>(NULL);
  }

  UpdateInstanceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateInstanceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateInstanceRequest& from);
  void MergeFrom(const UpdateInstanceRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateInstanceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.FieldMask update_mask = 1;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 1;
  private:
  const ::google::protobuf::FieldMask& _internal_update_mask() const;
  public:
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);

  // .google.cloud.redis.v1beta1.Instance instance = 2;
  bool has_instance() const;
  void clear_instance();
  static const int kInstanceFieldNumber = 2;
  private:
  const ::google::cloud::redis::v1beta1::Instance& _internal_instance() const;
  public:
  const ::google::cloud::redis::v1beta1::Instance& instance() const;
  ::google::cloud::redis::v1beta1::Instance* release_instance();
  ::google::cloud::redis::v1beta1::Instance* mutable_instance();
  void set_allocated_instance(::google::cloud::redis::v1beta1::Instance* instance);

  // @@protoc_insertion_point(class_scope:google.cloud.redis.v1beta1.UpdateInstanceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::FieldMask* update_mask_;
  ::google::cloud::redis::v1beta1::Instance* instance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fredis_2fv1beta1_2fcloud_5fredis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteInstanceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.redis.v1beta1.DeleteInstanceRequest) */ {
 public:
  DeleteInstanceRequest();
  virtual ~DeleteInstanceRequest();

  DeleteInstanceRequest(const DeleteInstanceRequest& from);

  inline DeleteInstanceRequest& operator=(const DeleteInstanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteInstanceRequest(DeleteInstanceRequest&& from) noexcept
    : DeleteInstanceRequest() {
    *this = ::std::move(from);
  }

  inline DeleteInstanceRequest& operator=(DeleteInstanceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteInstanceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteInstanceRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteInstanceRequest*>(
               &_DeleteInstanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(DeleteInstanceRequest* other);
  friend void swap(DeleteInstanceRequest& a, DeleteInstanceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteInstanceRequest* New() const final {
    return CreateMaybeMessage<DeleteInstanceRequest>(NULL);
  }

  DeleteInstanceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteInstanceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteInstanceRequest& from);
  void MergeFrom(const DeleteInstanceRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteInstanceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.cloud.redis.v1beta1.DeleteInstanceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fredis_2fv1beta1_2fcloud_5fredis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LocationMetadata_AvailableZonesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<LocationMetadata_AvailableZonesEntry_DoNotUse, 
    ::std::string, ::google::cloud::redis::v1beta1::ZoneMetadata,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<LocationMetadata_AvailableZonesEntry_DoNotUse, 
    ::std::string, ::google::cloud::redis::v1beta1::ZoneMetadata,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  LocationMetadata_AvailableZonesEntry_DoNotUse();
  LocationMetadata_AvailableZonesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const LocationMetadata_AvailableZonesEntry_DoNotUse& other);
  static const LocationMetadata_AvailableZonesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LocationMetadata_AvailableZonesEntry_DoNotUse*>(&_LocationMetadata_AvailableZonesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class LocationMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.redis.v1beta1.LocationMetadata) */ {
 public:
  LocationMetadata();
  virtual ~LocationMetadata();

  LocationMetadata(const LocationMetadata& from);

  inline LocationMetadata& operator=(const LocationMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LocationMetadata(LocationMetadata&& from) noexcept
    : LocationMetadata() {
    *this = ::std::move(from);
  }

  inline LocationMetadata& operator=(LocationMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LocationMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocationMetadata* internal_default_instance() {
    return reinterpret_cast<const LocationMetadata*>(
               &_LocationMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(LocationMetadata* other);
  friend void swap(LocationMetadata& a, LocationMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocationMetadata* New() const final {
    return CreateMaybeMessage<LocationMetadata>(NULL);
  }

  LocationMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LocationMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LocationMetadata& from);
  void MergeFrom(const LocationMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocationMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .google.cloud.redis.v1beta1.ZoneMetadata> available_zones = 1;
  int available_zones_size() const;
  void clear_available_zones();
  static const int kAvailableZonesFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::google::cloud::redis::v1beta1::ZoneMetadata >&
      available_zones() const;
  ::google::protobuf::Map< ::std::string, ::google::cloud::redis::v1beta1::ZoneMetadata >*
      mutable_available_zones();

  // @@protoc_insertion_point(class_scope:google.cloud.redis.v1beta1.LocationMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      LocationMetadata_AvailableZonesEntry_DoNotUse,
      ::std::string, ::google::cloud::redis::v1beta1::ZoneMetadata,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > available_zones_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fredis_2fv1beta1_2fcloud_5fredis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ZoneMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.redis.v1beta1.ZoneMetadata) */ {
 public:
  ZoneMetadata();
  virtual ~ZoneMetadata();

  ZoneMetadata(const ZoneMetadata& from);

  inline ZoneMetadata& operator=(const ZoneMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ZoneMetadata(ZoneMetadata&& from) noexcept
    : ZoneMetadata() {
    *this = ::std::move(from);
  }

  inline ZoneMetadata& operator=(ZoneMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ZoneMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ZoneMetadata* internal_default_instance() {
    return reinterpret_cast<const ZoneMetadata*>(
               &_ZoneMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ZoneMetadata* other);
  friend void swap(ZoneMetadata& a, ZoneMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ZoneMetadata* New() const final {
    return CreateMaybeMessage<ZoneMetadata>(NULL);
  }

  ZoneMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ZoneMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ZoneMetadata& from);
  void MergeFrom(const ZoneMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZoneMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.cloud.redis.v1beta1.ZoneMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fredis_2fv1beta1_2fcloud_5fredis_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Instance

// string name = 1;
inline void Instance::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Instance::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.redis.v1beta1.Instance.name)
  return name_.GetNoArena();
}
inline void Instance::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.redis.v1beta1.Instance.name)
}
#if LANG_CXX11
inline void Instance::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.redis.v1beta1.Instance.name)
}
#endif
inline void Instance::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.redis.v1beta1.Instance.name)
}
inline void Instance::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.redis.v1beta1.Instance.name)
}
inline ::std::string* Instance::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.redis.v1beta1.Instance.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Instance::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.redis.v1beta1.Instance.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Instance::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.redis.v1beta1.Instance.name)
}

// string display_name = 2;
inline void Instance::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Instance::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.redis.v1beta1.Instance.display_name)
  return display_name_.GetNoArena();
}
inline void Instance::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.redis.v1beta1.Instance.display_name)
}
#if LANG_CXX11
inline void Instance::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.redis.v1beta1.Instance.display_name)
}
#endif
inline void Instance::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.redis.v1beta1.Instance.display_name)
}
inline void Instance::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.redis.v1beta1.Instance.display_name)
}
inline ::std::string* Instance::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.redis.v1beta1.Instance.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Instance::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.redis.v1beta1.Instance.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Instance::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.redis.v1beta1.Instance.display_name)
}

// map<string, string> labels = 3;
inline int Instance::labels_size() const {
  return labels_.size();
}
inline void Instance::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Instance::labels() const {
  // @@protoc_insertion_point(field_map:google.cloud.redis.v1beta1.Instance.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Instance::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.redis.v1beta1.Instance.labels)
  return labels_.MutableMap();
}

// string location_id = 4;
inline void Instance::clear_location_id() {
  location_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Instance::location_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.redis.v1beta1.Instance.location_id)
  return location_id_.GetNoArena();
}
inline void Instance::set_location_id(const ::std::string& value) {
  
  location_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.redis.v1beta1.Instance.location_id)
}
#if LANG_CXX11
inline void Instance::set_location_id(::std::string&& value) {
  
  location_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.redis.v1beta1.Instance.location_id)
}
#endif
inline void Instance::set_location_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.redis.v1beta1.Instance.location_id)
}
inline void Instance::set_location_id(const char* value, size_t size) {
  
  location_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.redis.v1beta1.Instance.location_id)
}
inline ::std::string* Instance::mutable_location_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.redis.v1beta1.Instance.location_id)
  return location_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Instance::release_location_id() {
  // @@protoc_insertion_point(field_release:google.cloud.redis.v1beta1.Instance.location_id)
  
  return location_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Instance::set_allocated_location_id(::std::string* location_id) {
  if (location_id != NULL) {
    
  } else {
    
  }
  location_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.redis.v1beta1.Instance.location_id)
}

// string alternative_location_id = 5;
inline void Instance::clear_alternative_location_id() {
  alternative_location_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Instance::alternative_location_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.redis.v1beta1.Instance.alternative_location_id)
  return alternative_location_id_.GetNoArena();
}
inline void Instance::set_alternative_location_id(const ::std::string& value) {
  
  alternative_location_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.redis.v1beta1.Instance.alternative_location_id)
}
#if LANG_CXX11
inline void Instance::set_alternative_location_id(::std::string&& value) {
  
  alternative_location_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.redis.v1beta1.Instance.alternative_location_id)
}
#endif
inline void Instance::set_alternative_location_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alternative_location_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.redis.v1beta1.Instance.alternative_location_id)
}
inline void Instance::set_alternative_location_id(const char* value, size_t size) {
  
  alternative_location_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.redis.v1beta1.Instance.alternative_location_id)
}
inline ::std::string* Instance::mutable_alternative_location_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.redis.v1beta1.Instance.alternative_location_id)
  return alternative_location_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Instance::release_alternative_location_id() {
  // @@protoc_insertion_point(field_release:google.cloud.redis.v1beta1.Instance.alternative_location_id)
  
  return alternative_location_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Instance::set_allocated_alternative_location_id(::std::string* alternative_location_id) {
  if (alternative_location_id != NULL) {
    
  } else {
    
  }
  alternative_location_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alternative_location_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.redis.v1beta1.Instance.alternative_location_id)
}

// string redis_version = 7;
inline void Instance::clear_redis_version() {
  redis_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Instance::redis_version() const {
  // @@protoc_insertion_point(field_get:google.cloud.redis.v1beta1.Instance.redis_version)
  return redis_version_.GetNoArena();
}
inline void Instance::set_redis_version(const ::std::string& value) {
  
  redis_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.redis.v1beta1.Instance.redis_version)
}
#if LANG_CXX11
inline void Instance::set_redis_version(::std::string&& value) {
  
  redis_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.redis.v1beta1.Instance.redis_version)
}
#endif
inline void Instance::set_redis_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  redis_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.redis.v1beta1.Instance.redis_version)
}
inline void Instance::set_redis_version(const char* value, size_t size) {
  
  redis_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.redis.v1beta1.Instance.redis_version)
}
inline ::std::string* Instance::mutable_redis_version() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.redis.v1beta1.Instance.redis_version)
  return redis_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Instance::release_redis_version() {
  // @@protoc_insertion_point(field_release:google.cloud.redis.v1beta1.Instance.redis_version)
  
  return redis_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Instance::set_allocated_redis_version(::std::string* redis_version) {
  if (redis_version != NULL) {
    
  } else {
    
  }
  redis_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redis_version);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.redis.v1beta1.Instance.redis_version)
}

// string reserved_ip_range = 9;
inline void Instance::clear_reserved_ip_range() {
  reserved_ip_range_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Instance::reserved_ip_range() const {
  // @@protoc_insertion_point(field_get:google.cloud.redis.v1beta1.Instance.reserved_ip_range)
  return reserved_ip_range_.GetNoArena();
}
inline void Instance::set_reserved_ip_range(const ::std::string& value) {
  
  reserved_ip_range_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.redis.v1beta1.Instance.reserved_ip_range)
}
#if LANG_CXX11
inline void Instance::set_reserved_ip_range(::std::string&& value) {
  
  reserved_ip_range_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.redis.v1beta1.Instance.reserved_ip_range)
}
#endif
inline void Instance::set_reserved_ip_range(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reserved_ip_range_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.redis.v1beta1.Instance.reserved_ip_range)
}
inline void Instance::set_reserved_ip_range(const char* value, size_t size) {
  
  reserved_ip_range_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.redis.v1beta1.Instance.reserved_ip_range)
}
inline ::std::string* Instance::mutable_reserved_ip_range() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.redis.v1beta1.Instance.reserved_ip_range)
  return reserved_ip_range_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Instance::release_reserved_ip_range() {
  // @@protoc_insertion_point(field_release:google.cloud.redis.v1beta1.Instance.reserved_ip_range)
  
  return reserved_ip_range_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Instance::set_allocated_reserved_ip_range(::std::string* reserved_ip_range) {
  if (reserved_ip_range != NULL) {
    
  } else {
    
  }
  reserved_ip_range_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reserved_ip_range);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.redis.v1beta1.Instance.reserved_ip_range)
}

// string host = 10;
inline void Instance::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Instance::host() const {
  // @@protoc_insertion_point(field_get:google.cloud.redis.v1beta1.Instance.host)
  return host_.GetNoArena();
}
inline void Instance::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.redis.v1beta1.Instance.host)
}
#if LANG_CXX11
inline void Instance::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.redis.v1beta1.Instance.host)
}
#endif
inline void Instance::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.redis.v1beta1.Instance.host)
}
inline void Instance::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.redis.v1beta1.Instance.host)
}
inline ::std::string* Instance::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.redis.v1beta1.Instance.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Instance::release_host() {
  // @@protoc_insertion_point(field_release:google.cloud.redis.v1beta1.Instance.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Instance::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.redis.v1beta1.Instance.host)
}

// int32 port = 11;
inline void Instance::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 Instance::port() const {
  // @@protoc_insertion_point(field_get:google.cloud.redis.v1beta1.Instance.port)
  return port_;
}
inline void Instance::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.redis.v1beta1.Instance.port)
}

// string current_location_id = 12;
inline void Instance::clear_current_location_id() {
  current_location_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Instance::current_location_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.redis.v1beta1.Instance.current_location_id)
  return current_location_id_.GetNoArena();
}
inline void Instance::set_current_location_id(const ::std::string& value) {
  
  current_location_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.redis.v1beta1.Instance.current_location_id)
}
#if LANG_CXX11
inline void Instance::set_current_location_id(::std::string&& value) {
  
  current_location_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.redis.v1beta1.Instance.current_location_id)
}
#endif
inline void Instance::set_current_location_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  current_location_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.redis.v1beta1.Instance.current_location_id)
}
inline void Instance::set_current_location_id(const char* value, size_t size) {
  
  current_location_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.redis.v1beta1.Instance.current_location_id)
}
inline ::std::string* Instance::mutable_current_location_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.redis.v1beta1.Instance.current_location_id)
  return current_location_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Instance::release_current_location_id() {
  // @@protoc_insertion_point(field_release:google.cloud.redis.v1beta1.Instance.current_location_id)
  
  return current_location_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Instance::set_allocated_current_location_id(::std::string* current_location_id) {
  if (current_location_id != NULL) {
    
  } else {
    
  }
  current_location_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_location_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.redis.v1beta1.Instance.current_location_id)
}

// .google.protobuf.Timestamp create_time = 13;
inline bool Instance::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Instance::_internal_create_time() const {
  return *create_time_;
}
inline const ::google::protobuf::Timestamp& Instance::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.cloud.redis.v1beta1.Instance.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Instance::release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.redis.v1beta1.Instance.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Instance::mutable_create_time() {
  
  if (create_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.redis.v1beta1.Instance.create_time)
  return create_time_;
}
inline void Instance::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.redis.v1beta1.Instance.create_time)
}

// .google.cloud.redis.v1beta1.Instance.State state = 14;
inline void Instance::clear_state() {
  state_ = 0;
}
inline ::google::cloud::redis::v1beta1::Instance_State Instance::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.redis.v1beta1.Instance.state)
  return static_cast< ::google::cloud::redis::v1beta1::Instance_State >(state_);
}
inline void Instance::set_state(::google::cloud::redis::v1beta1::Instance_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.redis.v1beta1.Instance.state)
}

// string status_message = 15;
inline void Instance::clear_status_message() {
  status_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Instance::status_message() const {
  // @@protoc_insertion_point(field_get:google.cloud.redis.v1beta1.Instance.status_message)
  return status_message_.GetNoArena();
}
inline void Instance::set_status_message(const ::std::string& value) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.redis.v1beta1.Instance.status_message)
}
#if LANG_CXX11
inline void Instance::set_status_message(::std::string&& value) {
  
  status_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.redis.v1beta1.Instance.status_message)
}
#endif
inline void Instance::set_status_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.redis.v1beta1.Instance.status_message)
}
inline void Instance::set_status_message(const char* value, size_t size) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.redis.v1beta1.Instance.status_message)
}
inline ::std::string* Instance::mutable_status_message() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.redis.v1beta1.Instance.status_message)
  return status_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Instance::release_status_message() {
  // @@protoc_insertion_point(field_release:google.cloud.redis.v1beta1.Instance.status_message)
  
  return status_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Instance::set_allocated_status_message(::std::string* status_message) {
  if (status_message != NULL) {
    
  } else {
    
  }
  status_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status_message);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.redis.v1beta1.Instance.status_message)
}

// map<string, string> redis_configs = 16;
inline int Instance::redis_configs_size() const {
  return redis_configs_.size();
}
inline void Instance::clear_redis_configs() {
  redis_configs_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Instance::redis_configs() const {
  // @@protoc_insertion_point(field_map:google.cloud.redis.v1beta1.Instance.redis_configs)
  return redis_configs_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Instance::mutable_redis_configs() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.redis.v1beta1.Instance.redis_configs)
  return redis_configs_.MutableMap();
}

// .google.cloud.redis.v1beta1.Instance.Tier tier = 17;
inline void Instance::clear_tier() {
  tier_ = 0;
}
inline ::google::cloud::redis::v1beta1::Instance_Tier Instance::tier() const {
  // @@protoc_insertion_point(field_get:google.cloud.redis.v1beta1.Instance.tier)
  return static_cast< ::google::cloud::redis::v1beta1::Instance_Tier >(tier_);
}
inline void Instance::set_tier(::google::cloud::redis::v1beta1::Instance_Tier value) {
  
  tier_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.redis.v1beta1.Instance.tier)
}

// int32 memory_size_gb = 18;
inline void Instance::clear_memory_size_gb() {
  memory_size_gb_ = 0;
}
inline ::google::protobuf::int32 Instance::memory_size_gb() const {
  // @@protoc_insertion_point(field_get:google.cloud.redis.v1beta1.Instance.memory_size_gb)
  return memory_size_gb_;
}
inline void Instance::set_memory_size_gb(::google::protobuf::int32 value) {
  
  memory_size_gb_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.redis.v1beta1.Instance.memory_size_gb)
}

// string authorized_network = 20;
inline void Instance::clear_authorized_network() {
  authorized_network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Instance::authorized_network() const {
  // @@protoc_insertion_point(field_get:google.cloud.redis.v1beta1.Instance.authorized_network)
  return authorized_network_.GetNoArena();
}
inline void Instance::set_authorized_network(const ::std::string& value) {
  
  authorized_network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.redis.v1beta1.Instance.authorized_network)
}
#if LANG_CXX11
inline void Instance::set_authorized_network(::std::string&& value) {
  
  authorized_network_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.redis.v1beta1.Instance.authorized_network)
}
#endif
inline void Instance::set_authorized_network(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  authorized_network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.redis.v1beta1.Instance.authorized_network)
}
inline void Instance::set_authorized_network(const char* value, size_t size) {
  
  authorized_network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.redis.v1beta1.Instance.authorized_network)
}
inline ::std::string* Instance::mutable_authorized_network() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.redis.v1beta1.Instance.authorized_network)
  return authorized_network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Instance::release_authorized_network() {
  // @@protoc_insertion_point(field_release:google.cloud.redis.v1beta1.Instance.authorized_network)
  
  return authorized_network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Instance::set_allocated_authorized_network(::std::string* authorized_network) {
  if (authorized_network != NULL) {
    
  } else {
    
  }
  authorized_network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authorized_network);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.redis.v1beta1.Instance.authorized_network)
}

// -------------------------------------------------------------------

// ListInstancesRequest

// string parent = 1;
inline void ListInstancesRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListInstancesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.redis.v1beta1.ListInstancesRequest.parent)
  return parent_.GetNoArena();
}
inline void ListInstancesRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.redis.v1beta1.ListInstancesRequest.parent)
}
#if LANG_CXX11
inline void ListInstancesRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.redis.v1beta1.ListInstancesRequest.parent)
}
#endif
inline void ListInstancesRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.redis.v1beta1.ListInstancesRequest.parent)
}
inline void ListInstancesRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.redis.v1beta1.ListInstancesRequest.parent)
}
inline ::std::string* ListInstancesRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.redis.v1beta1.ListInstancesRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListInstancesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.redis.v1beta1.ListInstancesRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListInstancesRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.redis.v1beta1.ListInstancesRequest.parent)
}

// int32 page_size = 2;
inline void ListInstancesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListInstancesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.redis.v1beta1.ListInstancesRequest.page_size)
  return page_size_;
}
inline void ListInstancesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.redis.v1beta1.ListInstancesRequest.page_size)
}

// string page_token = 3;
inline void ListInstancesRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListInstancesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.redis.v1beta1.ListInstancesRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListInstancesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.redis.v1beta1.ListInstancesRequest.page_token)
}
#if LANG_CXX11
inline void ListInstancesRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.redis.v1beta1.ListInstancesRequest.page_token)
}
#endif
inline void ListInstancesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.redis.v1beta1.ListInstancesRequest.page_token)
}
inline void ListInstancesRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.redis.v1beta1.ListInstancesRequest.page_token)
}
inline ::std::string* ListInstancesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.redis.v1beta1.ListInstancesRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListInstancesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.redis.v1beta1.ListInstancesRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListInstancesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.redis.v1beta1.ListInstancesRequest.page_token)
}

// -------------------------------------------------------------------

// ListInstancesResponse

// repeated .google.cloud.redis.v1beta1.Instance instances = 1;
inline int ListInstancesResponse::instances_size() const {
  return instances_.size();
}
inline void ListInstancesResponse::clear_instances() {
  instances_.Clear();
}
inline ::google::cloud::redis::v1beta1::Instance* ListInstancesResponse::mutable_instances(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.redis.v1beta1.ListInstancesResponse.instances)
  return instances_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::redis::v1beta1::Instance >*
ListInstancesResponse::mutable_instances() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.redis.v1beta1.ListInstancesResponse.instances)
  return &instances_;
}
inline const ::google::cloud::redis::v1beta1::Instance& ListInstancesResponse::instances(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.redis.v1beta1.ListInstancesResponse.instances)
  return instances_.Get(index);
}
inline ::google::cloud::redis::v1beta1::Instance* ListInstancesResponse::add_instances() {
  // @@protoc_insertion_point(field_add:google.cloud.redis.v1beta1.ListInstancesResponse.instances)
  return instances_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::redis::v1beta1::Instance >&
ListInstancesResponse::instances() const {
  // @@protoc_insertion_point(field_list:google.cloud.redis.v1beta1.ListInstancesResponse.instances)
  return instances_;
}

// string next_page_token = 2;
inline void ListInstancesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListInstancesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.redis.v1beta1.ListInstancesResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListInstancesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.redis.v1beta1.ListInstancesResponse.next_page_token)
}
#if LANG_CXX11
inline void ListInstancesResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.redis.v1beta1.ListInstancesResponse.next_page_token)
}
#endif
inline void ListInstancesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.redis.v1beta1.ListInstancesResponse.next_page_token)
}
inline void ListInstancesResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.redis.v1beta1.ListInstancesResponse.next_page_token)
}
inline ::std::string* ListInstancesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.redis.v1beta1.ListInstancesResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListInstancesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.redis.v1beta1.ListInstancesResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListInstancesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.redis.v1beta1.ListInstancesResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetInstanceRequest

// string name = 1;
inline void GetInstanceRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetInstanceRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.redis.v1beta1.GetInstanceRequest.name)
  return name_.GetNoArena();
}
inline void GetInstanceRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.redis.v1beta1.GetInstanceRequest.name)
}
#if LANG_CXX11
inline void GetInstanceRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.redis.v1beta1.GetInstanceRequest.name)
}
#endif
inline void GetInstanceRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.redis.v1beta1.GetInstanceRequest.name)
}
inline void GetInstanceRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.redis.v1beta1.GetInstanceRequest.name)
}
inline ::std::string* GetInstanceRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.redis.v1beta1.GetInstanceRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetInstanceRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.redis.v1beta1.GetInstanceRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetInstanceRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.redis.v1beta1.GetInstanceRequest.name)
}

// -------------------------------------------------------------------

// CreateInstanceRequest

// string parent = 1;
inline void CreateInstanceRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateInstanceRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.redis.v1beta1.CreateInstanceRequest.parent)
  return parent_.GetNoArena();
}
inline void CreateInstanceRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.redis.v1beta1.CreateInstanceRequest.parent)
}
#if LANG_CXX11
inline void CreateInstanceRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.redis.v1beta1.CreateInstanceRequest.parent)
}
#endif
inline void CreateInstanceRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.redis.v1beta1.CreateInstanceRequest.parent)
}
inline void CreateInstanceRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.redis.v1beta1.CreateInstanceRequest.parent)
}
inline ::std::string* CreateInstanceRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.redis.v1beta1.CreateInstanceRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateInstanceRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.redis.v1beta1.CreateInstanceRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateInstanceRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.redis.v1beta1.CreateInstanceRequest.parent)
}

// string instance_id = 2;
inline void CreateInstanceRequest::clear_instance_id() {
  instance_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateInstanceRequest::instance_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.redis.v1beta1.CreateInstanceRequest.instance_id)
  return instance_id_.GetNoArena();
}
inline void CreateInstanceRequest::set_instance_id(const ::std::string& value) {
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.redis.v1beta1.CreateInstanceRequest.instance_id)
}
#if LANG_CXX11
inline void CreateInstanceRequest::set_instance_id(::std::string&& value) {
  
  instance_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.redis.v1beta1.CreateInstanceRequest.instance_id)
}
#endif
inline void CreateInstanceRequest::set_instance_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.redis.v1beta1.CreateInstanceRequest.instance_id)
}
inline void CreateInstanceRequest::set_instance_id(const char* value, size_t size) {
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.redis.v1beta1.CreateInstanceRequest.instance_id)
}
inline ::std::string* CreateInstanceRequest::mutable_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.redis.v1beta1.CreateInstanceRequest.instance_id)
  return instance_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateInstanceRequest::release_instance_id() {
  // @@protoc_insertion_point(field_release:google.cloud.redis.v1beta1.CreateInstanceRequest.instance_id)
  
  return instance_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateInstanceRequest::set_allocated_instance_id(::std::string* instance_id) {
  if (instance_id != NULL) {
    
  } else {
    
  }
  instance_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.redis.v1beta1.CreateInstanceRequest.instance_id)
}

// .google.cloud.redis.v1beta1.Instance instance = 3;
inline bool CreateInstanceRequest::has_instance() const {
  return this != internal_default_instance() && instance_ != NULL;
}
inline void CreateInstanceRequest::clear_instance() {
  if (GetArenaNoVirtual() == NULL && instance_ != NULL) {
    delete instance_;
  }
  instance_ = NULL;
}
inline const ::google::cloud::redis::v1beta1::Instance& CreateInstanceRequest::_internal_instance() const {
  return *instance_;
}
inline const ::google::cloud::redis::v1beta1::Instance& CreateInstanceRequest::instance() const {
  const ::google::cloud::redis::v1beta1::Instance* p = instance_;
  // @@protoc_insertion_point(field_get:google.cloud.redis.v1beta1.CreateInstanceRequest.instance)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::redis::v1beta1::Instance*>(
      &::google::cloud::redis::v1beta1::_Instance_default_instance_);
}
inline ::google::cloud::redis::v1beta1::Instance* CreateInstanceRequest::release_instance() {
  // @@protoc_insertion_point(field_release:google.cloud.redis.v1beta1.CreateInstanceRequest.instance)
  
  ::google::cloud::redis::v1beta1::Instance* temp = instance_;
  instance_ = NULL;
  return temp;
}
inline ::google::cloud::redis::v1beta1::Instance* CreateInstanceRequest::mutable_instance() {
  
  if (instance_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::redis::v1beta1::Instance>(GetArenaNoVirtual());
    instance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.redis.v1beta1.CreateInstanceRequest.instance)
  return instance_;
}
inline void CreateInstanceRequest::set_allocated_instance(::google::cloud::redis::v1beta1::Instance* instance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete instance_;
  }
  if (instance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      instance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, instance, submessage_arena);
    }
    
  } else {
    
  }
  instance_ = instance;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.redis.v1beta1.CreateInstanceRequest.instance)
}

// -------------------------------------------------------------------

// UpdateInstanceRequest

// .google.protobuf.FieldMask update_mask = 1;
inline bool UpdateInstanceRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline const ::google::protobuf::FieldMask& UpdateInstanceRequest::_internal_update_mask() const {
  return *update_mask_;
}
inline const ::google::protobuf::FieldMask& UpdateInstanceRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:google.cloud.redis.v1beta1.UpdateInstanceRequest.update_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateInstanceRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.redis.v1beta1.UpdateInstanceRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateInstanceRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::FieldMask>(GetArenaNoVirtual());
    update_mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.redis.v1beta1.UpdateInstanceRequest.update_mask)
  return update_mask_;
}
inline void UpdateInstanceRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.redis.v1beta1.UpdateInstanceRequest.update_mask)
}

// .google.cloud.redis.v1beta1.Instance instance = 2;
inline bool UpdateInstanceRequest::has_instance() const {
  return this != internal_default_instance() && instance_ != NULL;
}
inline void UpdateInstanceRequest::clear_instance() {
  if (GetArenaNoVirtual() == NULL && instance_ != NULL) {
    delete instance_;
  }
  instance_ = NULL;
}
inline const ::google::cloud::redis::v1beta1::Instance& UpdateInstanceRequest::_internal_instance() const {
  return *instance_;
}
inline const ::google::cloud::redis::v1beta1::Instance& UpdateInstanceRequest::instance() const {
  const ::google::cloud::redis::v1beta1::Instance* p = instance_;
  // @@protoc_insertion_point(field_get:google.cloud.redis.v1beta1.UpdateInstanceRequest.instance)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::redis::v1beta1::Instance*>(
      &::google::cloud::redis::v1beta1::_Instance_default_instance_);
}
inline ::google::cloud::redis::v1beta1::Instance* UpdateInstanceRequest::release_instance() {
  // @@protoc_insertion_point(field_release:google.cloud.redis.v1beta1.UpdateInstanceRequest.instance)
  
  ::google::cloud::redis::v1beta1::Instance* temp = instance_;
  instance_ = NULL;
  return temp;
}
inline ::google::cloud::redis::v1beta1::Instance* UpdateInstanceRequest::mutable_instance() {
  
  if (instance_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::redis::v1beta1::Instance>(GetArenaNoVirtual());
    instance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.redis.v1beta1.UpdateInstanceRequest.instance)
  return instance_;
}
inline void UpdateInstanceRequest::set_allocated_instance(::google::cloud::redis::v1beta1::Instance* instance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete instance_;
  }
  if (instance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      instance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, instance, submessage_arena);
    }
    
  } else {
    
  }
  instance_ = instance;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.redis.v1beta1.UpdateInstanceRequest.instance)
}

// -------------------------------------------------------------------

// DeleteInstanceRequest

// string name = 1;
inline void DeleteInstanceRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteInstanceRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.redis.v1beta1.DeleteInstanceRequest.name)
  return name_.GetNoArena();
}
inline void DeleteInstanceRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.redis.v1beta1.DeleteInstanceRequest.name)
}
#if LANG_CXX11
inline void DeleteInstanceRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.redis.v1beta1.DeleteInstanceRequest.name)
}
#endif
inline void DeleteInstanceRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.redis.v1beta1.DeleteInstanceRequest.name)
}
inline void DeleteInstanceRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.redis.v1beta1.DeleteInstanceRequest.name)
}
inline ::std::string* DeleteInstanceRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.redis.v1beta1.DeleteInstanceRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteInstanceRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.redis.v1beta1.DeleteInstanceRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteInstanceRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.redis.v1beta1.DeleteInstanceRequest.name)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// LocationMetadata

// map<string, .google.cloud.redis.v1beta1.ZoneMetadata> available_zones = 1;
inline int LocationMetadata::available_zones_size() const {
  return available_zones_.size();
}
inline void LocationMetadata::clear_available_zones() {
  available_zones_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::cloud::redis::v1beta1::ZoneMetadata >&
LocationMetadata::available_zones() const {
  // @@protoc_insertion_point(field_map:google.cloud.redis.v1beta1.LocationMetadata.available_zones)
  return available_zones_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::cloud::redis::v1beta1::ZoneMetadata >*
LocationMetadata::mutable_available_zones() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.redis.v1beta1.LocationMetadata.available_zones)
  return available_zones_.MutableMap();
}

// -------------------------------------------------------------------

// ZoneMetadata

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace redis
}  // namespace cloud
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::cloud::redis::v1beta1::Instance_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::redis::v1beta1::Instance_State>() {
  return ::google::cloud::redis::v1beta1::Instance_State_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::redis::v1beta1::Instance_Tier> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::redis::v1beta1::Instance_Tier>() {
  return ::google::cloud::redis::v1beta1::Instance_Tier_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fcloud_2fredis_2fv1beta1_2fcloud_5fredis_2eproto
