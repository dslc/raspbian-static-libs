// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/cloud/redis/v1beta1/cloud_redis.proto
// Original file comments:
// Copyright 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fcloud_2fredis_2fv1beta1_2fcloud_5fredis_2eproto__INCLUDED
#define GRPC_google_2fcloud_2fredis_2fv1beta1_2fcloud_5fredis_2eproto__INCLUDED

#include "google/cloud/redis/v1beta1/cloud_redis.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace cloud {
namespace redis {
namespace v1beta1 {

// Configures and manages Cloud Memorystore for Redis instances
//
// Google Cloud Memorystore for Redis v1beta1
//
// The `redis.googleapis.com` service implements the Google Cloud Memorystore
// for Redis API and defines the following resource model for managing Redis
// instances:
// * The service works with a collection of cloud projects, named: `/projects/*`
// * Each project has a collection of available locations, named: `/locations/*`
// * Each location has a collection of Redis instances, named: `/instances/*`
// * As such, Redis instances are resources of the form:
//   `/projects/{project_id}/locations/{location_id}/instances/{instance_id}`
//
// Note that location_id must be refering to a GCP `region`; for example:
// * `projects/redpepper-1290/locations/us-central1/instances/my-redis`
class CloudRedis final {
 public:
  static constexpr char const* service_full_name() {
    return "google.cloud.redis.v1beta1.CloudRedis";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists all Redis instances owned by a project in either the specified
    // location (region) or all locations.
    //
    // The location should have the following format:
    // * `projects/{project_id}/locations/{location_id}`
    //
    // If `location_id` is specified as `-` (wildcard), then all regions
    // available to the project are queried, and the results are aggregated.
    virtual ::grpc::Status ListInstances(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::ListInstancesRequest& request, ::google::cloud::redis::v1beta1::ListInstancesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::redis::v1beta1::ListInstancesResponse>> AsyncListInstances(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::redis::v1beta1::ListInstancesResponse>>(AsyncListInstancesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::redis::v1beta1::ListInstancesResponse>> PrepareAsyncListInstances(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::redis::v1beta1::ListInstancesResponse>>(PrepareAsyncListInstancesRaw(context, request, cq));
    }
    // Gets the details of a specific Redis instance.
    virtual ::grpc::Status GetInstance(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::GetInstanceRequest& request, ::google::cloud::redis::v1beta1::Instance* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::redis::v1beta1::Instance>> AsyncGetInstance(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::redis::v1beta1::Instance>>(AsyncGetInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::redis::v1beta1::Instance>> PrepareAsyncGetInstance(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::redis::v1beta1::Instance>>(PrepareAsyncGetInstanceRaw(context, request, cq));
    }
    // Creates a Redis instance based on the specified tier and memory size.
    //
    // By default, the instance is peered to the project's
    // [default network](/compute/docs/networks-and-firewalls#networks).
    //
    // The creation is executed asynchronously and callers may check the returned
    // operation to track its progress. Once the operation is completed the Redis
    // instance will be fully functional. Completed longrunning.Operation will
    // contain the new instance object in the response field.
    //
    // The returned operation is automatically deleted after a few hours, so there
    // is no need to call DeleteOperation.
    virtual ::grpc::Status CreateInstance(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::CreateInstanceRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncCreateInstance(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::CreateInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncCreateInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncCreateInstance(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::CreateInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncCreateInstanceRaw(context, request, cq));
    }
    // Updates the metadata and configuration of a specific Redis instance.
    //
    // Completed longrunning.Operation will contain the new instance object
    // in the response field. The returned operation is automatically deleted
    // after a few hours, so there is no need to call DeleteOperation.
    virtual ::grpc::Status UpdateInstance(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::UpdateInstanceRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncUpdateInstance(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::UpdateInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncUpdateInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncUpdateInstance(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::UpdateInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncUpdateInstanceRaw(context, request, cq));
    }
    // Deletes a specific Redis instance.  Instance stops serving and data is
    // deleted.
    virtual ::grpc::Status DeleteInstance(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::DeleteInstanceRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncDeleteInstance(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncDeleteInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncDeleteInstance(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncDeleteInstanceRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::redis::v1beta1::ListInstancesResponse>* AsyncListInstancesRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::redis::v1beta1::ListInstancesResponse>* PrepareAsyncListInstancesRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::redis::v1beta1::Instance>* AsyncGetInstanceRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::redis::v1beta1::Instance>* PrepareAsyncGetInstanceRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncCreateInstanceRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::CreateInstanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncCreateInstanceRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::CreateInstanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncUpdateInstanceRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::UpdateInstanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncUpdateInstanceRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::UpdateInstanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncDeleteInstanceRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncDeleteInstanceRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListInstances(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::ListInstancesRequest& request, ::google::cloud::redis::v1beta1::ListInstancesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::redis::v1beta1::ListInstancesResponse>> AsyncListInstances(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::redis::v1beta1::ListInstancesResponse>>(AsyncListInstancesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::redis::v1beta1::ListInstancesResponse>> PrepareAsyncListInstances(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::redis::v1beta1::ListInstancesResponse>>(PrepareAsyncListInstancesRaw(context, request, cq));
    }
    ::grpc::Status GetInstance(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::GetInstanceRequest& request, ::google::cloud::redis::v1beta1::Instance* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::redis::v1beta1::Instance>> AsyncGetInstance(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::redis::v1beta1::Instance>>(AsyncGetInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::redis::v1beta1::Instance>> PrepareAsyncGetInstance(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::redis::v1beta1::Instance>>(PrepareAsyncGetInstanceRaw(context, request, cq));
    }
    ::grpc::Status CreateInstance(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::CreateInstanceRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncCreateInstance(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::CreateInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncCreateInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncCreateInstance(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::CreateInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncCreateInstanceRaw(context, request, cq));
    }
    ::grpc::Status UpdateInstance(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::UpdateInstanceRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncUpdateInstance(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::UpdateInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncUpdateInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncUpdateInstance(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::UpdateInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncUpdateInstanceRaw(context, request, cq));
    }
    ::grpc::Status DeleteInstance(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::DeleteInstanceRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncDeleteInstance(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncDeleteInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncDeleteInstance(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncDeleteInstanceRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::redis::v1beta1::ListInstancesResponse>* AsyncListInstancesRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::redis::v1beta1::ListInstancesResponse>* PrepareAsyncListInstancesRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::redis::v1beta1::Instance>* AsyncGetInstanceRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::redis::v1beta1::Instance>* PrepareAsyncGetInstanceRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncCreateInstanceRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::CreateInstanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncCreateInstanceRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::CreateInstanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncUpdateInstanceRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::UpdateInstanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncUpdateInstanceRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::UpdateInstanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncDeleteInstanceRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncDeleteInstanceRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListInstances_;
    const ::grpc::internal::RpcMethod rpcmethod_GetInstance_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateInstance_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateInstance_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteInstance_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists all Redis instances owned by a project in either the specified
    // location (region) or all locations.
    //
    // The location should have the following format:
    // * `projects/{project_id}/locations/{location_id}`
    //
    // If `location_id` is specified as `-` (wildcard), then all regions
    // available to the project are queried, and the results are aggregated.
    virtual ::grpc::Status ListInstances(::grpc::ServerContext* context, const ::google::cloud::redis::v1beta1::ListInstancesRequest* request, ::google::cloud::redis::v1beta1::ListInstancesResponse* response);
    // Gets the details of a specific Redis instance.
    virtual ::grpc::Status GetInstance(::grpc::ServerContext* context, const ::google::cloud::redis::v1beta1::GetInstanceRequest* request, ::google::cloud::redis::v1beta1::Instance* response);
    // Creates a Redis instance based on the specified tier and memory size.
    //
    // By default, the instance is peered to the project's
    // [default network](/compute/docs/networks-and-firewalls#networks).
    //
    // The creation is executed asynchronously and callers may check the returned
    // operation to track its progress. Once the operation is completed the Redis
    // instance will be fully functional. Completed longrunning.Operation will
    // contain the new instance object in the response field.
    //
    // The returned operation is automatically deleted after a few hours, so there
    // is no need to call DeleteOperation.
    virtual ::grpc::Status CreateInstance(::grpc::ServerContext* context, const ::google::cloud::redis::v1beta1::CreateInstanceRequest* request, ::google::longrunning::Operation* response);
    // Updates the metadata and configuration of a specific Redis instance.
    //
    // Completed longrunning.Operation will contain the new instance object
    // in the response field. The returned operation is automatically deleted
    // after a few hours, so there is no need to call DeleteOperation.
    virtual ::grpc::Status UpdateInstance(::grpc::ServerContext* context, const ::google::cloud::redis::v1beta1::UpdateInstanceRequest* request, ::google::longrunning::Operation* response);
    // Deletes a specific Redis instance.  Instance stops serving and data is
    // deleted.
    virtual ::grpc::Status DeleteInstance(::grpc::ServerContext* context, const ::google::cloud::redis::v1beta1::DeleteInstanceRequest* request, ::google::longrunning::Operation* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListInstances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListInstances() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListInstances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInstances(::grpc::ServerContext* context, const ::google::cloud::redis::v1beta1::ListInstancesRequest* request, ::google::cloud::redis::v1beta1::ListInstancesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListInstances(::grpc::ServerContext* context, ::google::cloud::redis::v1beta1::ListInstancesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::redis::v1beta1::ListInstancesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetInstance() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInstance(::grpc::ServerContext* context, const ::google::cloud::redis::v1beta1::GetInstanceRequest* request, ::google::cloud::redis::v1beta1::Instance* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInstance(::grpc::ServerContext* context, ::google::cloud::redis::v1beta1::GetInstanceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::redis::v1beta1::Instance>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateInstance() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInstance(::grpc::ServerContext* context, const ::google::cloud::redis::v1beta1::CreateInstanceRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateInstance(::grpc::ServerContext* context, ::google::cloud::redis::v1beta1::CreateInstanceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateInstance() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateInstance(::grpc::ServerContext* context, const ::google::cloud::redis::v1beta1::UpdateInstanceRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateInstance(::grpc::ServerContext* context, ::google::cloud::redis::v1beta1::UpdateInstanceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteInstance() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteInstance(::grpc::ServerContext* context, const ::google::cloud::redis::v1beta1::DeleteInstanceRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteInstance(::grpc::ServerContext* context, ::google::cloud::redis::v1beta1::DeleteInstanceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListInstances<WithAsyncMethod_GetInstance<WithAsyncMethod_CreateInstance<WithAsyncMethod_UpdateInstance<WithAsyncMethod_DeleteInstance<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ListInstances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListInstances() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListInstances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInstances(::grpc::ServerContext* context, const ::google::cloud::redis::v1beta1::ListInstancesRequest* request, ::google::cloud::redis::v1beta1::ListInstancesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetInstance() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInstance(::grpc::ServerContext* context, const ::google::cloud::redis::v1beta1::GetInstanceRequest* request, ::google::cloud::redis::v1beta1::Instance* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateInstance() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInstance(::grpc::ServerContext* context, const ::google::cloud::redis::v1beta1::CreateInstanceRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateInstance() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateInstance(::grpc::ServerContext* context, const ::google::cloud::redis::v1beta1::UpdateInstanceRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteInstance() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteInstance(::grpc::ServerContext* context, const ::google::cloud::redis::v1beta1::DeleteInstanceRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListInstances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListInstances() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::redis::v1beta1::ListInstancesRequest, ::google::cloud::redis::v1beta1::ListInstancesResponse>(std::bind(&WithStreamedUnaryMethod_ListInstances<BaseClass>::StreamedListInstances, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListInstances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListInstances(::grpc::ServerContext* context, const ::google::cloud::redis::v1beta1::ListInstancesRequest* request, ::google::cloud::redis::v1beta1::ListInstancesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListInstances(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::redis::v1beta1::ListInstancesRequest,::google::cloud::redis::v1beta1::ListInstancesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetInstance() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::redis::v1beta1::GetInstanceRequest, ::google::cloud::redis::v1beta1::Instance>(std::bind(&WithStreamedUnaryMethod_GetInstance<BaseClass>::StreamedGetInstance, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetInstance(::grpc::ServerContext* context, const ::google::cloud::redis::v1beta1::GetInstanceRequest* request, ::google::cloud::redis::v1beta1::Instance* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetInstance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::redis::v1beta1::GetInstanceRequest,::google::cloud::redis::v1beta1::Instance>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateInstance() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::redis::v1beta1::CreateInstanceRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_CreateInstance<BaseClass>::StreamedCreateInstance, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateInstance(::grpc::ServerContext* context, const ::google::cloud::redis::v1beta1::CreateInstanceRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateInstance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::redis::v1beta1::CreateInstanceRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateInstance() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::redis::v1beta1::UpdateInstanceRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_UpdateInstance<BaseClass>::StreamedUpdateInstance, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateInstance(::grpc::ServerContext* context, const ::google::cloud::redis::v1beta1::UpdateInstanceRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateInstance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::redis::v1beta1::UpdateInstanceRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteInstance() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::redis::v1beta1::DeleteInstanceRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_DeleteInstance<BaseClass>::StreamedDeleteInstance, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteInstance(::grpc::ServerContext* context, const ::google::cloud::redis::v1beta1::DeleteInstanceRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteInstance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::redis::v1beta1::DeleteInstanceRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListInstances<WithStreamedUnaryMethod_GetInstance<WithStreamedUnaryMethod_CreateInstance<WithStreamedUnaryMethod_UpdateInstance<WithStreamedUnaryMethod_DeleteInstance<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListInstances<WithStreamedUnaryMethod_GetInstance<WithStreamedUnaryMethod_CreateInstance<WithStreamedUnaryMethod_UpdateInstance<WithStreamedUnaryMethod_DeleteInstance<Service > > > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace redis
}  // namespace cloud
}  // namespace google


#endif  // GRPC_google_2fcloud_2fredis_2fv1beta1_2fcloud_5fredis_2eproto__INCLUDED
