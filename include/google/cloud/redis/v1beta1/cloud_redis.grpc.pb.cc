// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/cloud/redis/v1beta1/cloud_redis.proto

#include "google/cloud/redis/v1beta1/cloud_redis.pb.h"
#include "google/cloud/redis/v1beta1/cloud_redis.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace cloud {
namespace redis {
namespace v1beta1 {

static const char* CloudRedis_method_names[] = {
  "/google.cloud.redis.v1beta1.CloudRedis/ListInstances",
  "/google.cloud.redis.v1beta1.CloudRedis/GetInstance",
  "/google.cloud.redis.v1beta1.CloudRedis/CreateInstance",
  "/google.cloud.redis.v1beta1.CloudRedis/UpdateInstance",
  "/google.cloud.redis.v1beta1.CloudRedis/DeleteInstance",
};

std::unique_ptr< CloudRedis::Stub> CloudRedis::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CloudRedis::Stub> stub(new CloudRedis::Stub(channel));
  return stub;
}

CloudRedis::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListInstances_(CloudRedis_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetInstance_(CloudRedis_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateInstance_(CloudRedis_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateInstance_(CloudRedis_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteInstance_(CloudRedis_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CloudRedis::Stub::ListInstances(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::ListInstancesRequest& request, ::google::cloud::redis::v1beta1::ListInstancesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListInstances_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::redis::v1beta1::ListInstancesResponse>* CloudRedis::Stub::AsyncListInstancesRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::redis::v1beta1::ListInstancesResponse>::Create(channel_.get(), cq, rpcmethod_ListInstances_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::redis::v1beta1::ListInstancesResponse>* CloudRedis::Stub::PrepareAsyncListInstancesRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::redis::v1beta1::ListInstancesResponse>::Create(channel_.get(), cq, rpcmethod_ListInstances_, context, request, false);
}

::grpc::Status CloudRedis::Stub::GetInstance(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::GetInstanceRequest& request, ::google::cloud::redis::v1beta1::Instance* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetInstance_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::redis::v1beta1::Instance>* CloudRedis::Stub::AsyncGetInstanceRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::redis::v1beta1::Instance>::Create(channel_.get(), cq, rpcmethod_GetInstance_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::redis::v1beta1::Instance>* CloudRedis::Stub::PrepareAsyncGetInstanceRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::redis::v1beta1::Instance>::Create(channel_.get(), cq, rpcmethod_GetInstance_, context, request, false);
}

::grpc::Status CloudRedis::Stub::CreateInstance(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::CreateInstanceRequest& request, ::google::longrunning::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateInstance_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* CloudRedis::Stub::AsyncCreateInstanceRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::CreateInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_CreateInstance_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* CloudRedis::Stub::PrepareAsyncCreateInstanceRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::CreateInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_CreateInstance_, context, request, false);
}

::grpc::Status CloudRedis::Stub::UpdateInstance(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::UpdateInstanceRequest& request, ::google::longrunning::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateInstance_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* CloudRedis::Stub::AsyncUpdateInstanceRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::UpdateInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_UpdateInstance_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* CloudRedis::Stub::PrepareAsyncUpdateInstanceRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::UpdateInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_UpdateInstance_, context, request, false);
}

::grpc::Status CloudRedis::Stub::DeleteInstance(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::DeleteInstanceRequest& request, ::google::longrunning::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteInstance_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* CloudRedis::Stub::AsyncDeleteInstanceRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_DeleteInstance_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* CloudRedis::Stub::PrepareAsyncDeleteInstanceRaw(::grpc::ClientContext* context, const ::google::cloud::redis::v1beta1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_DeleteInstance_, context, request, false);
}

CloudRedis::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudRedis_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudRedis::Service, ::google::cloud::redis::v1beta1::ListInstancesRequest, ::google::cloud::redis::v1beta1::ListInstancesResponse>(
          std::mem_fn(&CloudRedis::Service::ListInstances), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudRedis_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudRedis::Service, ::google::cloud::redis::v1beta1::GetInstanceRequest, ::google::cloud::redis::v1beta1::Instance>(
          std::mem_fn(&CloudRedis::Service::GetInstance), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudRedis_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudRedis::Service, ::google::cloud::redis::v1beta1::CreateInstanceRequest, ::google::longrunning::Operation>(
          std::mem_fn(&CloudRedis::Service::CreateInstance), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudRedis_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudRedis::Service, ::google::cloud::redis::v1beta1::UpdateInstanceRequest, ::google::longrunning::Operation>(
          std::mem_fn(&CloudRedis::Service::UpdateInstance), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudRedis_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudRedis::Service, ::google::cloud::redis::v1beta1::DeleteInstanceRequest, ::google::longrunning::Operation>(
          std::mem_fn(&CloudRedis::Service::DeleteInstance), this)));
}

CloudRedis::Service::~Service() {
}

::grpc::Status CloudRedis::Service::ListInstances(::grpc::ServerContext* context, const ::google::cloud::redis::v1beta1::ListInstancesRequest* request, ::google::cloud::redis::v1beta1::ListInstancesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudRedis::Service::GetInstance(::grpc::ServerContext* context, const ::google::cloud::redis::v1beta1::GetInstanceRequest* request, ::google::cloud::redis::v1beta1::Instance* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudRedis::Service::CreateInstance(::grpc::ServerContext* context, const ::google::cloud::redis::v1beta1::CreateInstanceRequest* request, ::google::longrunning::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudRedis::Service::UpdateInstance(::grpc::ServerContext* context, const ::google::cloud::redis::v1beta1::UpdateInstanceRequest* request, ::google::longrunning::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudRedis::Service::DeleteInstance(::grpc::ServerContext* context, const ::google::cloud::redis::v1beta1::DeleteInstanceRequest* request, ::google::longrunning::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace cloud
}  // namespace redis
}  // namespace v1beta1

