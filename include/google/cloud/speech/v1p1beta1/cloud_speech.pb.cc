// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/speech/v1p1beta1/cloud_speech.proto

#include "google/cloud/speech/v1p1beta1/cloud_speech.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RecognitionAudio;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RecognitionMetadata;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SpeechContext;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SpeechRecognitionAlternative;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SpeechRecognitionResult;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StreamingRecognitionConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StreamingRecognitionResult;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_WordInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RecognitionConfig;
}  // namespace protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto
namespace protobuf_google_2fprotobuf_2fduration_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fduration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Duration;
}  // namespace protobuf_google_2fprotobuf_2fduration_2eproto
namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto
namespace protobuf_google_2frpc_2fstatus_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2frpc_2fstatus_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Status;
}  // namespace protobuf_google_2frpc_2fstatus_2eproto
namespace google {
namespace cloud {
namespace speech {
namespace v1p1beta1 {
class RecognizeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecognizeRequest>
      _instance;
} _RecognizeRequest_default_instance_;
class LongRunningRecognizeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LongRunningRecognizeRequest>
      _instance;
} _LongRunningRecognizeRequest_default_instance_;
class StreamingRecognizeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamingRecognizeRequest>
      _instance;
  const ::google::cloud::speech::v1p1beta1::StreamingRecognitionConfig* streaming_config_;
  ::google::protobuf::internal::ArenaStringPtr audio_content_;
} _StreamingRecognizeRequest_default_instance_;
class StreamingRecognitionConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamingRecognitionConfig>
      _instance;
} _StreamingRecognitionConfig_default_instance_;
class RecognitionConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecognitionConfig>
      _instance;
} _RecognitionConfig_default_instance_;
class RecognitionMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecognitionMetadata>
      _instance;
} _RecognitionMetadata_default_instance_;
class SpeechContextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeechContext>
      _instance;
} _SpeechContext_default_instance_;
class RecognitionAudioDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecognitionAudio>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
} _RecognitionAudio_default_instance_;
class RecognizeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecognizeResponse>
      _instance;
} _RecognizeResponse_default_instance_;
class LongRunningRecognizeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LongRunningRecognizeResponse>
      _instance;
} _LongRunningRecognizeResponse_default_instance_;
class LongRunningRecognizeMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LongRunningRecognizeMetadata>
      _instance;
} _LongRunningRecognizeMetadata_default_instance_;
class StreamingRecognizeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamingRecognizeResponse>
      _instance;
} _StreamingRecognizeResponse_default_instance_;
class StreamingRecognitionResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamingRecognitionResult>
      _instance;
} _StreamingRecognitionResult_default_instance_;
class SpeechRecognitionResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeechRecognitionResult>
      _instance;
} _SpeechRecognitionResult_default_instance_;
class SpeechRecognitionAlternativeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeechRecognitionAlternative>
      _instance;
} _SpeechRecognitionAlternative_default_instance_;
class WordInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WordInfo>
      _instance;
} _WordInfo_default_instance_;
}  // namespace v1p1beta1
}  // namespace speech
}  // namespace cloud
}  // namespace google
namespace protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto {
static void InitDefaultsRecognizeRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::speech::v1p1beta1::_RecognizeRequest_default_instance_;
    new (ptr) ::google::cloud::speech::v1p1beta1::RecognizeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1p1beta1::RecognizeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RecognizeRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRecognizeRequest}, {
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_RecognitionConfig.base,
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_RecognitionAudio.base,}};

static void InitDefaultsLongRunningRecognizeRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::speech::v1p1beta1::_LongRunningRecognizeRequest_default_instance_;
    new (ptr) ::google::cloud::speech::v1p1beta1::LongRunningRecognizeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1p1beta1::LongRunningRecognizeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LongRunningRecognizeRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLongRunningRecognizeRequest}, {
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_RecognitionConfig.base,
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_RecognitionAudio.base,}};

static void InitDefaultsStreamingRecognizeRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::speech::v1p1beta1::_StreamingRecognizeRequest_default_instance_;
    new (ptr) ::google::cloud::speech::v1p1beta1::StreamingRecognizeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1p1beta1::StreamingRecognizeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StreamingRecognizeRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStreamingRecognizeRequest}, {
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_StreamingRecognitionConfig.base,}};

static void InitDefaultsStreamingRecognitionConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::speech::v1p1beta1::_StreamingRecognitionConfig_default_instance_;
    new (ptr) ::google::cloud::speech::v1p1beta1::StreamingRecognitionConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1p1beta1::StreamingRecognitionConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StreamingRecognitionConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStreamingRecognitionConfig}, {
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_RecognitionConfig.base,}};

static void InitDefaultsRecognitionConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::speech::v1p1beta1::_RecognitionConfig_default_instance_;
    new (ptr) ::google::cloud::speech::v1p1beta1::RecognitionConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1p1beta1::RecognitionConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RecognitionConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRecognitionConfig}, {
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_SpeechContext.base,
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_RecognitionMetadata.base,}};

static void InitDefaultsRecognitionMetadata() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::speech::v1p1beta1::_RecognitionMetadata_default_instance_;
    new (ptr) ::google::cloud::speech::v1p1beta1::RecognitionMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1p1beta1::RecognitionMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RecognitionMetadata =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRecognitionMetadata}, {}};

static void InitDefaultsSpeechContext() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::speech::v1p1beta1::_SpeechContext_default_instance_;
    new (ptr) ::google::cloud::speech::v1p1beta1::SpeechContext();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1p1beta1::SpeechContext::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SpeechContext =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSpeechContext}, {}};

static void InitDefaultsRecognitionAudio() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::speech::v1p1beta1::_RecognitionAudio_default_instance_;
    new (ptr) ::google::cloud::speech::v1p1beta1::RecognitionAudio();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1p1beta1::RecognitionAudio::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RecognitionAudio =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRecognitionAudio}, {}};

static void InitDefaultsRecognizeResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::speech::v1p1beta1::_RecognizeResponse_default_instance_;
    new (ptr) ::google::cloud::speech::v1p1beta1::RecognizeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1p1beta1::RecognizeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RecognizeResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRecognizeResponse}, {
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_SpeechRecognitionResult.base,}};

static void InitDefaultsLongRunningRecognizeResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::speech::v1p1beta1::_LongRunningRecognizeResponse_default_instance_;
    new (ptr) ::google::cloud::speech::v1p1beta1::LongRunningRecognizeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1p1beta1::LongRunningRecognizeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LongRunningRecognizeResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLongRunningRecognizeResponse}, {
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_SpeechRecognitionResult.base,}};

static void InitDefaultsLongRunningRecognizeMetadata() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::speech::v1p1beta1::_LongRunningRecognizeMetadata_default_instance_;
    new (ptr) ::google::cloud::speech::v1p1beta1::LongRunningRecognizeMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1p1beta1::LongRunningRecognizeMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LongRunningRecognizeMetadata =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLongRunningRecognizeMetadata}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsStreamingRecognizeResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::speech::v1p1beta1::_StreamingRecognizeResponse_default_instance_;
    new (ptr) ::google::cloud::speech::v1p1beta1::StreamingRecognizeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1p1beta1::StreamingRecognizeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_StreamingRecognizeResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsStreamingRecognizeResponse}, {
      &protobuf_google_2frpc_2fstatus_2eproto::scc_info_Status.base,
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_StreamingRecognitionResult.base,}};

static void InitDefaultsStreamingRecognitionResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::speech::v1p1beta1::_StreamingRecognitionResult_default_instance_;
    new (ptr) ::google::cloud::speech::v1p1beta1::StreamingRecognitionResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1p1beta1::StreamingRecognitionResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StreamingRecognitionResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStreamingRecognitionResult}, {
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_SpeechRecognitionAlternative.base,}};

static void InitDefaultsSpeechRecognitionResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::speech::v1p1beta1::_SpeechRecognitionResult_default_instance_;
    new (ptr) ::google::cloud::speech::v1p1beta1::SpeechRecognitionResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1p1beta1::SpeechRecognitionResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SpeechRecognitionResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSpeechRecognitionResult}, {
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_SpeechRecognitionAlternative.base,}};

static void InitDefaultsSpeechRecognitionAlternative() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::speech::v1p1beta1::_SpeechRecognitionAlternative_default_instance_;
    new (ptr) ::google::cloud::speech::v1p1beta1::SpeechRecognitionAlternative();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1p1beta1::SpeechRecognitionAlternative::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SpeechRecognitionAlternative =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSpeechRecognitionAlternative}, {
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_WordInfo.base,}};

static void InitDefaultsWordInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::speech::v1p1beta1::_WordInfo_default_instance_;
    new (ptr) ::google::cloud::speech::v1p1beta1::WordInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1p1beta1::WordInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WordInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWordInfo}, {
      &protobuf_google_2fprotobuf_2fduration_2eproto::scc_info_Duration.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RecognizeRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LongRunningRecognizeRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StreamingRecognizeRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StreamingRecognitionConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RecognitionConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RecognitionMetadata.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpeechContext.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RecognitionAudio.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RecognizeResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LongRunningRecognizeResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LongRunningRecognizeMetadata.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StreamingRecognizeResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StreamingRecognitionResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpeechRecognitionResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpeechRecognitionAlternative.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WordInfo.base);
}

::google::protobuf::Metadata file_level_metadata[16];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognizeRequest, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognizeRequest, audio_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::LongRunningRecognizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::LongRunningRecognizeRequest, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::LongRunningRecognizeRequest, audio_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::StreamingRecognizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::StreamingRecognizeRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::cloud::speech::v1p1beta1::StreamingRecognizeRequestDefaultTypeInternal, streaming_config_),
  offsetof(::google::cloud::speech::v1p1beta1::StreamingRecognizeRequestDefaultTypeInternal, audio_content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::StreamingRecognizeRequest, streaming_request_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::StreamingRecognitionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::StreamingRecognitionConfig, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::StreamingRecognitionConfig, single_utterance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::StreamingRecognitionConfig, interim_results_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionConfig, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionConfig, sample_rate_hertz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionConfig, audio_channel_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionConfig, enable_separate_recognition_per_channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionConfig, language_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionConfig, alternative_language_codes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionConfig, max_alternatives_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionConfig, profanity_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionConfig, speech_contexts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionConfig, enable_word_time_offsets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionConfig, enable_word_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionConfig, enable_automatic_punctuation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionConfig, enable_speaker_diarization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionConfig, diarization_speaker_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionConfig, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionConfig, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionConfig, use_enhanced_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionMetadata, interaction_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionMetadata, industry_naics_code_of_audio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionMetadata, microphone_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionMetadata, original_media_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionMetadata, recording_device_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionMetadata, recording_device_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionMetadata, original_mime_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionMetadata, obfuscated_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionMetadata, audio_topic_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::SpeechContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::SpeechContext, phrases_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionAudio, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionAudio, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::cloud::speech::v1p1beta1::RecognitionAudioDefaultTypeInternal, content_),
  offsetof(::google::cloud::speech::v1p1beta1::RecognitionAudioDefaultTypeInternal, uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognitionAudio, audio_source_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::RecognizeResponse, results_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::LongRunningRecognizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::LongRunningRecognizeResponse, results_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::LongRunningRecognizeMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::LongRunningRecognizeMetadata, progress_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::LongRunningRecognizeMetadata, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::LongRunningRecognizeMetadata, last_update_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::StreamingRecognizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::StreamingRecognizeResponse, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::StreamingRecognizeResponse, results_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::StreamingRecognizeResponse, speech_event_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::StreamingRecognitionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::StreamingRecognitionResult, alternatives_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::StreamingRecognitionResult, is_final_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::StreamingRecognitionResult, stability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::StreamingRecognitionResult, channel_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::StreamingRecognitionResult, language_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::SpeechRecognitionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::SpeechRecognitionResult, alternatives_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::SpeechRecognitionResult, channel_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::SpeechRecognitionResult, language_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::SpeechRecognitionAlternative, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::SpeechRecognitionAlternative, transcript_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::SpeechRecognitionAlternative, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::SpeechRecognitionAlternative, words_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::WordInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::WordInfo, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::WordInfo, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::WordInfo, word_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::WordInfo, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1p1beta1::WordInfo, speaker_tag_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::cloud::speech::v1p1beta1::RecognizeRequest)},
  { 7, -1, sizeof(::google::cloud::speech::v1p1beta1::LongRunningRecognizeRequest)},
  { 14, -1, sizeof(::google::cloud::speech::v1p1beta1::StreamingRecognizeRequest)},
  { 22, -1, sizeof(::google::cloud::speech::v1p1beta1::StreamingRecognitionConfig)},
  { 30, -1, sizeof(::google::cloud::speech::v1p1beta1::RecognitionConfig)},
  { 52, -1, sizeof(::google::cloud::speech::v1p1beta1::RecognitionMetadata)},
  { 66, -1, sizeof(::google::cloud::speech::v1p1beta1::SpeechContext)},
  { 72, -1, sizeof(::google::cloud::speech::v1p1beta1::RecognitionAudio)},
  { 80, -1, sizeof(::google::cloud::speech::v1p1beta1::RecognizeResponse)},
  { 86, -1, sizeof(::google::cloud::speech::v1p1beta1::LongRunningRecognizeResponse)},
  { 92, -1, sizeof(::google::cloud::speech::v1p1beta1::LongRunningRecognizeMetadata)},
  { 100, -1, sizeof(::google::cloud::speech::v1p1beta1::StreamingRecognizeResponse)},
  { 108, -1, sizeof(::google::cloud::speech::v1p1beta1::StreamingRecognitionResult)},
  { 118, -1, sizeof(::google::cloud::speech::v1p1beta1::SpeechRecognitionResult)},
  { 126, -1, sizeof(::google::cloud::speech::v1p1beta1::SpeechRecognitionAlternative)},
  { 134, -1, sizeof(::google::cloud::speech::v1p1beta1::WordInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1p1beta1::_RecognizeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1p1beta1::_LongRunningRecognizeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1p1beta1::_StreamingRecognizeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1p1beta1::_StreamingRecognitionConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1p1beta1::_RecognitionConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1p1beta1::_RecognitionMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1p1beta1::_SpeechContext_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1p1beta1::_RecognitionAudio_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1p1beta1::_RecognizeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1p1beta1::_LongRunningRecognizeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1p1beta1::_LongRunningRecognizeMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1p1beta1::_StreamingRecognizeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1p1beta1::_StreamingRecognitionResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1p1beta1::_SpeechRecognitionResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1p1beta1::_SpeechRecognitionAlternative_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1p1beta1::_WordInfo_default_instance_),
};

static void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "google/cloud/speech/v1p1beta1/cloud_speech.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

static void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 16);
}

static void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n0google/cloud/speech/v1p1beta1/cloud_sp"
      "eech.proto\022\035google.cloud.speech.v1p1beta"
      "1\032\034google/api/annotations.proto\032#google/"
      "longrunning/operations.proto\032\031google/pro"
      "tobuf/any.proto\032\036google/protobuf/duratio"
      "n.proto\032\037google/protobuf/timestamp.proto"
      "\032\027google/rpc/status.proto\"\224\001\n\020RecognizeR"
      "equest\022@\n\006config\030\001 \001(\01320.google.cloud.sp"
      "eech.v1p1beta1.RecognitionConfig\022>\n\005audi"
      "o\030\002 \001(\0132/.google.cloud.speech.v1p1beta1."
      "RecognitionAudio\"\237\001\n\033LongRunningRecogniz"
      "eRequest\022@\n\006config\030\001 \001(\01320.google.cloud."
      "speech.v1p1beta1.RecognitionConfig\022>\n\005au"
      "dio\030\002 \001(\0132/.google.cloud.speech.v1p1beta"
      "1.RecognitionAudio\"\240\001\n\031StreamingRecogniz"
      "eRequest\022U\n\020streaming_config\030\001 \001(\01329.goo"
      "gle.cloud.speech.v1p1beta1.StreamingReco"
      "gnitionConfigH\000\022\027\n\raudio_content\030\002 \001(\014H\000"
      "B\023\n\021streaming_request\"\221\001\n\032StreamingRecog"
      "nitionConfig\022@\n\006config\030\001 \001(\01320.google.cl"
      "oud.speech.v1p1beta1.RecognitionConfig\022\030"
      "\n\020single_utterance\030\002 \001(\010\022\027\n\017interim_resu"
      "lts\030\003 \001(\010\"\254\006\n\021RecognitionConfig\022P\n\010encod"
      "ing\030\001 \001(\0162>.google.cloud.speech.v1p1beta"
      "1.RecognitionConfig.AudioEncoding\022\031\n\021sam"
      "ple_rate_hertz\030\002 \001(\005\022\033\n\023audio_channel_co"
      "unt\030\007 \001(\005\022/\n\'enable_separate_recognition"
      "_per_channel\030\014 \001(\010\022\025\n\rlanguage_code\030\003 \001("
      "\t\022\"\n\032alternative_language_codes\030\022 \003(\t\022\030\n"
      "\020max_alternatives\030\004 \001(\005\022\030\n\020profanity_fil"
      "ter\030\005 \001(\010\022E\n\017speech_contexts\030\006 \003(\0132,.goo"
      "gle.cloud.speech.v1p1beta1.SpeechContext"
      "\022 \n\030enable_word_time_offsets\030\010 \001(\010\022\036\n\026en"
      "able_word_confidence\030\017 \001(\010\022$\n\034enable_aut"
      "omatic_punctuation\030\013 \001(\010\022\"\n\032enable_speak"
      "er_diarization\030\020 \001(\010\022!\n\031diarization_spea"
      "ker_count\030\021 \001(\005\022D\n\010metadata\030\t \001(\01322.goog"
      "le.cloud.speech.v1p1beta1.RecognitionMet"
      "adata\022\r\n\005model\030\r \001(\t\022\024\n\014use_enhanced\030\016 \001"
      "(\010\"\213\001\n\rAudioEncoding\022\030\n\024ENCODING_UNSPECI"
      "FIED\020\000\022\014\n\010LINEAR16\020\001\022\010\n\004FLAC\020\002\022\t\n\005MULAW\020"
      "\003\022\007\n\003AMR\020\004\022\n\n\006AMR_WB\020\005\022\014\n\010OGG_OPUS\020\006\022\032\n\026"
      "SPEEX_WITH_HEADER_BYTE\020\007\"\323\010\n\023Recognition"
      "Metadata\022\\\n\020interaction_type\030\001 \001(\0162B.goo"
      "gle.cloud.speech.v1p1beta1.RecognitionMe"
      "tadata.InteractionType\022$\n\034industry_naics"
      "_code_of_audio\030\003 \001(\r\022b\n\023microphone_dista"
      "nce\030\004 \001(\0162E.google.cloud.speech.v1p1beta"
      "1.RecognitionMetadata.MicrophoneDistance"
      "\022a\n\023original_media_type\030\005 \001(\0162D.google.c"
      "loud.speech.v1p1beta1.RecognitionMetadat"
      "a.OriginalMediaType\022e\n\025recording_device_"
      "type\030\006 \001(\0162F.google.cloud.speech.v1p1bet"
      "a1.RecognitionMetadata.RecordingDeviceTy"
      "pe\022\035\n\025recording_device_name\030\007 \001(\t\022\032\n\022ori"
      "ginal_mime_type\030\010 \001(\t\022\025\n\robfuscated_id\030\t"
      " \001(\003\022\023\n\013audio_topic\030\n \001(\t\"\305\001\n\017Interactio"
      "nType\022 \n\034INTERACTION_TYPE_UNSPECIFIED\020\000\022"
      "\016\n\nDISCUSSION\020\001\022\020\n\014PRESENTATION\020\002\022\016\n\nPHO"
      "NE_CALL\020\003\022\r\n\tVOICEMAIL\020\004\022\033\n\027PROFESSIONAL"
      "LY_PRODUCED\020\005\022\020\n\014VOICE_SEARCH\020\006\022\021\n\rVOICE"
      "_COMMAND\020\007\022\r\n\tDICTATION\020\010\"d\n\022MicrophoneD"
      "istance\022#\n\037MICROPHONE_DISTANCE_UNSPECIFI"
      "ED\020\000\022\r\n\tNEARFIELD\020\001\022\014\n\010MIDFIELD\020\002\022\014\n\010FAR"
      "FIELD\020\003\"N\n\021OriginalMediaType\022#\n\037ORIGINAL"
      "_MEDIA_TYPE_UNSPECIFIED\020\000\022\t\n\005AUDIO\020\001\022\t\n\005"
      "VIDEO\020\002\"\244\001\n\023RecordingDeviceType\022%\n!RECOR"
      "DING_DEVICE_TYPE_UNSPECIFIED\020\000\022\016\n\nSMARTP"
      "HONE\020\001\022\006\n\002PC\020\002\022\016\n\nPHONE_LINE\020\003\022\013\n\007VEHICL"
      "E\020\004\022\030\n\024OTHER_OUTDOOR_DEVICE\020\005\022\027\n\023OTHER_I"
      "NDOOR_DEVICE\020\006\" \n\rSpeechContext\022\017\n\007phras"
      "es\030\001 \003(\t\"D\n\020RecognitionAudio\022\021\n\007content\030"
      "\001 \001(\014H\000\022\r\n\003uri\030\002 \001(\tH\000B\016\n\014audio_source\"\\"
      "\n\021RecognizeResponse\022G\n\007results\030\002 \003(\01326.g"
      "oogle.cloud.speech.v1p1beta1.SpeechRecog"
      "nitionResult\"g\n\034LongRunningRecognizeResp"
      "onse\022G\n\007results\030\002 \003(\01326.google.cloud.spe"
      "ech.v1p1beta1.SpeechRecognitionResult\"\236\001"
      "\n\034LongRunningRecognizeMetadata\022\030\n\020progre"
      "ss_percent\030\001 \001(\005\022.\n\nstart_time\030\002 \001(\0132\032.g"
      "oogle.protobuf.Timestamp\0224\n\020last_update_"
      "time\030\003 \001(\0132\032.google.protobuf.Timestamp\"\277"
      "\002\n\032StreamingRecognizeResponse\022!\n\005error\030\001"
      " \001(\0132\022.google.rpc.Status\022J\n\007results\030\002 \003("
      "\01329.google.cloud.speech.v1p1beta1.Stream"
      "ingRecognitionResult\022d\n\021speech_event_typ"
      "e\030\004 \001(\0162I.google.cloud.speech.v1p1beta1."
      "StreamingRecognizeResponse.SpeechEventTy"
      "pe\"L\n\017SpeechEventType\022\034\n\030SPEECH_EVENT_UN"
      "SPECIFIED\020\000\022\033\n\027END_OF_SINGLE_UTTERANCE\020\001"
      "\"\300\001\n\032StreamingRecognitionResult\022Q\n\014alter"
      "natives\030\001 \003(\0132;.google.cloud.speech.v1p1"
      "beta1.SpeechRecognitionAlternative\022\020\n\010is"
      "_final\030\002 \001(\010\022\021\n\tstability\030\003 \001(\002\022\023\n\013chann"
      "el_tag\030\005 \001(\005\022\025\n\rlanguage_code\030\006 \001(\t\"\230\001\n\027"
      "SpeechRecognitionResult\022Q\n\014alternatives\030"
      "\001 \003(\0132;.google.cloud.speech.v1p1beta1.Sp"
      "eechRecognitionAlternative\022\023\n\013channel_ta"
      "g\030\002 \001(\005\022\025\n\rlanguage_code\030\005 \001(\t\"~\n\034Speech"
      "RecognitionAlternative\022\022\n\ntranscript\030\001 \001"
      "(\t\022\022\n\nconfidence\030\002 \001(\002\0226\n\005words\030\003 \003(\0132\'."
      "google.cloud.speech.v1p1beta1.WordInfo\"\235"
      "\001\n\010WordInfo\022-\n\nstart_time\030\001 \001(\0132\031.google"
      ".protobuf.Duration\022+\n\010end_time\030\002 \001(\0132\031.g"
      "oogle.protobuf.Duration\022\014\n\004word\030\003 \001(\t\022\022\n"
      "\nconfidence\030\004 \001(\002\022\023\n\013speaker_tag\030\005 \001(\0052\330"
      "\003\n\006Speech\022\226\001\n\tRecognize\022/.google.cloud.s"
      "peech.v1p1beta1.RecognizeRequest\0320.googl"
      "e.cloud.speech.v1p1beta1.RecognizeRespon"
      "se\"&\202\323\344\223\002 \"\033/v1p1beta1/speech:recognize:"
      "\001*\022\244\001\n\024LongRunningRecognize\022:.google.clo"
      "ud.speech.v1p1beta1.LongRunningRecognize"
      "Request\032\035.google.longrunning.Operation\"1"
      "\202\323\344\223\002+\"&/v1p1beta1/speech:longrunningrec"
      "ognize:\001*\022\215\001\n\022StreamingRecognize\0228.googl"
      "e.cloud.speech.v1p1beta1.StreamingRecogn"
      "izeRequest\0329.google.cloud.speech.v1p1bet"
      "a1.StreamingRecognizeResponse(\0010\001Bz\n!com"
      ".google.cloud.speech.v1p1beta1B\013SpeechPr"
      "otoP\001ZCgoogle.golang.org/genproto/google"
      "apis/cloud/speech/v1p1beta1;speech\370\001\001b\006p"
      "roto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4845);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/cloud/speech/v1p1beta1/cloud_speech.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::protobuf_google_2flongrunning_2foperations_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fany_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::protobuf_google_2frpc_2fstatus_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto
namespace google {
namespace cloud {
namespace speech {
namespace v1p1beta1 {
const ::google::protobuf::EnumDescriptor* RecognitionConfig_AudioEncoding_descriptor() {
  protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_enum_descriptors[0];
}
bool RecognitionConfig_AudioEncoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RecognitionConfig_AudioEncoding RecognitionConfig::ENCODING_UNSPECIFIED;
const RecognitionConfig_AudioEncoding RecognitionConfig::LINEAR16;
const RecognitionConfig_AudioEncoding RecognitionConfig::FLAC;
const RecognitionConfig_AudioEncoding RecognitionConfig::MULAW;
const RecognitionConfig_AudioEncoding RecognitionConfig::AMR;
const RecognitionConfig_AudioEncoding RecognitionConfig::AMR_WB;
const RecognitionConfig_AudioEncoding RecognitionConfig::OGG_OPUS;
const RecognitionConfig_AudioEncoding RecognitionConfig::SPEEX_WITH_HEADER_BYTE;
const RecognitionConfig_AudioEncoding RecognitionConfig::AudioEncoding_MIN;
const RecognitionConfig_AudioEncoding RecognitionConfig::AudioEncoding_MAX;
const int RecognitionConfig::AudioEncoding_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RecognitionMetadata_InteractionType_descriptor() {
  protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_enum_descriptors[1];
}
bool RecognitionMetadata_InteractionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RecognitionMetadata_InteractionType RecognitionMetadata::INTERACTION_TYPE_UNSPECIFIED;
const RecognitionMetadata_InteractionType RecognitionMetadata::DISCUSSION;
const RecognitionMetadata_InteractionType RecognitionMetadata::PRESENTATION;
const RecognitionMetadata_InteractionType RecognitionMetadata::PHONE_CALL;
const RecognitionMetadata_InteractionType RecognitionMetadata::VOICEMAIL;
const RecognitionMetadata_InteractionType RecognitionMetadata::PROFESSIONALLY_PRODUCED;
const RecognitionMetadata_InteractionType RecognitionMetadata::VOICE_SEARCH;
const RecognitionMetadata_InteractionType RecognitionMetadata::VOICE_COMMAND;
const RecognitionMetadata_InteractionType RecognitionMetadata::DICTATION;
const RecognitionMetadata_InteractionType RecognitionMetadata::InteractionType_MIN;
const RecognitionMetadata_InteractionType RecognitionMetadata::InteractionType_MAX;
const int RecognitionMetadata::InteractionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RecognitionMetadata_MicrophoneDistance_descriptor() {
  protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_enum_descriptors[2];
}
bool RecognitionMetadata_MicrophoneDistance_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RecognitionMetadata_MicrophoneDistance RecognitionMetadata::MICROPHONE_DISTANCE_UNSPECIFIED;
const RecognitionMetadata_MicrophoneDistance RecognitionMetadata::NEARFIELD;
const RecognitionMetadata_MicrophoneDistance RecognitionMetadata::MIDFIELD;
const RecognitionMetadata_MicrophoneDistance RecognitionMetadata::FARFIELD;
const RecognitionMetadata_MicrophoneDistance RecognitionMetadata::MicrophoneDistance_MIN;
const RecognitionMetadata_MicrophoneDistance RecognitionMetadata::MicrophoneDistance_MAX;
const int RecognitionMetadata::MicrophoneDistance_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RecognitionMetadata_OriginalMediaType_descriptor() {
  protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_enum_descriptors[3];
}
bool RecognitionMetadata_OriginalMediaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RecognitionMetadata_OriginalMediaType RecognitionMetadata::ORIGINAL_MEDIA_TYPE_UNSPECIFIED;
const RecognitionMetadata_OriginalMediaType RecognitionMetadata::AUDIO;
const RecognitionMetadata_OriginalMediaType RecognitionMetadata::VIDEO;
const RecognitionMetadata_OriginalMediaType RecognitionMetadata::OriginalMediaType_MIN;
const RecognitionMetadata_OriginalMediaType RecognitionMetadata::OriginalMediaType_MAX;
const int RecognitionMetadata::OriginalMediaType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RecognitionMetadata_RecordingDeviceType_descriptor() {
  protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_enum_descriptors[4];
}
bool RecognitionMetadata_RecordingDeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RecognitionMetadata_RecordingDeviceType RecognitionMetadata::RECORDING_DEVICE_TYPE_UNSPECIFIED;
const RecognitionMetadata_RecordingDeviceType RecognitionMetadata::SMARTPHONE;
const RecognitionMetadata_RecordingDeviceType RecognitionMetadata::PC;
const RecognitionMetadata_RecordingDeviceType RecognitionMetadata::PHONE_LINE;
const RecognitionMetadata_RecordingDeviceType RecognitionMetadata::VEHICLE;
const RecognitionMetadata_RecordingDeviceType RecognitionMetadata::OTHER_OUTDOOR_DEVICE;
const RecognitionMetadata_RecordingDeviceType RecognitionMetadata::OTHER_INDOOR_DEVICE;
const RecognitionMetadata_RecordingDeviceType RecognitionMetadata::RecordingDeviceType_MIN;
const RecognitionMetadata_RecordingDeviceType RecognitionMetadata::RecordingDeviceType_MAX;
const int RecognitionMetadata::RecordingDeviceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StreamingRecognizeResponse_SpeechEventType_descriptor() {
  protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_enum_descriptors[5];
}
bool StreamingRecognizeResponse_SpeechEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::SPEECH_EVENT_UNSPECIFIED;
const StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::END_OF_SINGLE_UTTERANCE;
const StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::SpeechEventType_MIN;
const StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::SpeechEventType_MAX;
const int StreamingRecognizeResponse::SpeechEventType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void RecognizeRequest::InitAsDefaultInstance() {
  ::google::cloud::speech::v1p1beta1::_RecognizeRequest_default_instance_._instance.get_mutable()->config_ = const_cast< ::google::cloud::speech::v1p1beta1::RecognitionConfig*>(
      ::google::cloud::speech::v1p1beta1::RecognitionConfig::internal_default_instance());
  ::google::cloud::speech::v1p1beta1::_RecognizeRequest_default_instance_._instance.get_mutable()->audio_ = const_cast< ::google::cloud::speech::v1p1beta1::RecognitionAudio*>(
      ::google::cloud::speech::v1p1beta1::RecognitionAudio::internal_default_instance());
}
void RecognizeRequest::unsafe_arena_set_allocated_config(
    ::google::cloud::speech::v1p1beta1::RecognitionConfig* config) {
  if (GetArenaNoVirtual() == NULL) {
    delete config_;
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1p1beta1.RecognizeRequest.config)
}
void RecognizeRequest::unsafe_arena_set_allocated_audio(
    ::google::cloud::speech::v1p1beta1::RecognitionAudio* audio) {
  if (GetArenaNoVirtual() == NULL) {
    delete audio_;
  }
  audio_ = audio;
  if (audio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1p1beta1.RecognizeRequest.audio)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognizeRequest::kConfigFieldNumber;
const int RecognizeRequest::kAudioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognizeRequest::RecognizeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_RecognizeRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1p1beta1.RecognizeRequest)
}
RecognizeRequest::RecognizeRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_RecognizeRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1p1beta1.RecognizeRequest)
}
RecognizeRequest::RecognizeRequest(const RecognizeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::google::cloud::speech::v1p1beta1::RecognitionConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_audio()) {
    audio_ = new ::google::cloud::speech::v1p1beta1::RecognitionAudio(*from.audio_);
  } else {
    audio_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1p1beta1.RecognizeRequest)
}

void RecognizeRequest::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_) -
      reinterpret_cast<char*>(&config_)) + sizeof(audio_));
}

RecognizeRequest::~RecognizeRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1p1beta1.RecognizeRequest)
  SharedDtor();
}

void RecognizeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete audio_;
}

void RecognizeRequest::ArenaDtor(void* object) {
  RecognizeRequest* _this = reinterpret_cast< RecognizeRequest* >(object);
  (void)_this;
}
void RecognizeRequest::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void RecognizeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RecognizeRequest::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecognizeRequest& RecognizeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_RecognizeRequest.base);
  return *internal_default_instance();
}


void RecognizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1p1beta1.RecognizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && audio_ != NULL) {
    delete audio_;
  }
  audio_ = NULL;
  _internal_metadata_.Clear();
}

bool RecognizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1p1beta1.RecognizeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.speech.v1p1beta1.RecognitionConfig config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.speech.v1p1beta1.RecognitionAudio audio = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_audio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1p1beta1.RecognizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1p1beta1.RecognizeRequest)
  return false;
#undef DO_
}

void RecognizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1p1beta1.RecognizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1p1beta1.RecognitionConfig config = 1;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_config(), output);
  }

  // .google.cloud.speech.v1p1beta1.RecognitionAudio audio = 2;
  if (this->has_audio()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_audio(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1p1beta1.RecognizeRequest)
}

::google::protobuf::uint8* RecognizeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1p1beta1.RecognizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1p1beta1.RecognitionConfig config = 1;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_config(), deterministic, target);
  }

  // .google.cloud.speech.v1p1beta1.RecognitionAudio audio = 2;
  if (this->has_audio()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_audio(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1p1beta1.RecognizeRequest)
  return target;
}

size_t RecognizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1p1beta1.RecognizeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.cloud.speech.v1p1beta1.RecognitionConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .google.cloud.speech.v1p1beta1.RecognitionAudio audio = 2;
  if (this->has_audio()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *audio_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecognizeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1p1beta1.RecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognizeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognizeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1p1beta1.RecognizeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1p1beta1.RecognizeRequest)
    MergeFrom(*source);
  }
}

void RecognizeRequest::MergeFrom(const RecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1p1beta1.RecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::google::cloud::speech::v1p1beta1::RecognitionConfig::MergeFrom(from.config());
  }
  if (from.has_audio()) {
    mutable_audio()->::google::cloud::speech::v1p1beta1::RecognitionAudio::MergeFrom(from.audio());
  }
}

void RecognizeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1p1beta1.RecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizeRequest::CopyFrom(const RecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1p1beta1.RecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeRequest::IsInitialized() const {
  return true;
}

void RecognizeRequest::Swap(RecognizeRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RecognizeRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RecognizeRequest::UnsafeArenaSwap(RecognizeRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RecognizeRequest::InternalSwap(RecognizeRequest* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(audio_, other->audio_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RecognizeRequest::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LongRunningRecognizeRequest::InitAsDefaultInstance() {
  ::google::cloud::speech::v1p1beta1::_LongRunningRecognizeRequest_default_instance_._instance.get_mutable()->config_ = const_cast< ::google::cloud::speech::v1p1beta1::RecognitionConfig*>(
      ::google::cloud::speech::v1p1beta1::RecognitionConfig::internal_default_instance());
  ::google::cloud::speech::v1p1beta1::_LongRunningRecognizeRequest_default_instance_._instance.get_mutable()->audio_ = const_cast< ::google::cloud::speech::v1p1beta1::RecognitionAudio*>(
      ::google::cloud::speech::v1p1beta1::RecognitionAudio::internal_default_instance());
}
void LongRunningRecognizeRequest::unsafe_arena_set_allocated_config(
    ::google::cloud::speech::v1p1beta1::RecognitionConfig* config) {
  if (GetArenaNoVirtual() == NULL) {
    delete config_;
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1p1beta1.LongRunningRecognizeRequest.config)
}
void LongRunningRecognizeRequest::unsafe_arena_set_allocated_audio(
    ::google::cloud::speech::v1p1beta1::RecognitionAudio* audio) {
  if (GetArenaNoVirtual() == NULL) {
    delete audio_;
  }
  audio_ = audio;
  if (audio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1p1beta1.LongRunningRecognizeRequest.audio)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LongRunningRecognizeRequest::kConfigFieldNumber;
const int LongRunningRecognizeRequest::kAudioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LongRunningRecognizeRequest::LongRunningRecognizeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_LongRunningRecognizeRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1p1beta1.LongRunningRecognizeRequest)
}
LongRunningRecognizeRequest::LongRunningRecognizeRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_LongRunningRecognizeRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1p1beta1.LongRunningRecognizeRequest)
}
LongRunningRecognizeRequest::LongRunningRecognizeRequest(const LongRunningRecognizeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::google::cloud::speech::v1p1beta1::RecognitionConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_audio()) {
    audio_ = new ::google::cloud::speech::v1p1beta1::RecognitionAudio(*from.audio_);
  } else {
    audio_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1p1beta1.LongRunningRecognizeRequest)
}

void LongRunningRecognizeRequest::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_) -
      reinterpret_cast<char*>(&config_)) + sizeof(audio_));
}

LongRunningRecognizeRequest::~LongRunningRecognizeRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1p1beta1.LongRunningRecognizeRequest)
  SharedDtor();
}

void LongRunningRecognizeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete audio_;
}

void LongRunningRecognizeRequest::ArenaDtor(void* object) {
  LongRunningRecognizeRequest* _this = reinterpret_cast< LongRunningRecognizeRequest* >(object);
  (void)_this;
}
void LongRunningRecognizeRequest::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void LongRunningRecognizeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LongRunningRecognizeRequest::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LongRunningRecognizeRequest& LongRunningRecognizeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_LongRunningRecognizeRequest.base);
  return *internal_default_instance();
}


void LongRunningRecognizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1p1beta1.LongRunningRecognizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && audio_ != NULL) {
    delete audio_;
  }
  audio_ = NULL;
  _internal_metadata_.Clear();
}

bool LongRunningRecognizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1p1beta1.LongRunningRecognizeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.speech.v1p1beta1.RecognitionConfig config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.speech.v1p1beta1.RecognitionAudio audio = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_audio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1p1beta1.LongRunningRecognizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1p1beta1.LongRunningRecognizeRequest)
  return false;
#undef DO_
}

void LongRunningRecognizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1p1beta1.LongRunningRecognizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1p1beta1.RecognitionConfig config = 1;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_config(), output);
  }

  // .google.cloud.speech.v1p1beta1.RecognitionAudio audio = 2;
  if (this->has_audio()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_audio(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1p1beta1.LongRunningRecognizeRequest)
}

::google::protobuf::uint8* LongRunningRecognizeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1p1beta1.LongRunningRecognizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1p1beta1.RecognitionConfig config = 1;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_config(), deterministic, target);
  }

  // .google.cloud.speech.v1p1beta1.RecognitionAudio audio = 2;
  if (this->has_audio()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_audio(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1p1beta1.LongRunningRecognizeRequest)
  return target;
}

size_t LongRunningRecognizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1p1beta1.LongRunningRecognizeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.cloud.speech.v1p1beta1.RecognitionConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .google.cloud.speech.v1p1beta1.RecognitionAudio audio = 2;
  if (this->has_audio()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *audio_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LongRunningRecognizeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1p1beta1.LongRunningRecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LongRunningRecognizeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LongRunningRecognizeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1p1beta1.LongRunningRecognizeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1p1beta1.LongRunningRecognizeRequest)
    MergeFrom(*source);
  }
}

void LongRunningRecognizeRequest::MergeFrom(const LongRunningRecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1p1beta1.LongRunningRecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::google::cloud::speech::v1p1beta1::RecognitionConfig::MergeFrom(from.config());
  }
  if (from.has_audio()) {
    mutable_audio()->::google::cloud::speech::v1p1beta1::RecognitionAudio::MergeFrom(from.audio());
  }
}

void LongRunningRecognizeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1p1beta1.LongRunningRecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LongRunningRecognizeRequest::CopyFrom(const LongRunningRecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1p1beta1.LongRunningRecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongRunningRecognizeRequest::IsInitialized() const {
  return true;
}

void LongRunningRecognizeRequest::Swap(LongRunningRecognizeRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LongRunningRecognizeRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LongRunningRecognizeRequest::UnsafeArenaSwap(LongRunningRecognizeRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LongRunningRecognizeRequest::InternalSwap(LongRunningRecognizeRequest* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(audio_, other->audio_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LongRunningRecognizeRequest::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StreamingRecognizeRequest::InitAsDefaultInstance() {
  ::google::cloud::speech::v1p1beta1::_StreamingRecognizeRequest_default_instance_.streaming_config_ = const_cast< ::google::cloud::speech::v1p1beta1::StreamingRecognitionConfig*>(
      ::google::cloud::speech::v1p1beta1::StreamingRecognitionConfig::internal_default_instance());
  ::google::cloud::speech::v1p1beta1::_StreamingRecognizeRequest_default_instance_.audio_content_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StreamingRecognizeRequest::set_allocated_streaming_config(::google::cloud::speech::v1p1beta1::StreamingRecognitionConfig* streaming_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_streaming_request();
  if (streaming_config) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(streaming_config);
    if (message_arena != submessage_arena) {
      streaming_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, streaming_config, submessage_arena);
    }
    set_has_streaming_config();
    streaming_request_.streaming_config_ = streaming_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1p1beta1.StreamingRecognizeRequest.streaming_config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingRecognizeRequest::kStreamingConfigFieldNumber;
const int StreamingRecognizeRequest::kAudioContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingRecognizeRequest::StreamingRecognizeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_StreamingRecognizeRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1p1beta1.StreamingRecognizeRequest)
}
StreamingRecognizeRequest::StreamingRecognizeRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_StreamingRecognizeRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1p1beta1.StreamingRecognizeRequest)
}
StreamingRecognizeRequest::StreamingRecognizeRequest(const StreamingRecognizeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_streaming_request();
  switch (from.streaming_request_case()) {
    case kStreamingConfig: {
      mutable_streaming_config()->::google::cloud::speech::v1p1beta1::StreamingRecognitionConfig::MergeFrom(from.streaming_config());
      break;
    }
    case kAudioContent: {
      set_audio_content(from.audio_content());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1p1beta1.StreamingRecognizeRequest)
}

void StreamingRecognizeRequest::SharedCtor() {
  clear_has_streaming_request();
}

StreamingRecognizeRequest::~StreamingRecognizeRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1p1beta1.StreamingRecognizeRequest)
  SharedDtor();
}

void StreamingRecognizeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (has_streaming_request()) {
    clear_streaming_request();
  }
}

void StreamingRecognizeRequest::ArenaDtor(void* object) {
  StreamingRecognizeRequest* _this = reinterpret_cast< StreamingRecognizeRequest* >(object);
  (void)_this;
}
void StreamingRecognizeRequest::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void StreamingRecognizeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StreamingRecognizeRequest::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamingRecognizeRequest& StreamingRecognizeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_StreamingRecognizeRequest.base);
  return *internal_default_instance();
}


void StreamingRecognizeRequest::clear_streaming_request() {
// @@protoc_insertion_point(one_of_clear_start:google.cloud.speech.v1p1beta1.StreamingRecognizeRequest)
  switch (streaming_request_case()) {
    case kStreamingConfig: {
      if (GetArenaNoVirtual() == NULL) {
        delete streaming_request_.streaming_config_;
      }
      break;
    }
    case kAudioContent: {
      streaming_request_.audio_content_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}


void StreamingRecognizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1p1beta1.StreamingRecognizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_streaming_request();
  _internal_metadata_.Clear();
}

bool StreamingRecognizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1p1beta1.StreamingRecognizeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.speech.v1p1beta1.StreamingRecognitionConfig streaming_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_streaming_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes audio_content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_audio_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1p1beta1.StreamingRecognizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1p1beta1.StreamingRecognizeRequest)
  return false;
#undef DO_
}

void StreamingRecognizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1p1beta1.StreamingRecognizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1p1beta1.StreamingRecognitionConfig streaming_config = 1;
  if (has_streaming_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_streaming_config(), output);
  }

  // bytes audio_content = 2;
  if (has_audio_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->audio_content(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1p1beta1.StreamingRecognizeRequest)
}

::google::protobuf::uint8* StreamingRecognizeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1p1beta1.StreamingRecognizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1p1beta1.StreamingRecognitionConfig streaming_config = 1;
  if (has_streaming_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_streaming_config(), deterministic, target);
  }

  // bytes audio_content = 2;
  if (has_audio_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->audio_content(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1p1beta1.StreamingRecognizeRequest)
  return target;
}

size_t StreamingRecognizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1p1beta1.StreamingRecognizeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (streaming_request_case()) {
    // .google.cloud.speech.v1p1beta1.StreamingRecognitionConfig streaming_config = 1;
    case kStreamingConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *streaming_request_.streaming_config_);
      break;
    }
    // bytes audio_content = 2;
    case kAudioContent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->audio_content());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingRecognizeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1p1beta1.StreamingRecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingRecognizeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamingRecognizeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1p1beta1.StreamingRecognizeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1p1beta1.StreamingRecognizeRequest)
    MergeFrom(*source);
  }
}

void StreamingRecognizeRequest::MergeFrom(const StreamingRecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1p1beta1.StreamingRecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.streaming_request_case()) {
    case kStreamingConfig: {
      mutable_streaming_config()->::google::cloud::speech::v1p1beta1::StreamingRecognitionConfig::MergeFrom(from.streaming_config());
      break;
    }
    case kAudioContent: {
      set_audio_content(from.audio_content());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
}

void StreamingRecognizeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1p1beta1.StreamingRecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingRecognizeRequest::CopyFrom(const StreamingRecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1p1beta1.StreamingRecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingRecognizeRequest::IsInitialized() const {
  return true;
}

void StreamingRecognizeRequest::Swap(StreamingRecognizeRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamingRecognizeRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamingRecognizeRequest::UnsafeArenaSwap(StreamingRecognizeRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamingRecognizeRequest::InternalSwap(StreamingRecognizeRequest* other) {
  using std::swap;
  swap(streaming_request_, other->streaming_request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StreamingRecognizeRequest::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StreamingRecognitionConfig::InitAsDefaultInstance() {
  ::google::cloud::speech::v1p1beta1::_StreamingRecognitionConfig_default_instance_._instance.get_mutable()->config_ = const_cast< ::google::cloud::speech::v1p1beta1::RecognitionConfig*>(
      ::google::cloud::speech::v1p1beta1::RecognitionConfig::internal_default_instance());
}
void StreamingRecognitionConfig::unsafe_arena_set_allocated_config(
    ::google::cloud::speech::v1p1beta1::RecognitionConfig* config) {
  if (GetArenaNoVirtual() == NULL) {
    delete config_;
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1p1beta1.StreamingRecognitionConfig.config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingRecognitionConfig::kConfigFieldNumber;
const int StreamingRecognitionConfig::kSingleUtteranceFieldNumber;
const int StreamingRecognitionConfig::kInterimResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingRecognitionConfig::StreamingRecognitionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_StreamingRecognitionConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1p1beta1.StreamingRecognitionConfig)
}
StreamingRecognitionConfig::StreamingRecognitionConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_StreamingRecognitionConfig.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1p1beta1.StreamingRecognitionConfig)
}
StreamingRecognitionConfig::StreamingRecognitionConfig(const StreamingRecognitionConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::google::cloud::speech::v1p1beta1::RecognitionConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  ::memcpy(&single_utterance_, &from.single_utterance_,
    static_cast<size_t>(reinterpret_cast<char*>(&interim_results_) -
    reinterpret_cast<char*>(&single_utterance_)) + sizeof(interim_results_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1p1beta1.StreamingRecognitionConfig)
}

void StreamingRecognitionConfig::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interim_results_) -
      reinterpret_cast<char*>(&config_)) + sizeof(interim_results_));
}

StreamingRecognitionConfig::~StreamingRecognitionConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1p1beta1.StreamingRecognitionConfig)
  SharedDtor();
}

void StreamingRecognitionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete config_;
}

void StreamingRecognitionConfig::ArenaDtor(void* object) {
  StreamingRecognitionConfig* _this = reinterpret_cast< StreamingRecognitionConfig* >(object);
  (void)_this;
}
void StreamingRecognitionConfig::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void StreamingRecognitionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StreamingRecognitionConfig::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamingRecognitionConfig& StreamingRecognitionConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_StreamingRecognitionConfig.base);
  return *internal_default_instance();
}


void StreamingRecognitionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1p1beta1.StreamingRecognitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  ::memset(&single_utterance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interim_results_) -
      reinterpret_cast<char*>(&single_utterance_)) + sizeof(interim_results_));
  _internal_metadata_.Clear();
}

bool StreamingRecognitionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1p1beta1.StreamingRecognitionConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.speech.v1p1beta1.RecognitionConfig config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool single_utterance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &single_utterance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool interim_results = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &interim_results_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1p1beta1.StreamingRecognitionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1p1beta1.StreamingRecognitionConfig)
  return false;
#undef DO_
}

void StreamingRecognitionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1p1beta1.StreamingRecognitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1p1beta1.RecognitionConfig config = 1;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_config(), output);
  }

  // bool single_utterance = 2;
  if (this->single_utterance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->single_utterance(), output);
  }

  // bool interim_results = 3;
  if (this->interim_results() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->interim_results(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1p1beta1.StreamingRecognitionConfig)
}

::google::protobuf::uint8* StreamingRecognitionConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1p1beta1.StreamingRecognitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1p1beta1.RecognitionConfig config = 1;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_config(), deterministic, target);
  }

  // bool single_utterance = 2;
  if (this->single_utterance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->single_utterance(), target);
  }

  // bool interim_results = 3;
  if (this->interim_results() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->interim_results(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1p1beta1.StreamingRecognitionConfig)
  return target;
}

size_t StreamingRecognitionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1p1beta1.StreamingRecognitionConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.cloud.speech.v1p1beta1.RecognitionConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // bool single_utterance = 2;
  if (this->single_utterance() != 0) {
    total_size += 1 + 1;
  }

  // bool interim_results = 3;
  if (this->interim_results() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingRecognitionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1p1beta1.StreamingRecognitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingRecognitionConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamingRecognitionConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1p1beta1.StreamingRecognitionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1p1beta1.StreamingRecognitionConfig)
    MergeFrom(*source);
  }
}

void StreamingRecognitionConfig::MergeFrom(const StreamingRecognitionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1p1beta1.StreamingRecognitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::google::cloud::speech::v1p1beta1::RecognitionConfig::MergeFrom(from.config());
  }
  if (from.single_utterance() != 0) {
    set_single_utterance(from.single_utterance());
  }
  if (from.interim_results() != 0) {
    set_interim_results(from.interim_results());
  }
}

void StreamingRecognitionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1p1beta1.StreamingRecognitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingRecognitionConfig::CopyFrom(const StreamingRecognitionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1p1beta1.StreamingRecognitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingRecognitionConfig::IsInitialized() const {
  return true;
}

void StreamingRecognitionConfig::Swap(StreamingRecognitionConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamingRecognitionConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamingRecognitionConfig::UnsafeArenaSwap(StreamingRecognitionConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamingRecognitionConfig::InternalSwap(StreamingRecognitionConfig* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(single_utterance_, other->single_utterance_);
  swap(interim_results_, other->interim_results_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StreamingRecognitionConfig::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RecognitionConfig::InitAsDefaultInstance() {
  ::google::cloud::speech::v1p1beta1::_RecognitionConfig_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::google::cloud::speech::v1p1beta1::RecognitionMetadata*>(
      ::google::cloud::speech::v1p1beta1::RecognitionMetadata::internal_default_instance());
}
void RecognitionConfig::unsafe_arena_set_allocated_metadata(
    ::google::cloud::speech::v1p1beta1::RecognitionMetadata* metadata) {
  if (GetArenaNoVirtual() == NULL) {
    delete metadata_;
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1p1beta1.RecognitionConfig.metadata)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognitionConfig::kEncodingFieldNumber;
const int RecognitionConfig::kSampleRateHertzFieldNumber;
const int RecognitionConfig::kAudioChannelCountFieldNumber;
const int RecognitionConfig::kEnableSeparateRecognitionPerChannelFieldNumber;
const int RecognitionConfig::kLanguageCodeFieldNumber;
const int RecognitionConfig::kAlternativeLanguageCodesFieldNumber;
const int RecognitionConfig::kMaxAlternativesFieldNumber;
const int RecognitionConfig::kProfanityFilterFieldNumber;
const int RecognitionConfig::kSpeechContextsFieldNumber;
const int RecognitionConfig::kEnableWordTimeOffsetsFieldNumber;
const int RecognitionConfig::kEnableWordConfidenceFieldNumber;
const int RecognitionConfig::kEnableAutomaticPunctuationFieldNumber;
const int RecognitionConfig::kEnableSpeakerDiarizationFieldNumber;
const int RecognitionConfig::kDiarizationSpeakerCountFieldNumber;
const int RecognitionConfig::kMetadataFieldNumber;
const int RecognitionConfig::kModelFieldNumber;
const int RecognitionConfig::kUseEnhancedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognitionConfig::RecognitionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_RecognitionConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1p1beta1.RecognitionConfig)
}
RecognitionConfig::RecognitionConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  speech_contexts_(arena),
  alternative_language_codes_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_RecognitionConfig.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1p1beta1.RecognitionConfig)
}
RecognitionConfig::RecognitionConfig(const RecognitionConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      speech_contexts_(from.speech_contexts_),
      alternative_language_codes_(from.alternative_language_codes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.language_code().size() > 0) {
    language_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code(),
      GetArenaNoVirtual());
  }
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model().size() > 0) {
    model_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model(),
      GetArenaNoVirtual());
  }
  if (from.has_metadata()) {
    metadata_ = new ::google::cloud::speech::v1p1beta1::RecognitionMetadata(*from.metadata_);
  } else {
    metadata_ = NULL;
  }
  ::memcpy(&encoding_, &from.encoding_,
    static_cast<size_t>(reinterpret_cast<char*>(&diarization_speaker_count_) -
    reinterpret_cast<char*>(&encoding_)) + sizeof(diarization_speaker_count_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1p1beta1.RecognitionConfig)
}

void RecognitionConfig::SharedCtor() {
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&diarization_speaker_count_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(diarization_speaker_count_));
}

RecognitionConfig::~RecognitionConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1p1beta1.RecognitionConfig)
  SharedDtor();
}

void RecognitionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
}

void RecognitionConfig::ArenaDtor(void* object) {
  RecognitionConfig* _this = reinterpret_cast< RecognitionConfig* >(object);
  (void)_this;
}
void RecognitionConfig::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void RecognitionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RecognitionConfig::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecognitionConfig& RecognitionConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_RecognitionConfig.base);
  return *internal_default_instance();
}


void RecognitionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1p1beta1.RecognitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  speech_contexts_.Clear();
  alternative_language_codes_.Clear();
  language_code_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  model_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) {
    delete metadata_;
  }
  metadata_ = NULL;
  ::memset(&encoding_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&diarization_speaker_count_) -
      reinterpret_cast<char*>(&encoding_)) + sizeof(diarization_speaker_count_));
  _internal_metadata_.Clear();
}

bool RecognitionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1p1beta1.RecognitionConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.speech.v1p1beta1.RecognitionConfig.AudioEncoding encoding = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding(static_cast< ::google::cloud::speech::v1p1beta1::RecognitionConfig_AudioEncoding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sample_rate_hertz = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_rate_hertz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string language_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language_code().data(), static_cast<int>(this->language_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.speech.v1p1beta1.RecognitionConfig.language_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_alternatives = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_alternatives_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool profanity_filter = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &profanity_filter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.speech.v1p1beta1.SpeechContext speech_contexts = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_speech_contexts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 audio_channel_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audio_channel_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_word_time_offsets = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_word_time_offsets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.speech.v1p1beta1.RecognitionMetadata metadata = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_automatic_punctuation = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_automatic_punctuation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_separate_recognition_per_channel = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_separate_recognition_per_channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), static_cast<int>(this->model().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.speech.v1p1beta1.RecognitionConfig.model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_enhanced = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_enhanced_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_word_confidence = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_word_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_speaker_diarization = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_speaker_diarization_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 diarization_speaker_count = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diarization_speaker_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string alternative_language_codes = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_alternative_language_codes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alternative_language_codes(this->alternative_language_codes_size() - 1).data(),
            static_cast<int>(this->alternative_language_codes(this->alternative_language_codes_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.speech.v1p1beta1.RecognitionConfig.alternative_language_codes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1p1beta1.RecognitionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1p1beta1.RecognitionConfig)
  return false;
#undef DO_
}

void RecognitionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1p1beta1.RecognitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1p1beta1.RecognitionConfig.AudioEncoding encoding = 1;
  if (this->encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->encoding(), output);
  }

  // int32 sample_rate_hertz = 2;
  if (this->sample_rate_hertz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sample_rate_hertz(), output);
  }

  // string language_code = 3;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1p1beta1.RecognitionConfig.language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->language_code(), output);
  }

  // int32 max_alternatives = 4;
  if (this->max_alternatives() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_alternatives(), output);
  }

  // bool profanity_filter = 5;
  if (this->profanity_filter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->profanity_filter(), output);
  }

  // repeated .google.cloud.speech.v1p1beta1.SpeechContext speech_contexts = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->speech_contexts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->speech_contexts(static_cast<int>(i)),
      output);
  }

  // int32 audio_channel_count = 7;
  if (this->audio_channel_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->audio_channel_count(), output);
  }

  // bool enable_word_time_offsets = 8;
  if (this->enable_word_time_offsets() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->enable_word_time_offsets(), output);
  }

  // .google.cloud.speech.v1p1beta1.RecognitionMetadata metadata = 9;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_metadata(), output);
  }

  // bool enable_automatic_punctuation = 11;
  if (this->enable_automatic_punctuation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->enable_automatic_punctuation(), output);
  }

  // bool enable_separate_recognition_per_channel = 12;
  if (this->enable_separate_recognition_per_channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->enable_separate_recognition_per_channel(), output);
  }

  // string model = 13;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1p1beta1.RecognitionConfig.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->model(), output);
  }

  // bool use_enhanced = 14;
  if (this->use_enhanced() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->use_enhanced(), output);
  }

  // bool enable_word_confidence = 15;
  if (this->enable_word_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->enable_word_confidence(), output);
  }

  // bool enable_speaker_diarization = 16;
  if (this->enable_speaker_diarization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->enable_speaker_diarization(), output);
  }

  // int32 diarization_speaker_count = 17;
  if (this->diarization_speaker_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->diarization_speaker_count(), output);
  }

  // repeated string alternative_language_codes = 18;
  for (int i = 0, n = this->alternative_language_codes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alternative_language_codes(i).data(), static_cast<int>(this->alternative_language_codes(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1p1beta1.RecognitionConfig.alternative_language_codes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->alternative_language_codes(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1p1beta1.RecognitionConfig)
}

::google::protobuf::uint8* RecognitionConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1p1beta1.RecognitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1p1beta1.RecognitionConfig.AudioEncoding encoding = 1;
  if (this->encoding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->encoding(), target);
  }

  // int32 sample_rate_hertz = 2;
  if (this->sample_rate_hertz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sample_rate_hertz(), target);
  }

  // string language_code = 3;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1p1beta1.RecognitionConfig.language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->language_code(), target);
  }

  // int32 max_alternatives = 4;
  if (this->max_alternatives() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_alternatives(), target);
  }

  // bool profanity_filter = 5;
  if (this->profanity_filter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->profanity_filter(), target);
  }

  // repeated .google.cloud.speech.v1p1beta1.SpeechContext speech_contexts = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->speech_contexts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->speech_contexts(static_cast<int>(i)), deterministic, target);
  }

  // int32 audio_channel_count = 7;
  if (this->audio_channel_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->audio_channel_count(), target);
  }

  // bool enable_word_time_offsets = 8;
  if (this->enable_word_time_offsets() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->enable_word_time_offsets(), target);
  }

  // .google.cloud.speech.v1p1beta1.RecognitionMetadata metadata = 9;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_metadata(), deterministic, target);
  }

  // bool enable_automatic_punctuation = 11;
  if (this->enable_automatic_punctuation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->enable_automatic_punctuation(), target);
  }

  // bool enable_separate_recognition_per_channel = 12;
  if (this->enable_separate_recognition_per_channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->enable_separate_recognition_per_channel(), target);
  }

  // string model = 13;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1p1beta1.RecognitionConfig.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->model(), target);
  }

  // bool use_enhanced = 14;
  if (this->use_enhanced() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->use_enhanced(), target);
  }

  // bool enable_word_confidence = 15;
  if (this->enable_word_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->enable_word_confidence(), target);
  }

  // bool enable_speaker_diarization = 16;
  if (this->enable_speaker_diarization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->enable_speaker_diarization(), target);
  }

  // int32 diarization_speaker_count = 17;
  if (this->diarization_speaker_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->diarization_speaker_count(), target);
  }

  // repeated string alternative_language_codes = 18;
  for (int i = 0, n = this->alternative_language_codes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alternative_language_codes(i).data(), static_cast<int>(this->alternative_language_codes(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1p1beta1.RecognitionConfig.alternative_language_codes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(18, this->alternative_language_codes(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1p1beta1.RecognitionConfig)
  return target;
}

size_t RecognitionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1p1beta1.RecognitionConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.speech.v1p1beta1.SpeechContext speech_contexts = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->speech_contexts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->speech_contexts(static_cast<int>(i)));
    }
  }

  // repeated string alternative_language_codes = 18;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->alternative_language_codes_size());
  for (int i = 0, n = this->alternative_language_codes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->alternative_language_codes(i));
  }

  // string language_code = 3;
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language_code());
  }

  // string model = 13;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  // .google.cloud.speech.v1p1beta1.RecognitionMetadata metadata = 9;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .google.cloud.speech.v1p1beta1.RecognitionConfig.AudioEncoding encoding = 1;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
  }

  // int32 sample_rate_hertz = 2;
  if (this->sample_rate_hertz() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sample_rate_hertz());
  }

  // int32 max_alternatives = 4;
  if (this->max_alternatives() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_alternatives());
  }

  // int32 audio_channel_count = 7;
  if (this->audio_channel_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->audio_channel_count());
  }

  // bool enable_separate_recognition_per_channel = 12;
  if (this->enable_separate_recognition_per_channel() != 0) {
    total_size += 1 + 1;
  }

  // bool profanity_filter = 5;
  if (this->profanity_filter() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_word_time_offsets = 8;
  if (this->enable_word_time_offsets() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_word_confidence = 15;
  if (this->enable_word_confidence() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_automatic_punctuation = 11;
  if (this->enable_automatic_punctuation() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_speaker_diarization = 16;
  if (this->enable_speaker_diarization() != 0) {
    total_size += 2 + 1;
  }

  // bool use_enhanced = 14;
  if (this->use_enhanced() != 0) {
    total_size += 1 + 1;
  }

  // int32 diarization_speaker_count = 17;
  if (this->diarization_speaker_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->diarization_speaker_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecognitionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1p1beta1.RecognitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognitionConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognitionConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1p1beta1.RecognitionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1p1beta1.RecognitionConfig)
    MergeFrom(*source);
  }
}

void RecognitionConfig::MergeFrom(const RecognitionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1p1beta1.RecognitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  speech_contexts_.MergeFrom(from.speech_contexts_);
  alternative_language_codes_.MergeFrom(from.alternative_language_codes_);
  if (from.language_code().size() > 0) {
    set_language_code(from.language_code());
  }
  if (from.model().size() > 0) {
    set_model(from.model());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::google::cloud::speech::v1p1beta1::RecognitionMetadata::MergeFrom(from.metadata());
  }
  if (from.encoding() != 0) {
    set_encoding(from.encoding());
  }
  if (from.sample_rate_hertz() != 0) {
    set_sample_rate_hertz(from.sample_rate_hertz());
  }
  if (from.max_alternatives() != 0) {
    set_max_alternatives(from.max_alternatives());
  }
  if (from.audio_channel_count() != 0) {
    set_audio_channel_count(from.audio_channel_count());
  }
  if (from.enable_separate_recognition_per_channel() != 0) {
    set_enable_separate_recognition_per_channel(from.enable_separate_recognition_per_channel());
  }
  if (from.profanity_filter() != 0) {
    set_profanity_filter(from.profanity_filter());
  }
  if (from.enable_word_time_offsets() != 0) {
    set_enable_word_time_offsets(from.enable_word_time_offsets());
  }
  if (from.enable_word_confidence() != 0) {
    set_enable_word_confidence(from.enable_word_confidence());
  }
  if (from.enable_automatic_punctuation() != 0) {
    set_enable_automatic_punctuation(from.enable_automatic_punctuation());
  }
  if (from.enable_speaker_diarization() != 0) {
    set_enable_speaker_diarization(from.enable_speaker_diarization());
  }
  if (from.use_enhanced() != 0) {
    set_use_enhanced(from.use_enhanced());
  }
  if (from.diarization_speaker_count() != 0) {
    set_diarization_speaker_count(from.diarization_speaker_count());
  }
}

void RecognitionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1p1beta1.RecognitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognitionConfig::CopyFrom(const RecognitionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1p1beta1.RecognitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognitionConfig::IsInitialized() const {
  return true;
}

void RecognitionConfig::Swap(RecognitionConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RecognitionConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RecognitionConfig::UnsafeArenaSwap(RecognitionConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RecognitionConfig::InternalSwap(RecognitionConfig* other) {
  using std::swap;
  CastToBase(&speech_contexts_)->InternalSwap(CastToBase(&other->speech_contexts_));
  alternative_language_codes_.InternalSwap(CastToBase(&other->alternative_language_codes_));
  language_code_.Swap(&other->language_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_.Swap(&other->model_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(metadata_, other->metadata_);
  swap(encoding_, other->encoding_);
  swap(sample_rate_hertz_, other->sample_rate_hertz_);
  swap(max_alternatives_, other->max_alternatives_);
  swap(audio_channel_count_, other->audio_channel_count_);
  swap(enable_separate_recognition_per_channel_, other->enable_separate_recognition_per_channel_);
  swap(profanity_filter_, other->profanity_filter_);
  swap(enable_word_time_offsets_, other->enable_word_time_offsets_);
  swap(enable_word_confidence_, other->enable_word_confidence_);
  swap(enable_automatic_punctuation_, other->enable_automatic_punctuation_);
  swap(enable_speaker_diarization_, other->enable_speaker_diarization_);
  swap(use_enhanced_, other->use_enhanced_);
  swap(diarization_speaker_count_, other->diarization_speaker_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RecognitionConfig::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RecognitionMetadata::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognitionMetadata::kInteractionTypeFieldNumber;
const int RecognitionMetadata::kIndustryNaicsCodeOfAudioFieldNumber;
const int RecognitionMetadata::kMicrophoneDistanceFieldNumber;
const int RecognitionMetadata::kOriginalMediaTypeFieldNumber;
const int RecognitionMetadata::kRecordingDeviceTypeFieldNumber;
const int RecognitionMetadata::kRecordingDeviceNameFieldNumber;
const int RecognitionMetadata::kOriginalMimeTypeFieldNumber;
const int RecognitionMetadata::kObfuscatedIdFieldNumber;
const int RecognitionMetadata::kAudioTopicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognitionMetadata::RecognitionMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_RecognitionMetadata.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1p1beta1.RecognitionMetadata)
}
RecognitionMetadata::RecognitionMetadata(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_RecognitionMetadata.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1p1beta1.RecognitionMetadata)
}
RecognitionMetadata::RecognitionMetadata(const RecognitionMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  recording_device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.recording_device_name().size() > 0) {
    recording_device_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recording_device_name(),
      GetArenaNoVirtual());
  }
  original_mime_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.original_mime_type().size() > 0) {
    original_mime_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_mime_type(),
      GetArenaNoVirtual());
  }
  audio_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.audio_topic().size() > 0) {
    audio_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_topic(),
      GetArenaNoVirtual());
  }
  ::memcpy(&interaction_type_, &from.interaction_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&recording_device_type_) -
    reinterpret_cast<char*>(&interaction_type_)) + sizeof(recording_device_type_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1p1beta1.RecognitionMetadata)
}

void RecognitionMetadata::SharedCtor() {
  recording_device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_mime_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audio_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&interaction_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recording_device_type_) -
      reinterpret_cast<char*>(&interaction_type_)) + sizeof(recording_device_type_));
}

RecognitionMetadata::~RecognitionMetadata() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1p1beta1.RecognitionMetadata)
  SharedDtor();
}

void RecognitionMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  recording_device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_mime_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audio_topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RecognitionMetadata::ArenaDtor(void* object) {
  RecognitionMetadata* _this = reinterpret_cast< RecognitionMetadata* >(object);
  (void)_this;
}
void RecognitionMetadata::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void RecognitionMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RecognitionMetadata::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecognitionMetadata& RecognitionMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_RecognitionMetadata.base);
  return *internal_default_instance();
}


void RecognitionMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1p1beta1.RecognitionMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recording_device_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  original_mime_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  audio_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&interaction_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recording_device_type_) -
      reinterpret_cast<char*>(&interaction_type_)) + sizeof(recording_device_type_));
  _internal_metadata_.Clear();
}

bool RecognitionMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1p1beta1.RecognitionMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.speech.v1p1beta1.RecognitionMetadata.InteractionType interaction_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_interaction_type(static_cast< ::google::cloud::speech::v1p1beta1::RecognitionMetadata_InteractionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 industry_naics_code_of_audio = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &industry_naics_code_of_audio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.speech.v1p1beta1.RecognitionMetadata.MicrophoneDistance microphone_distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_microphone_distance(static_cast< ::google::cloud::speech::v1p1beta1::RecognitionMetadata_MicrophoneDistance >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.speech.v1p1beta1.RecognitionMetadata.OriginalMediaType original_media_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_original_media_type(static_cast< ::google::cloud::speech::v1p1beta1::RecognitionMetadata_OriginalMediaType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.speech.v1p1beta1.RecognitionMetadata.RecordingDeviceType recording_device_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_recording_device_type(static_cast< ::google::cloud::speech::v1p1beta1::RecognitionMetadata_RecordingDeviceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string recording_device_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recording_device_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->recording_device_name().data(), static_cast<int>(this->recording_device_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.speech.v1p1beta1.RecognitionMetadata.recording_device_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string original_mime_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_original_mime_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->original_mime_type().data(), static_cast<int>(this->original_mime_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.speech.v1p1beta1.RecognitionMetadata.original_mime_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 obfuscated_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &obfuscated_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string audio_topic = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audio_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->audio_topic().data(), static_cast<int>(this->audio_topic().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.speech.v1p1beta1.RecognitionMetadata.audio_topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1p1beta1.RecognitionMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1p1beta1.RecognitionMetadata)
  return false;
#undef DO_
}

void RecognitionMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1p1beta1.RecognitionMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1p1beta1.RecognitionMetadata.InteractionType interaction_type = 1;
  if (this->interaction_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->interaction_type(), output);
  }

  // uint32 industry_naics_code_of_audio = 3;
  if (this->industry_naics_code_of_audio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->industry_naics_code_of_audio(), output);
  }

  // .google.cloud.speech.v1p1beta1.RecognitionMetadata.MicrophoneDistance microphone_distance = 4;
  if (this->microphone_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->microphone_distance(), output);
  }

  // .google.cloud.speech.v1p1beta1.RecognitionMetadata.OriginalMediaType original_media_type = 5;
  if (this->original_media_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->original_media_type(), output);
  }

  // .google.cloud.speech.v1p1beta1.RecognitionMetadata.RecordingDeviceType recording_device_type = 6;
  if (this->recording_device_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->recording_device_type(), output);
  }

  // string recording_device_name = 7;
  if (this->recording_device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recording_device_name().data(), static_cast<int>(this->recording_device_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1p1beta1.RecognitionMetadata.recording_device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->recording_device_name(), output);
  }

  // string original_mime_type = 8;
  if (this->original_mime_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->original_mime_type().data(), static_cast<int>(this->original_mime_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1p1beta1.RecognitionMetadata.original_mime_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->original_mime_type(), output);
  }

  // int64 obfuscated_id = 9;
  if (this->obfuscated_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->obfuscated_id(), output);
  }

  // string audio_topic = 10;
  if (this->audio_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->audio_topic().data(), static_cast<int>(this->audio_topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1p1beta1.RecognitionMetadata.audio_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->audio_topic(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1p1beta1.RecognitionMetadata)
}

::google::protobuf::uint8* RecognitionMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1p1beta1.RecognitionMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1p1beta1.RecognitionMetadata.InteractionType interaction_type = 1;
  if (this->interaction_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->interaction_type(), target);
  }

  // uint32 industry_naics_code_of_audio = 3;
  if (this->industry_naics_code_of_audio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->industry_naics_code_of_audio(), target);
  }

  // .google.cloud.speech.v1p1beta1.RecognitionMetadata.MicrophoneDistance microphone_distance = 4;
  if (this->microphone_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->microphone_distance(), target);
  }

  // .google.cloud.speech.v1p1beta1.RecognitionMetadata.OriginalMediaType original_media_type = 5;
  if (this->original_media_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->original_media_type(), target);
  }

  // .google.cloud.speech.v1p1beta1.RecognitionMetadata.RecordingDeviceType recording_device_type = 6;
  if (this->recording_device_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->recording_device_type(), target);
  }

  // string recording_device_name = 7;
  if (this->recording_device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recording_device_name().data(), static_cast<int>(this->recording_device_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1p1beta1.RecognitionMetadata.recording_device_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->recording_device_name(), target);
  }

  // string original_mime_type = 8;
  if (this->original_mime_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->original_mime_type().data(), static_cast<int>(this->original_mime_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1p1beta1.RecognitionMetadata.original_mime_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->original_mime_type(), target);
  }

  // int64 obfuscated_id = 9;
  if (this->obfuscated_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->obfuscated_id(), target);
  }

  // string audio_topic = 10;
  if (this->audio_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->audio_topic().data(), static_cast<int>(this->audio_topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1p1beta1.RecognitionMetadata.audio_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->audio_topic(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1p1beta1.RecognitionMetadata)
  return target;
}

size_t RecognitionMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1p1beta1.RecognitionMetadata)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string recording_device_name = 7;
  if (this->recording_device_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->recording_device_name());
  }

  // string original_mime_type = 8;
  if (this->original_mime_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->original_mime_type());
  }

  // string audio_topic = 10;
  if (this->audio_topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->audio_topic());
  }

  // .google.cloud.speech.v1p1beta1.RecognitionMetadata.InteractionType interaction_type = 1;
  if (this->interaction_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->interaction_type());
  }

  // uint32 industry_naics_code_of_audio = 3;
  if (this->industry_naics_code_of_audio() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->industry_naics_code_of_audio());
  }

  // .google.cloud.speech.v1p1beta1.RecognitionMetadata.MicrophoneDistance microphone_distance = 4;
  if (this->microphone_distance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->microphone_distance());
  }

  // .google.cloud.speech.v1p1beta1.RecognitionMetadata.OriginalMediaType original_media_type = 5;
  if (this->original_media_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->original_media_type());
  }

  // int64 obfuscated_id = 9;
  if (this->obfuscated_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->obfuscated_id());
  }

  // .google.cloud.speech.v1p1beta1.RecognitionMetadata.RecordingDeviceType recording_device_type = 6;
  if (this->recording_device_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->recording_device_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecognitionMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1p1beta1.RecognitionMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognitionMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognitionMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1p1beta1.RecognitionMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1p1beta1.RecognitionMetadata)
    MergeFrom(*source);
  }
}

void RecognitionMetadata::MergeFrom(const RecognitionMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1p1beta1.RecognitionMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.recording_device_name().size() > 0) {
    set_recording_device_name(from.recording_device_name());
  }
  if (from.original_mime_type().size() > 0) {
    set_original_mime_type(from.original_mime_type());
  }
  if (from.audio_topic().size() > 0) {
    set_audio_topic(from.audio_topic());
  }
  if (from.interaction_type() != 0) {
    set_interaction_type(from.interaction_type());
  }
  if (from.industry_naics_code_of_audio() != 0) {
    set_industry_naics_code_of_audio(from.industry_naics_code_of_audio());
  }
  if (from.microphone_distance() != 0) {
    set_microphone_distance(from.microphone_distance());
  }
  if (from.original_media_type() != 0) {
    set_original_media_type(from.original_media_type());
  }
  if (from.obfuscated_id() != 0) {
    set_obfuscated_id(from.obfuscated_id());
  }
  if (from.recording_device_type() != 0) {
    set_recording_device_type(from.recording_device_type());
  }
}

void RecognitionMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1p1beta1.RecognitionMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognitionMetadata::CopyFrom(const RecognitionMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1p1beta1.RecognitionMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognitionMetadata::IsInitialized() const {
  return true;
}

void RecognitionMetadata::Swap(RecognitionMetadata* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RecognitionMetadata* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RecognitionMetadata::UnsafeArenaSwap(RecognitionMetadata* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RecognitionMetadata::InternalSwap(RecognitionMetadata* other) {
  using std::swap;
  recording_device_name_.Swap(&other->recording_device_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  original_mime_type_.Swap(&other->original_mime_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  audio_topic_.Swap(&other->audio_topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(interaction_type_, other->interaction_type_);
  swap(industry_naics_code_of_audio_, other->industry_naics_code_of_audio_);
  swap(microphone_distance_, other->microphone_distance_);
  swap(original_media_type_, other->original_media_type_);
  swap(obfuscated_id_, other->obfuscated_id_);
  swap(recording_device_type_, other->recording_device_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RecognitionMetadata::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpeechContext::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeechContext::kPhrasesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeechContext::SpeechContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_SpeechContext.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1p1beta1.SpeechContext)
}
SpeechContext::SpeechContext(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  phrases_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_SpeechContext.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1p1beta1.SpeechContext)
}
SpeechContext::SpeechContext(const SpeechContext& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      phrases_(from.phrases_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1p1beta1.SpeechContext)
}

void SpeechContext::SharedCtor() {
}

SpeechContext::~SpeechContext() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1p1beta1.SpeechContext)
  SharedDtor();
}

void SpeechContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void SpeechContext::ArenaDtor(void* object) {
  SpeechContext* _this = reinterpret_cast< SpeechContext* >(object);
  (void)_this;
}
void SpeechContext::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void SpeechContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpeechContext::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeechContext& SpeechContext::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_SpeechContext.base);
  return *internal_default_instance();
}


void SpeechContext::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1p1beta1.SpeechContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phrases_.Clear();
  _internal_metadata_.Clear();
}

bool SpeechContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1p1beta1.SpeechContext)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string phrases = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_phrases()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phrases(this->phrases_size() - 1).data(),
            static_cast<int>(this->phrases(this->phrases_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.speech.v1p1beta1.SpeechContext.phrases"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1p1beta1.SpeechContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1p1beta1.SpeechContext)
  return false;
#undef DO_
}

void SpeechContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1p1beta1.SpeechContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string phrases = 1;
  for (int i = 0, n = this->phrases_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phrases(i).data(), static_cast<int>(this->phrases(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1p1beta1.SpeechContext.phrases");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->phrases(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1p1beta1.SpeechContext)
}

::google::protobuf::uint8* SpeechContext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1p1beta1.SpeechContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string phrases = 1;
  for (int i = 0, n = this->phrases_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phrases(i).data(), static_cast<int>(this->phrases(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1p1beta1.SpeechContext.phrases");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->phrases(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1p1beta1.SpeechContext)
  return target;
}

size_t SpeechContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1p1beta1.SpeechContext)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string phrases = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->phrases_size());
  for (int i = 0, n = this->phrases_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->phrases(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeechContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1p1beta1.SpeechContext)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeechContext* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeechContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1p1beta1.SpeechContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1p1beta1.SpeechContext)
    MergeFrom(*source);
  }
}

void SpeechContext::MergeFrom(const SpeechContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1p1beta1.SpeechContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  phrases_.MergeFrom(from.phrases_);
}

void SpeechContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1p1beta1.SpeechContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechContext::CopyFrom(const SpeechContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1p1beta1.SpeechContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechContext::IsInitialized() const {
  return true;
}

void SpeechContext::Swap(SpeechContext* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SpeechContext* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SpeechContext::UnsafeArenaSwap(SpeechContext* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SpeechContext::InternalSwap(SpeechContext* other) {
  using std::swap;
  phrases_.InternalSwap(CastToBase(&other->phrases_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpeechContext::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RecognitionAudio::InitAsDefaultInstance() {
  ::google::cloud::speech::v1p1beta1::_RecognitionAudio_default_instance_.content_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::google::cloud::speech::v1p1beta1::_RecognitionAudio_default_instance_.uri_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognitionAudio::kContentFieldNumber;
const int RecognitionAudio::kUriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognitionAudio::RecognitionAudio()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_RecognitionAudio.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1p1beta1.RecognitionAudio)
}
RecognitionAudio::RecognitionAudio(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_RecognitionAudio.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1p1beta1.RecognitionAudio)
}
RecognitionAudio::RecognitionAudio(const RecognitionAudio& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_audio_source();
  switch (from.audio_source_case()) {
    case kContent: {
      set_content(from.content());
      break;
    }
    case kUri: {
      set_uri(from.uri());
      break;
    }
    case AUDIO_SOURCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1p1beta1.RecognitionAudio)
}

void RecognitionAudio::SharedCtor() {
  clear_has_audio_source();
}

RecognitionAudio::~RecognitionAudio() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1p1beta1.RecognitionAudio)
  SharedDtor();
}

void RecognitionAudio::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (has_audio_source()) {
    clear_audio_source();
  }
}

void RecognitionAudio::ArenaDtor(void* object) {
  RecognitionAudio* _this = reinterpret_cast< RecognitionAudio* >(object);
  (void)_this;
}
void RecognitionAudio::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void RecognitionAudio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RecognitionAudio::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecognitionAudio& RecognitionAudio::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_RecognitionAudio.base);
  return *internal_default_instance();
}


void RecognitionAudio::clear_audio_source() {
// @@protoc_insertion_point(one_of_clear_start:google.cloud.speech.v1p1beta1.RecognitionAudio)
  switch (audio_source_case()) {
    case kContent: {
      audio_source_.content_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kUri: {
      audio_source_.uri_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case AUDIO_SOURCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = AUDIO_SOURCE_NOT_SET;
}


void RecognitionAudio::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1p1beta1.RecognitionAudio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_audio_source();
  _internal_metadata_.Clear();
}

bool RecognitionAudio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1p1beta1.RecognitionAudio)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes content = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uri = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.speech.v1p1beta1.RecognitionAudio.uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1p1beta1.RecognitionAudio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1p1beta1.RecognitionAudio)
  return false;
#undef DO_
}

void RecognitionAudio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1p1beta1.RecognitionAudio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->content(), output);
  }

  // string uri = 2;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1p1beta1.RecognitionAudio.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uri(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1p1beta1.RecognitionAudio)
}

::google::protobuf::uint8* RecognitionAudio::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1p1beta1.RecognitionAudio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 1;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->content(), target);
  }

  // string uri = 2;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1p1beta1.RecognitionAudio.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uri(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1p1beta1.RecognitionAudio)
  return target;
}

size_t RecognitionAudio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1p1beta1.RecognitionAudio)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (audio_source_case()) {
    // bytes content = 1;
    case kContent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
      break;
    }
    // string uri = 2;
    case kUri: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
      break;
    }
    case AUDIO_SOURCE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecognitionAudio::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1p1beta1.RecognitionAudio)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognitionAudio* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognitionAudio>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1p1beta1.RecognitionAudio)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1p1beta1.RecognitionAudio)
    MergeFrom(*source);
  }
}

void RecognitionAudio::MergeFrom(const RecognitionAudio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1p1beta1.RecognitionAudio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.audio_source_case()) {
    case kContent: {
      set_content(from.content());
      break;
    }
    case kUri: {
      set_uri(from.uri());
      break;
    }
    case AUDIO_SOURCE_NOT_SET: {
      break;
    }
  }
}

void RecognitionAudio::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1p1beta1.RecognitionAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognitionAudio::CopyFrom(const RecognitionAudio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1p1beta1.RecognitionAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognitionAudio::IsInitialized() const {
  return true;
}

void RecognitionAudio::Swap(RecognitionAudio* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RecognitionAudio* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RecognitionAudio::UnsafeArenaSwap(RecognitionAudio* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RecognitionAudio::InternalSwap(RecognitionAudio* other) {
  using std::swap;
  swap(audio_source_, other->audio_source_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RecognitionAudio::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RecognizeResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognizeResponse::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognizeResponse::RecognizeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_RecognizeResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1p1beta1.RecognizeResponse)
}
RecognizeResponse::RecognizeResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  results_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_RecognizeResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1p1beta1.RecognizeResponse)
}
RecognizeResponse::RecognizeResponse(const RecognizeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1p1beta1.RecognizeResponse)
}

void RecognizeResponse::SharedCtor() {
}

RecognizeResponse::~RecognizeResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1p1beta1.RecognizeResponse)
  SharedDtor();
}

void RecognizeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void RecognizeResponse::ArenaDtor(void* object) {
  RecognizeResponse* _this = reinterpret_cast< RecognizeResponse* >(object);
  (void)_this;
}
void RecognizeResponse::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void RecognizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RecognizeResponse::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecognizeResponse& RecognizeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_RecognizeResponse.base);
  return *internal_default_instance();
}


void RecognizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1p1beta1.RecognizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear();
}

bool RecognizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1p1beta1.RecognizeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.speech.v1p1beta1.SpeechRecognitionResult results = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1p1beta1.RecognizeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1p1beta1.RecognizeResponse)
  return false;
#undef DO_
}

void RecognizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1p1beta1.RecognizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1p1beta1.SpeechRecognitionResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->results(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1p1beta1.RecognizeResponse)
}

::google::protobuf::uint8* RecognizeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1p1beta1.RecognizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1p1beta1.SpeechRecognitionResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->results(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1p1beta1.RecognizeResponse)
  return target;
}

size_t RecognizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1p1beta1.RecognizeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.speech.v1p1beta1.SpeechRecognitionResult results = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->results(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecognizeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1p1beta1.RecognizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognizeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognizeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1p1beta1.RecognizeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1p1beta1.RecognizeResponse)
    MergeFrom(*source);
  }
}

void RecognizeResponse::MergeFrom(const RecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1p1beta1.RecognizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void RecognizeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1p1beta1.RecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizeResponse::CopyFrom(const RecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1p1beta1.RecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeResponse::IsInitialized() const {
  return true;
}

void RecognizeResponse::Swap(RecognizeResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RecognizeResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RecognizeResponse::UnsafeArenaSwap(RecognizeResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RecognizeResponse::InternalSwap(RecognizeResponse* other) {
  using std::swap;
  CastToBase(&results_)->InternalSwap(CastToBase(&other->results_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RecognizeResponse::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LongRunningRecognizeResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LongRunningRecognizeResponse::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LongRunningRecognizeResponse::LongRunningRecognizeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_LongRunningRecognizeResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1p1beta1.LongRunningRecognizeResponse)
}
LongRunningRecognizeResponse::LongRunningRecognizeResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  results_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_LongRunningRecognizeResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1p1beta1.LongRunningRecognizeResponse)
}
LongRunningRecognizeResponse::LongRunningRecognizeResponse(const LongRunningRecognizeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1p1beta1.LongRunningRecognizeResponse)
}

void LongRunningRecognizeResponse::SharedCtor() {
}

LongRunningRecognizeResponse::~LongRunningRecognizeResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1p1beta1.LongRunningRecognizeResponse)
  SharedDtor();
}

void LongRunningRecognizeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void LongRunningRecognizeResponse::ArenaDtor(void* object) {
  LongRunningRecognizeResponse* _this = reinterpret_cast< LongRunningRecognizeResponse* >(object);
  (void)_this;
}
void LongRunningRecognizeResponse::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void LongRunningRecognizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LongRunningRecognizeResponse::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LongRunningRecognizeResponse& LongRunningRecognizeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_LongRunningRecognizeResponse.base);
  return *internal_default_instance();
}


void LongRunningRecognizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1p1beta1.LongRunningRecognizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear();
}

bool LongRunningRecognizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1p1beta1.LongRunningRecognizeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.speech.v1p1beta1.SpeechRecognitionResult results = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1p1beta1.LongRunningRecognizeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1p1beta1.LongRunningRecognizeResponse)
  return false;
#undef DO_
}

void LongRunningRecognizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1p1beta1.LongRunningRecognizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1p1beta1.SpeechRecognitionResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->results(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1p1beta1.LongRunningRecognizeResponse)
}

::google::protobuf::uint8* LongRunningRecognizeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1p1beta1.LongRunningRecognizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1p1beta1.SpeechRecognitionResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->results(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1p1beta1.LongRunningRecognizeResponse)
  return target;
}

size_t LongRunningRecognizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1p1beta1.LongRunningRecognizeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.speech.v1p1beta1.SpeechRecognitionResult results = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->results(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LongRunningRecognizeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1p1beta1.LongRunningRecognizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LongRunningRecognizeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LongRunningRecognizeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1p1beta1.LongRunningRecognizeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1p1beta1.LongRunningRecognizeResponse)
    MergeFrom(*source);
  }
}

void LongRunningRecognizeResponse::MergeFrom(const LongRunningRecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1p1beta1.LongRunningRecognizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void LongRunningRecognizeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1p1beta1.LongRunningRecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LongRunningRecognizeResponse::CopyFrom(const LongRunningRecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1p1beta1.LongRunningRecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongRunningRecognizeResponse::IsInitialized() const {
  return true;
}

void LongRunningRecognizeResponse::Swap(LongRunningRecognizeResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LongRunningRecognizeResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LongRunningRecognizeResponse::UnsafeArenaSwap(LongRunningRecognizeResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LongRunningRecognizeResponse::InternalSwap(LongRunningRecognizeResponse* other) {
  using std::swap;
  CastToBase(&results_)->InternalSwap(CastToBase(&other->results_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LongRunningRecognizeResponse::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LongRunningRecognizeMetadata::InitAsDefaultInstance() {
  ::google::cloud::speech::v1p1beta1::_LongRunningRecognizeMetadata_default_instance_._instance.get_mutable()->start_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::cloud::speech::v1p1beta1::_LongRunningRecognizeMetadata_default_instance_._instance.get_mutable()->last_update_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void LongRunningRecognizeMetadata::unsafe_arena_set_allocated_start_time(
    ::google::protobuf::Timestamp* start_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete start_time_;
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1p1beta1.LongRunningRecognizeMetadata.start_time)
}
void LongRunningRecognizeMetadata::clear_start_time() {
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
}
void LongRunningRecognizeMetadata::unsafe_arena_set_allocated_last_update_time(
    ::google::protobuf::Timestamp* last_update_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete last_update_time_;
  }
  last_update_time_ = last_update_time;
  if (last_update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1p1beta1.LongRunningRecognizeMetadata.last_update_time)
}
void LongRunningRecognizeMetadata::clear_last_update_time() {
  if (GetArenaNoVirtual() == NULL && last_update_time_ != NULL) {
    delete last_update_time_;
  }
  last_update_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LongRunningRecognizeMetadata::kProgressPercentFieldNumber;
const int LongRunningRecognizeMetadata::kStartTimeFieldNumber;
const int LongRunningRecognizeMetadata::kLastUpdateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LongRunningRecognizeMetadata::LongRunningRecognizeMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_LongRunningRecognizeMetadata.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1p1beta1.LongRunningRecognizeMetadata)
}
LongRunningRecognizeMetadata::LongRunningRecognizeMetadata(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_LongRunningRecognizeMetadata.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1p1beta1.LongRunningRecognizeMetadata)
}
LongRunningRecognizeMetadata::LongRunningRecognizeMetadata(const LongRunningRecognizeMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start_time()) {
    start_time_ = new ::google::protobuf::Timestamp(*from.start_time_);
  } else {
    start_time_ = NULL;
  }
  if (from.has_last_update_time()) {
    last_update_time_ = new ::google::protobuf::Timestamp(*from.last_update_time_);
  } else {
    last_update_time_ = NULL;
  }
  progress_percent_ = from.progress_percent_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1p1beta1.LongRunningRecognizeMetadata)
}

void LongRunningRecognizeMetadata::SharedCtor() {
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_percent_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(progress_percent_));
}

LongRunningRecognizeMetadata::~LongRunningRecognizeMetadata() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1p1beta1.LongRunningRecognizeMetadata)
  SharedDtor();
}

void LongRunningRecognizeMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete last_update_time_;
}

void LongRunningRecognizeMetadata::ArenaDtor(void* object) {
  LongRunningRecognizeMetadata* _this = reinterpret_cast< LongRunningRecognizeMetadata* >(object);
  (void)_this;
}
void LongRunningRecognizeMetadata::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void LongRunningRecognizeMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LongRunningRecognizeMetadata::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LongRunningRecognizeMetadata& LongRunningRecognizeMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_LongRunningRecognizeMetadata.base);
  return *internal_default_instance();
}


void LongRunningRecognizeMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1p1beta1.LongRunningRecognizeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && last_update_time_ != NULL) {
    delete last_update_time_;
  }
  last_update_time_ = NULL;
  progress_percent_ = 0;
  _internal_metadata_.Clear();
}

bool LongRunningRecognizeMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1p1beta1.LongRunningRecognizeMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 progress_percent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp start_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp last_update_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_update_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1p1beta1.LongRunningRecognizeMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1p1beta1.LongRunningRecognizeMetadata)
  return false;
#undef DO_
}

void LongRunningRecognizeMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1p1beta1.LongRunningRecognizeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 progress_percent = 1;
  if (this->progress_percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->progress_percent(), output);
  }

  // .google.protobuf.Timestamp start_time = 2;
  if (this->has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_start_time(), output);
  }

  // .google.protobuf.Timestamp last_update_time = 3;
  if (this->has_last_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_last_update_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1p1beta1.LongRunningRecognizeMetadata)
}

::google::protobuf::uint8* LongRunningRecognizeMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1p1beta1.LongRunningRecognizeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 progress_percent = 1;
  if (this->progress_percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->progress_percent(), target);
  }

  // .google.protobuf.Timestamp start_time = 2;
  if (this->has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_start_time(), deterministic, target);
  }

  // .google.protobuf.Timestamp last_update_time = 3;
  if (this->has_last_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_last_update_time(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1p1beta1.LongRunningRecognizeMetadata)
  return target;
}

size_t LongRunningRecognizeMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1p1beta1.LongRunningRecognizeMetadata)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Timestamp start_time = 2;
  if (this->has_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp last_update_time = 3;
  if (this->has_last_update_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *last_update_time_);
  }

  // int32 progress_percent = 1;
  if (this->progress_percent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->progress_percent());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LongRunningRecognizeMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1p1beta1.LongRunningRecognizeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const LongRunningRecognizeMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LongRunningRecognizeMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1p1beta1.LongRunningRecognizeMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1p1beta1.LongRunningRecognizeMetadata)
    MergeFrom(*source);
  }
}

void LongRunningRecognizeMetadata::MergeFrom(const LongRunningRecognizeMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1p1beta1.LongRunningRecognizeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start_time()) {
    mutable_start_time()->::google::protobuf::Timestamp::MergeFrom(from.start_time());
  }
  if (from.has_last_update_time()) {
    mutable_last_update_time()->::google::protobuf::Timestamp::MergeFrom(from.last_update_time());
  }
  if (from.progress_percent() != 0) {
    set_progress_percent(from.progress_percent());
  }
}

void LongRunningRecognizeMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1p1beta1.LongRunningRecognizeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LongRunningRecognizeMetadata::CopyFrom(const LongRunningRecognizeMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1p1beta1.LongRunningRecognizeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongRunningRecognizeMetadata::IsInitialized() const {
  return true;
}

void LongRunningRecognizeMetadata::Swap(LongRunningRecognizeMetadata* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LongRunningRecognizeMetadata* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LongRunningRecognizeMetadata::UnsafeArenaSwap(LongRunningRecognizeMetadata* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LongRunningRecognizeMetadata::InternalSwap(LongRunningRecognizeMetadata* other) {
  using std::swap;
  swap(start_time_, other->start_time_);
  swap(last_update_time_, other->last_update_time_);
  swap(progress_percent_, other->progress_percent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LongRunningRecognizeMetadata::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StreamingRecognizeResponse::InitAsDefaultInstance() {
  ::google::cloud::speech::v1p1beta1::_StreamingRecognizeResponse_default_instance_._instance.get_mutable()->error_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
}
void StreamingRecognizeResponse::unsafe_arena_set_allocated_error(
    ::google::rpc::Status* error) {
  if (GetArenaNoVirtual() == NULL) {
    delete error_;
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1p1beta1.StreamingRecognizeResponse.error)
}
void StreamingRecognizeResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingRecognizeResponse::kErrorFieldNumber;
const int StreamingRecognizeResponse::kResultsFieldNumber;
const int StreamingRecognizeResponse::kSpeechEventTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingRecognizeResponse::StreamingRecognizeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_StreamingRecognizeResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1p1beta1.StreamingRecognizeResponse)
}
StreamingRecognizeResponse::StreamingRecognizeResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  results_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_StreamingRecognizeResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1p1beta1.StreamingRecognizeResponse)
}
StreamingRecognizeResponse::StreamingRecognizeResponse(const StreamingRecognizeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::google::rpc::Status(*from.error_);
  } else {
    error_ = NULL;
  }
  speech_event_type_ = from.speech_event_type_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1p1beta1.StreamingRecognizeResponse)
}

void StreamingRecognizeResponse::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speech_event_type_) -
      reinterpret_cast<char*>(&error_)) + sizeof(speech_event_type_));
}

StreamingRecognizeResponse::~StreamingRecognizeResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1p1beta1.StreamingRecognizeResponse)
  SharedDtor();
}

void StreamingRecognizeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete error_;
}

void StreamingRecognizeResponse::ArenaDtor(void* object) {
  StreamingRecognizeResponse* _this = reinterpret_cast< StreamingRecognizeResponse* >(object);
  (void)_this;
}
void StreamingRecognizeResponse::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void StreamingRecognizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StreamingRecognizeResponse::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamingRecognizeResponse& StreamingRecognizeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_StreamingRecognizeResponse.base);
  return *internal_default_instance();
}


void StreamingRecognizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1p1beta1.StreamingRecognizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  speech_event_type_ = 0;
  _internal_metadata_.Clear();
}

bool StreamingRecognizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1p1beta1.StreamingRecognizeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.rpc.Status error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.speech.v1p1beta1.StreamingRecognitionResult results = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.speech.v1p1beta1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_speech_event_type(static_cast< ::google::cloud::speech::v1p1beta1::StreamingRecognizeResponse_SpeechEventType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1p1beta1.StreamingRecognizeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1p1beta1.StreamingRecognizeResponse)
  return false;
#undef DO_
}

void StreamingRecognizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1p1beta1.StreamingRecognizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_error(), output);
  }

  // repeated .google.cloud.speech.v1p1beta1.StreamingRecognitionResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->results(static_cast<int>(i)),
      output);
  }

  // .google.cloud.speech.v1p1beta1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 4;
  if (this->speech_event_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->speech_event_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1p1beta1.StreamingRecognizeResponse)
}

::google::protobuf::uint8* StreamingRecognizeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1p1beta1.StreamingRecognizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_error(), deterministic, target);
  }

  // repeated .google.cloud.speech.v1p1beta1.StreamingRecognitionResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->results(static_cast<int>(i)), deterministic, target);
  }

  // .google.cloud.speech.v1p1beta1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 4;
  if (this->speech_event_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->speech_event_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1p1beta1.StreamingRecognizeResponse)
  return target;
}

size_t StreamingRecognizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1p1beta1.StreamingRecognizeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.speech.v1p1beta1.StreamingRecognitionResult results = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->results(static_cast<int>(i)));
    }
  }

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // .google.cloud.speech.v1p1beta1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 4;
  if (this->speech_event_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->speech_event_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingRecognizeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1p1beta1.StreamingRecognizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingRecognizeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamingRecognizeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1p1beta1.StreamingRecognizeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1p1beta1.StreamingRecognizeResponse)
    MergeFrom(*source);
  }
}

void StreamingRecognizeResponse::MergeFrom(const StreamingRecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1p1beta1.StreamingRecognizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.has_error()) {
    mutable_error()->::google::rpc::Status::MergeFrom(from.error());
  }
  if (from.speech_event_type() != 0) {
    set_speech_event_type(from.speech_event_type());
  }
}

void StreamingRecognizeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1p1beta1.StreamingRecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingRecognizeResponse::CopyFrom(const StreamingRecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1p1beta1.StreamingRecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingRecognizeResponse::IsInitialized() const {
  return true;
}

void StreamingRecognizeResponse::Swap(StreamingRecognizeResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamingRecognizeResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamingRecognizeResponse::UnsafeArenaSwap(StreamingRecognizeResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamingRecognizeResponse::InternalSwap(StreamingRecognizeResponse* other) {
  using std::swap;
  CastToBase(&results_)->InternalSwap(CastToBase(&other->results_));
  swap(error_, other->error_);
  swap(speech_event_type_, other->speech_event_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StreamingRecognizeResponse::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StreamingRecognitionResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingRecognitionResult::kAlternativesFieldNumber;
const int StreamingRecognitionResult::kIsFinalFieldNumber;
const int StreamingRecognitionResult::kStabilityFieldNumber;
const int StreamingRecognitionResult::kChannelTagFieldNumber;
const int StreamingRecognitionResult::kLanguageCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingRecognitionResult::StreamingRecognitionResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_StreamingRecognitionResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1p1beta1.StreamingRecognitionResult)
}
StreamingRecognitionResult::StreamingRecognitionResult(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  alternatives_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_StreamingRecognitionResult.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1p1beta1.StreamingRecognitionResult)
}
StreamingRecognitionResult::StreamingRecognitionResult(const StreamingRecognitionResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      alternatives_(from.alternatives_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.language_code().size() > 0) {
    language_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code(),
      GetArenaNoVirtual());
  }
  ::memcpy(&is_final_, &from.is_final_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_tag_) -
    reinterpret_cast<char*>(&is_final_)) + sizeof(channel_tag_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1p1beta1.StreamingRecognitionResult)
}

void StreamingRecognitionResult::SharedCtor() {
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_final_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_tag_) -
      reinterpret_cast<char*>(&is_final_)) + sizeof(channel_tag_));
}

StreamingRecognitionResult::~StreamingRecognitionResult() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1p1beta1.StreamingRecognitionResult)
  SharedDtor();
}

void StreamingRecognitionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StreamingRecognitionResult::ArenaDtor(void* object) {
  StreamingRecognitionResult* _this = reinterpret_cast< StreamingRecognitionResult* >(object);
  (void)_this;
}
void StreamingRecognitionResult::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void StreamingRecognitionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StreamingRecognitionResult::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamingRecognitionResult& StreamingRecognitionResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_StreamingRecognitionResult.base);
  return *internal_default_instance();
}


void StreamingRecognitionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1p1beta1.StreamingRecognitionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alternatives_.Clear();
  language_code_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&is_final_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_tag_) -
      reinterpret_cast<char*>(&is_final_)) + sizeof(channel_tag_));
  _internal_metadata_.Clear();
}

bool StreamingRecognitionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1p1beta1.StreamingRecognitionResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative alternatives = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_alternatives()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_final = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_final_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float stability = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 channel_tag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string language_code = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language_code().data(), static_cast<int>(this->language_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.speech.v1p1beta1.StreamingRecognitionResult.language_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1p1beta1.StreamingRecognitionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1p1beta1.StreamingRecognitionResult)
  return false;
#undef DO_
}

void StreamingRecognitionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1p1beta1.StreamingRecognitionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative alternatives = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alternatives_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->alternatives(static_cast<int>(i)),
      output);
  }

  // bool is_final = 2;
  if (this->is_final() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_final(), output);
  }

  // float stability = 3;
  if (this->stability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->stability(), output);
  }

  // int32 channel_tag = 5;
  if (this->channel_tag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->channel_tag(), output);
  }

  // string language_code = 6;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1p1beta1.StreamingRecognitionResult.language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->language_code(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1p1beta1.StreamingRecognitionResult)
}

::google::protobuf::uint8* StreamingRecognitionResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1p1beta1.StreamingRecognitionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative alternatives = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alternatives_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->alternatives(static_cast<int>(i)), deterministic, target);
  }

  // bool is_final = 2;
  if (this->is_final() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_final(), target);
  }

  // float stability = 3;
  if (this->stability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->stability(), target);
  }

  // int32 channel_tag = 5;
  if (this->channel_tag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->channel_tag(), target);
  }

  // string language_code = 6;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1p1beta1.StreamingRecognitionResult.language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->language_code(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1p1beta1.StreamingRecognitionResult)
  return target;
}

size_t StreamingRecognitionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1p1beta1.StreamingRecognitionResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative alternatives = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->alternatives_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->alternatives(static_cast<int>(i)));
    }
  }

  // string language_code = 6;
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language_code());
  }

  // bool is_final = 2;
  if (this->is_final() != 0) {
    total_size += 1 + 1;
  }

  // float stability = 3;
  if (this->stability() != 0) {
    total_size += 1 + 4;
  }

  // int32 channel_tag = 5;
  if (this->channel_tag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel_tag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingRecognitionResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1p1beta1.StreamingRecognitionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingRecognitionResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamingRecognitionResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1p1beta1.StreamingRecognitionResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1p1beta1.StreamingRecognitionResult)
    MergeFrom(*source);
  }
}

void StreamingRecognitionResult::MergeFrom(const StreamingRecognitionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1p1beta1.StreamingRecognitionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alternatives_.MergeFrom(from.alternatives_);
  if (from.language_code().size() > 0) {
    set_language_code(from.language_code());
  }
  if (from.is_final() != 0) {
    set_is_final(from.is_final());
  }
  if (from.stability() != 0) {
    set_stability(from.stability());
  }
  if (from.channel_tag() != 0) {
    set_channel_tag(from.channel_tag());
  }
}

void StreamingRecognitionResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1p1beta1.StreamingRecognitionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingRecognitionResult::CopyFrom(const StreamingRecognitionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1p1beta1.StreamingRecognitionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingRecognitionResult::IsInitialized() const {
  return true;
}

void StreamingRecognitionResult::Swap(StreamingRecognitionResult* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamingRecognitionResult* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamingRecognitionResult::UnsafeArenaSwap(StreamingRecognitionResult* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamingRecognitionResult::InternalSwap(StreamingRecognitionResult* other) {
  using std::swap;
  CastToBase(&alternatives_)->InternalSwap(CastToBase(&other->alternatives_));
  language_code_.Swap(&other->language_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_final_, other->is_final_);
  swap(stability_, other->stability_);
  swap(channel_tag_, other->channel_tag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StreamingRecognitionResult::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpeechRecognitionResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeechRecognitionResult::kAlternativesFieldNumber;
const int SpeechRecognitionResult::kChannelTagFieldNumber;
const int SpeechRecognitionResult::kLanguageCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeechRecognitionResult::SpeechRecognitionResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_SpeechRecognitionResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1p1beta1.SpeechRecognitionResult)
}
SpeechRecognitionResult::SpeechRecognitionResult(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  alternatives_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_SpeechRecognitionResult.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1p1beta1.SpeechRecognitionResult)
}
SpeechRecognitionResult::SpeechRecognitionResult(const SpeechRecognitionResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      alternatives_(from.alternatives_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.language_code().size() > 0) {
    language_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code(),
      GetArenaNoVirtual());
  }
  channel_tag_ = from.channel_tag_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1p1beta1.SpeechRecognitionResult)
}

void SpeechRecognitionResult::SharedCtor() {
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_tag_ = 0;
}

SpeechRecognitionResult::~SpeechRecognitionResult() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1p1beta1.SpeechRecognitionResult)
  SharedDtor();
}

void SpeechRecognitionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SpeechRecognitionResult::ArenaDtor(void* object) {
  SpeechRecognitionResult* _this = reinterpret_cast< SpeechRecognitionResult* >(object);
  (void)_this;
}
void SpeechRecognitionResult::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void SpeechRecognitionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpeechRecognitionResult::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeechRecognitionResult& SpeechRecognitionResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_SpeechRecognitionResult.base);
  return *internal_default_instance();
}


void SpeechRecognitionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1p1beta1.SpeechRecognitionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alternatives_.Clear();
  language_code_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  channel_tag_ = 0;
  _internal_metadata_.Clear();
}

bool SpeechRecognitionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1p1beta1.SpeechRecognitionResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative alternatives = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_alternatives()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 channel_tag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string language_code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language_code().data(), static_cast<int>(this->language_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.speech.v1p1beta1.SpeechRecognitionResult.language_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1p1beta1.SpeechRecognitionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1p1beta1.SpeechRecognitionResult)
  return false;
#undef DO_
}

void SpeechRecognitionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1p1beta1.SpeechRecognitionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative alternatives = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alternatives_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->alternatives(static_cast<int>(i)),
      output);
  }

  // int32 channel_tag = 2;
  if (this->channel_tag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel_tag(), output);
  }

  // string language_code = 5;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1p1beta1.SpeechRecognitionResult.language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->language_code(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1p1beta1.SpeechRecognitionResult)
}

::google::protobuf::uint8* SpeechRecognitionResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1p1beta1.SpeechRecognitionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative alternatives = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alternatives_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->alternatives(static_cast<int>(i)), deterministic, target);
  }

  // int32 channel_tag = 2;
  if (this->channel_tag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel_tag(), target);
  }

  // string language_code = 5;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1p1beta1.SpeechRecognitionResult.language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->language_code(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1p1beta1.SpeechRecognitionResult)
  return target;
}

size_t SpeechRecognitionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1p1beta1.SpeechRecognitionResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative alternatives = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->alternatives_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->alternatives(static_cast<int>(i)));
    }
  }

  // string language_code = 5;
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language_code());
  }

  // int32 channel_tag = 2;
  if (this->channel_tag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel_tag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeechRecognitionResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1p1beta1.SpeechRecognitionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeechRecognitionResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeechRecognitionResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1p1beta1.SpeechRecognitionResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1p1beta1.SpeechRecognitionResult)
    MergeFrom(*source);
  }
}

void SpeechRecognitionResult::MergeFrom(const SpeechRecognitionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1p1beta1.SpeechRecognitionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alternatives_.MergeFrom(from.alternatives_);
  if (from.language_code().size() > 0) {
    set_language_code(from.language_code());
  }
  if (from.channel_tag() != 0) {
    set_channel_tag(from.channel_tag());
  }
}

void SpeechRecognitionResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1p1beta1.SpeechRecognitionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechRecognitionResult::CopyFrom(const SpeechRecognitionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1p1beta1.SpeechRecognitionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechRecognitionResult::IsInitialized() const {
  return true;
}

void SpeechRecognitionResult::Swap(SpeechRecognitionResult* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SpeechRecognitionResult* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SpeechRecognitionResult::UnsafeArenaSwap(SpeechRecognitionResult* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SpeechRecognitionResult::InternalSwap(SpeechRecognitionResult* other) {
  using std::swap;
  CastToBase(&alternatives_)->InternalSwap(CastToBase(&other->alternatives_));
  language_code_.Swap(&other->language_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_tag_, other->channel_tag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpeechRecognitionResult::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpeechRecognitionAlternative::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeechRecognitionAlternative::kTranscriptFieldNumber;
const int SpeechRecognitionAlternative::kConfidenceFieldNumber;
const int SpeechRecognitionAlternative::kWordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeechRecognitionAlternative::SpeechRecognitionAlternative()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_SpeechRecognitionAlternative.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative)
}
SpeechRecognitionAlternative::SpeechRecognitionAlternative(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  words_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_SpeechRecognitionAlternative.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative)
}
SpeechRecognitionAlternative::SpeechRecognitionAlternative(const SpeechRecognitionAlternative& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      words_(from.words_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transcript_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transcript().size() > 0) {
    transcript_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transcript(),
      GetArenaNoVirtual());
  }
  confidence_ = from.confidence_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative)
}

void SpeechRecognitionAlternative::SharedCtor() {
  transcript_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;
}

SpeechRecognitionAlternative::~SpeechRecognitionAlternative() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative)
  SharedDtor();
}

void SpeechRecognitionAlternative::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  transcript_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SpeechRecognitionAlternative::ArenaDtor(void* object) {
  SpeechRecognitionAlternative* _this = reinterpret_cast< SpeechRecognitionAlternative* >(object);
  (void)_this;
}
void SpeechRecognitionAlternative::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void SpeechRecognitionAlternative::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpeechRecognitionAlternative::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeechRecognitionAlternative& SpeechRecognitionAlternative::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_SpeechRecognitionAlternative.base);
  return *internal_default_instance();
}


void SpeechRecognitionAlternative::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  words_.Clear();
  transcript_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  confidence_ = 0;
  _internal_metadata_.Clear();
}

bool SpeechRecognitionAlternative::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string transcript = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transcript()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->transcript().data(), static_cast<int>(this->transcript().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative.transcript"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.speech.v1p1beta1.WordInfo words = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_words()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative)
  return false;
#undef DO_
}

void SpeechRecognitionAlternative::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transcript = 1;
  if (this->transcript().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transcript().data(), static_cast<int>(this->transcript().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative.transcript");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->transcript(), output);
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->confidence(), output);
  }

  // repeated .google.cloud.speech.v1p1beta1.WordInfo words = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->words_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->words(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative)
}

::google::protobuf::uint8* SpeechRecognitionAlternative::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transcript = 1;
  if (this->transcript().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transcript().data(), static_cast<int>(this->transcript().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative.transcript");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->transcript(), target);
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->confidence(), target);
  }

  // repeated .google.cloud.speech.v1p1beta1.WordInfo words = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->words_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->words(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative)
  return target;
}

size_t SpeechRecognitionAlternative::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.speech.v1p1beta1.WordInfo words = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->words_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->words(static_cast<int>(i)));
    }
  }

  // string transcript = 1;
  if (this->transcript().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->transcript());
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeechRecognitionAlternative::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeechRecognitionAlternative* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeechRecognitionAlternative>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative)
    MergeFrom(*source);
  }
}

void SpeechRecognitionAlternative::MergeFrom(const SpeechRecognitionAlternative& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  words_.MergeFrom(from.words_);
  if (from.transcript().size() > 0) {
    set_transcript(from.transcript());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void SpeechRecognitionAlternative::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechRecognitionAlternative::CopyFrom(const SpeechRecognitionAlternative& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1p1beta1.SpeechRecognitionAlternative)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechRecognitionAlternative::IsInitialized() const {
  return true;
}

void SpeechRecognitionAlternative::Swap(SpeechRecognitionAlternative* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SpeechRecognitionAlternative* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SpeechRecognitionAlternative::UnsafeArenaSwap(SpeechRecognitionAlternative* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SpeechRecognitionAlternative::InternalSwap(SpeechRecognitionAlternative* other) {
  using std::swap;
  CastToBase(&words_)->InternalSwap(CastToBase(&other->words_));
  transcript_.Swap(&other->transcript_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(confidence_, other->confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpeechRecognitionAlternative::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WordInfo::InitAsDefaultInstance() {
  ::google::cloud::speech::v1p1beta1::_WordInfo_default_instance_._instance.get_mutable()->start_time_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::google::cloud::speech::v1p1beta1::_WordInfo_default_instance_._instance.get_mutable()->end_time_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void WordInfo::unsafe_arena_set_allocated_start_time(
    ::google::protobuf::Duration* start_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete start_time_;
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1p1beta1.WordInfo.start_time)
}
void WordInfo::clear_start_time() {
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
}
void WordInfo::unsafe_arena_set_allocated_end_time(
    ::google::protobuf::Duration* end_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete end_time_;
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1p1beta1.WordInfo.end_time)
}
void WordInfo::clear_end_time() {
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) {
    delete end_time_;
  }
  end_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WordInfo::kStartTimeFieldNumber;
const int WordInfo::kEndTimeFieldNumber;
const int WordInfo::kWordFieldNumber;
const int WordInfo::kConfidenceFieldNumber;
const int WordInfo::kSpeakerTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WordInfo::WordInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_WordInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1p1beta1.WordInfo)
}
WordInfo::WordInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_WordInfo.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1p1beta1.WordInfo)
}
WordInfo::WordInfo(const WordInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  word_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.word().size() > 0) {
    word_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.word(),
      GetArenaNoVirtual());
  }
  if (from.has_start_time()) {
    start_time_ = new ::google::protobuf::Duration(*from.start_time_);
  } else {
    start_time_ = NULL;
  }
  if (from.has_end_time()) {
    end_time_ = new ::google::protobuf::Duration(*from.end_time_);
  } else {
    end_time_ = NULL;
  }
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&speaker_tag_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(speaker_tag_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1p1beta1.WordInfo)
}

void WordInfo::SharedCtor() {
  word_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speaker_tag_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(speaker_tag_));
}

WordInfo::~WordInfo() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1p1beta1.WordInfo)
  SharedDtor();
}

void WordInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  word_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
}

void WordInfo::ArenaDtor(void* object) {
  WordInfo* _this = reinterpret_cast< WordInfo* >(object);
  (void)_this;
}
void WordInfo::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void WordInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WordInfo::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WordInfo& WordInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::scc_info_WordInfo.base);
  return *internal_default_instance();
}


void WordInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1p1beta1.WordInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  word_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) {
    delete end_time_;
  }
  end_time_ = NULL;
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speaker_tag_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(speaker_tag_));
  _internal_metadata_.Clear();
}

bool WordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1p1beta1.WordInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Duration start_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration end_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string word = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_word()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->word().data(), static_cast<int>(this->word().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.speech.v1p1beta1.WordInfo.word"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 speaker_tag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speaker_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1p1beta1.WordInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1p1beta1.WordInfo)
  return false;
#undef DO_
}

void WordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1p1beta1.WordInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration start_time = 1;
  if (this->has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_start_time(), output);
  }

  // .google.protobuf.Duration end_time = 2;
  if (this->has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_end_time(), output);
  }

  // string word = 3;
  if (this->word().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->word().data(), static_cast<int>(this->word().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1p1beta1.WordInfo.word");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->word(), output);
  }

  // float confidence = 4;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->confidence(), output);
  }

  // int32 speaker_tag = 5;
  if (this->speaker_tag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->speaker_tag(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1p1beta1.WordInfo)
}

::google::protobuf::uint8* WordInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1p1beta1.WordInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration start_time = 1;
  if (this->has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_start_time(), deterministic, target);
  }

  // .google.protobuf.Duration end_time = 2;
  if (this->has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_end_time(), deterministic, target);
  }

  // string word = 3;
  if (this->word().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->word().data(), static_cast<int>(this->word().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1p1beta1.WordInfo.word");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->word(), target);
  }

  // float confidence = 4;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->confidence(), target);
  }

  // int32 speaker_tag = 5;
  if (this->speaker_tag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->speaker_tag(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1p1beta1.WordInfo)
  return target;
}

size_t WordInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1p1beta1.WordInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string word = 3;
  if (this->word().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->word());
  }

  // .google.protobuf.Duration start_time = 1;
  if (this->has_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Duration end_time = 2;
  if (this->has_end_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  // float confidence = 4;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  // int32 speaker_tag = 5;
  if (this->speaker_tag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->speaker_tag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WordInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1p1beta1.WordInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WordInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WordInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1p1beta1.WordInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1p1beta1.WordInfo)
    MergeFrom(*source);
  }
}

void WordInfo::MergeFrom(const WordInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1p1beta1.WordInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.word().size() > 0) {
    set_word(from.word());
  }
  if (from.has_start_time()) {
    mutable_start_time()->::google::protobuf::Duration::MergeFrom(from.start_time());
  }
  if (from.has_end_time()) {
    mutable_end_time()->::google::protobuf::Duration::MergeFrom(from.end_time());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.speaker_tag() != 0) {
    set_speaker_tag(from.speaker_tag());
  }
}

void WordInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1p1beta1.WordInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WordInfo::CopyFrom(const WordInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1p1beta1.WordInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WordInfo::IsInitialized() const {
  return true;
}

void WordInfo::Swap(WordInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    WordInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void WordInfo::UnsafeArenaSwap(WordInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void WordInfo::InternalSwap(WordInfo* other) {
  using std::swap;
  word_.Swap(&other->word_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
  swap(confidence_, other->confidence_);
  swap(speaker_tag_, other->speaker_tag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WordInfo::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1p1beta1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1p1beta1
}  // namespace speech
}  // namespace cloud
}  // namespace google
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::speech::v1p1beta1::RecognizeRequest* Arena::CreateMaybeMessage< ::google::cloud::speech::v1p1beta1::RecognizeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1p1beta1::RecognizeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::speech::v1p1beta1::LongRunningRecognizeRequest* Arena::CreateMaybeMessage< ::google::cloud::speech::v1p1beta1::LongRunningRecognizeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1p1beta1::LongRunningRecognizeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::speech::v1p1beta1::StreamingRecognizeRequest* Arena::CreateMaybeMessage< ::google::cloud::speech::v1p1beta1::StreamingRecognizeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1p1beta1::StreamingRecognizeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::speech::v1p1beta1::StreamingRecognitionConfig* Arena::CreateMaybeMessage< ::google::cloud::speech::v1p1beta1::StreamingRecognitionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1p1beta1::StreamingRecognitionConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::speech::v1p1beta1::RecognitionConfig* Arena::CreateMaybeMessage< ::google::cloud::speech::v1p1beta1::RecognitionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1p1beta1::RecognitionConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::speech::v1p1beta1::RecognitionMetadata* Arena::CreateMaybeMessage< ::google::cloud::speech::v1p1beta1::RecognitionMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1p1beta1::RecognitionMetadata >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::speech::v1p1beta1::SpeechContext* Arena::CreateMaybeMessage< ::google::cloud::speech::v1p1beta1::SpeechContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1p1beta1::SpeechContext >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::speech::v1p1beta1::RecognitionAudio* Arena::CreateMaybeMessage< ::google::cloud::speech::v1p1beta1::RecognitionAudio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1p1beta1::RecognitionAudio >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::speech::v1p1beta1::RecognizeResponse* Arena::CreateMaybeMessage< ::google::cloud::speech::v1p1beta1::RecognizeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1p1beta1::RecognizeResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::speech::v1p1beta1::LongRunningRecognizeResponse* Arena::CreateMaybeMessage< ::google::cloud::speech::v1p1beta1::LongRunningRecognizeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1p1beta1::LongRunningRecognizeResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::speech::v1p1beta1::LongRunningRecognizeMetadata* Arena::CreateMaybeMessage< ::google::cloud::speech::v1p1beta1::LongRunningRecognizeMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1p1beta1::LongRunningRecognizeMetadata >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::speech::v1p1beta1::StreamingRecognizeResponse* Arena::CreateMaybeMessage< ::google::cloud::speech::v1p1beta1::StreamingRecognizeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1p1beta1::StreamingRecognizeResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::speech::v1p1beta1::StreamingRecognitionResult* Arena::CreateMaybeMessage< ::google::cloud::speech::v1p1beta1::StreamingRecognitionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1p1beta1::StreamingRecognitionResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::speech::v1p1beta1::SpeechRecognitionResult* Arena::CreateMaybeMessage< ::google::cloud::speech::v1p1beta1::SpeechRecognitionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1p1beta1::SpeechRecognitionResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::speech::v1p1beta1::SpeechRecognitionAlternative* Arena::CreateMaybeMessage< ::google::cloud::speech::v1p1beta1::SpeechRecognitionAlternative >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1p1beta1::SpeechRecognitionAlternative >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::speech::v1p1beta1::WordInfo* Arena::CreateMaybeMessage< ::google::cloud::speech::v1p1beta1::WordInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1p1beta1::WordInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
