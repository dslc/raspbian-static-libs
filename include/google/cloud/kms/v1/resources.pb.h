// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/kms/v1/resources.proto

#ifndef PROTOBUF_INCLUDED_google_2fcloud_2fkms_2fv1_2fresources_2eproto
#define PROTOBUF_INCLUDED_google_2fcloud_2fkms_2fv1_2fresources_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto 

namespace protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto
namespace google {
namespace cloud {
namespace kms {
namespace v1 {
class CryptoKey;
class CryptoKeyDefaultTypeInternal;
extern CryptoKeyDefaultTypeInternal _CryptoKey_default_instance_;
class CryptoKeyVersion;
class CryptoKeyVersionDefaultTypeInternal;
extern CryptoKeyVersionDefaultTypeInternal _CryptoKeyVersion_default_instance_;
class CryptoKey_LabelsEntry_DoNotUse;
class CryptoKey_LabelsEntry_DoNotUseDefaultTypeInternal;
extern CryptoKey_LabelsEntry_DoNotUseDefaultTypeInternal _CryptoKey_LabelsEntry_DoNotUse_default_instance_;
class KeyRing;
class KeyRingDefaultTypeInternal;
extern KeyRingDefaultTypeInternal _KeyRing_default_instance_;
}  // namespace v1
}  // namespace kms
}  // namespace cloud
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::cloud::kms::v1::CryptoKey* Arena::CreateMaybeMessage<::google::cloud::kms::v1::CryptoKey>(Arena*);
template<> ::google::cloud::kms::v1::CryptoKeyVersion* Arena::CreateMaybeMessage<::google::cloud::kms::v1::CryptoKeyVersion>(Arena*);
template<> ::google::cloud::kms::v1::CryptoKey_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::cloud::kms::v1::CryptoKey_LabelsEntry_DoNotUse>(Arena*);
template<> ::google::cloud::kms::v1::KeyRing* Arena::CreateMaybeMessage<::google::cloud::kms::v1::KeyRing>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace cloud {
namespace kms {
namespace v1 {

enum CryptoKey_CryptoKeyPurpose {
  CryptoKey_CryptoKeyPurpose_CRYPTO_KEY_PURPOSE_UNSPECIFIED = 0,
  CryptoKey_CryptoKeyPurpose_ENCRYPT_DECRYPT = 1,
  CryptoKey_CryptoKeyPurpose_CryptoKey_CryptoKeyPurpose_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CryptoKey_CryptoKeyPurpose_CryptoKey_CryptoKeyPurpose_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CryptoKey_CryptoKeyPurpose_IsValid(int value);
const CryptoKey_CryptoKeyPurpose CryptoKey_CryptoKeyPurpose_CryptoKeyPurpose_MIN = CryptoKey_CryptoKeyPurpose_CRYPTO_KEY_PURPOSE_UNSPECIFIED;
const CryptoKey_CryptoKeyPurpose CryptoKey_CryptoKeyPurpose_CryptoKeyPurpose_MAX = CryptoKey_CryptoKeyPurpose_ENCRYPT_DECRYPT;
const int CryptoKey_CryptoKeyPurpose_CryptoKeyPurpose_ARRAYSIZE = CryptoKey_CryptoKeyPurpose_CryptoKeyPurpose_MAX + 1;

const ::google::protobuf::EnumDescriptor* CryptoKey_CryptoKeyPurpose_descriptor();
inline const ::std::string& CryptoKey_CryptoKeyPurpose_Name(CryptoKey_CryptoKeyPurpose value) {
  return ::google::protobuf::internal::NameOfEnum(
    CryptoKey_CryptoKeyPurpose_descriptor(), value);
}
inline bool CryptoKey_CryptoKeyPurpose_Parse(
    const ::std::string& name, CryptoKey_CryptoKeyPurpose* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CryptoKey_CryptoKeyPurpose>(
    CryptoKey_CryptoKeyPurpose_descriptor(), name, value);
}
enum CryptoKeyVersion_CryptoKeyVersionState {
  CryptoKeyVersion_CryptoKeyVersionState_CRYPTO_KEY_VERSION_STATE_UNSPECIFIED = 0,
  CryptoKeyVersion_CryptoKeyVersionState_ENABLED = 1,
  CryptoKeyVersion_CryptoKeyVersionState_DISABLED = 2,
  CryptoKeyVersion_CryptoKeyVersionState_DESTROYED = 3,
  CryptoKeyVersion_CryptoKeyVersionState_DESTROY_SCHEDULED = 4,
  CryptoKeyVersion_CryptoKeyVersionState_CryptoKeyVersion_CryptoKeyVersionState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CryptoKeyVersion_CryptoKeyVersionState_CryptoKeyVersion_CryptoKeyVersionState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CryptoKeyVersion_CryptoKeyVersionState_IsValid(int value);
const CryptoKeyVersion_CryptoKeyVersionState CryptoKeyVersion_CryptoKeyVersionState_CryptoKeyVersionState_MIN = CryptoKeyVersion_CryptoKeyVersionState_CRYPTO_KEY_VERSION_STATE_UNSPECIFIED;
const CryptoKeyVersion_CryptoKeyVersionState CryptoKeyVersion_CryptoKeyVersionState_CryptoKeyVersionState_MAX = CryptoKeyVersion_CryptoKeyVersionState_DESTROY_SCHEDULED;
const int CryptoKeyVersion_CryptoKeyVersionState_CryptoKeyVersionState_ARRAYSIZE = CryptoKeyVersion_CryptoKeyVersionState_CryptoKeyVersionState_MAX + 1;

const ::google::protobuf::EnumDescriptor* CryptoKeyVersion_CryptoKeyVersionState_descriptor();
inline const ::std::string& CryptoKeyVersion_CryptoKeyVersionState_Name(CryptoKeyVersion_CryptoKeyVersionState value) {
  return ::google::protobuf::internal::NameOfEnum(
    CryptoKeyVersion_CryptoKeyVersionState_descriptor(), value);
}
inline bool CryptoKeyVersion_CryptoKeyVersionState_Parse(
    const ::std::string& name, CryptoKeyVersion_CryptoKeyVersionState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CryptoKeyVersion_CryptoKeyVersionState>(
    CryptoKeyVersion_CryptoKeyVersionState_descriptor(), name, value);
}
// ===================================================================

class KeyRing : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.kms.v1.KeyRing) */ {
 public:
  KeyRing();
  virtual ~KeyRing();

  KeyRing(const KeyRing& from);

  inline KeyRing& operator=(const KeyRing& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeyRing(KeyRing&& from) noexcept
    : KeyRing() {
    *this = ::std::move(from);
  }

  inline KeyRing& operator=(KeyRing&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyRing& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyRing* internal_default_instance() {
    return reinterpret_cast<const KeyRing*>(
               &_KeyRing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(KeyRing* other);
  void Swap(KeyRing* other);
  friend void swap(KeyRing& a, KeyRing& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeyRing* New() const final {
    return CreateMaybeMessage<KeyRing>(NULL);
  }

  KeyRing* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KeyRing>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KeyRing& from);
  void MergeFrom(const KeyRing& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyRing* other);
  protected:
  explicit KeyRing(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // .google.protobuf.Timestamp create_time = 2;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 2;
  private:
  const ::google::protobuf::Timestamp& _internal_create_time() const;
  public:
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);
  void unsafe_arena_set_allocated_create_time(
      ::google::protobuf::Timestamp* create_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_create_time();

  // @@protoc_insertion_point(class_scope:google.cloud.kms.v1.KeyRing)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Timestamp* create_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CryptoKey_LabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<CryptoKey_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<CryptoKey_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  CryptoKey_LabelsEntry_DoNotUse();
  CryptoKey_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const CryptoKey_LabelsEntry_DoNotUse& other);
  static const CryptoKey_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CryptoKey_LabelsEntry_DoNotUse*>(&_CryptoKey_LabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class CryptoKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.kms.v1.CryptoKey) */ {
 public:
  CryptoKey();
  virtual ~CryptoKey();

  CryptoKey(const CryptoKey& from);

  inline CryptoKey& operator=(const CryptoKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CryptoKey(CryptoKey&& from) noexcept
    : CryptoKey() {
    *this = ::std::move(from);
  }

  inline CryptoKey& operator=(CryptoKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CryptoKey& default_instance();

  enum RotationScheduleCase {
    kRotationPeriod = 8,
    ROTATION_SCHEDULE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CryptoKey* internal_default_instance() {
    return reinterpret_cast<const CryptoKey*>(
               &_CryptoKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(CryptoKey* other);
  void Swap(CryptoKey* other);
  friend void swap(CryptoKey& a, CryptoKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CryptoKey* New() const final {
    return CreateMaybeMessage<CryptoKey>(NULL);
  }

  CryptoKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CryptoKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CryptoKey& from);
  void MergeFrom(const CryptoKey& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CryptoKey* other);
  protected:
  explicit CryptoKey(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef CryptoKey_CryptoKeyPurpose CryptoKeyPurpose;
  static const CryptoKeyPurpose CRYPTO_KEY_PURPOSE_UNSPECIFIED =
    CryptoKey_CryptoKeyPurpose_CRYPTO_KEY_PURPOSE_UNSPECIFIED;
  static const CryptoKeyPurpose ENCRYPT_DECRYPT =
    CryptoKey_CryptoKeyPurpose_ENCRYPT_DECRYPT;
  static inline bool CryptoKeyPurpose_IsValid(int value) {
    return CryptoKey_CryptoKeyPurpose_IsValid(value);
  }
  static const CryptoKeyPurpose CryptoKeyPurpose_MIN =
    CryptoKey_CryptoKeyPurpose_CryptoKeyPurpose_MIN;
  static const CryptoKeyPurpose CryptoKeyPurpose_MAX =
    CryptoKey_CryptoKeyPurpose_CryptoKeyPurpose_MAX;
  static const int CryptoKeyPurpose_ARRAYSIZE =
    CryptoKey_CryptoKeyPurpose_CryptoKeyPurpose_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CryptoKeyPurpose_descriptor() {
    return CryptoKey_CryptoKeyPurpose_descriptor();
  }
  static inline const ::std::string& CryptoKeyPurpose_Name(CryptoKeyPurpose value) {
    return CryptoKey_CryptoKeyPurpose_Name(value);
  }
  static inline bool CryptoKeyPurpose_Parse(const ::std::string& name,
      CryptoKeyPurpose* value) {
    return CryptoKey_CryptoKeyPurpose_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // map<string, string> labels = 10;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 10;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // .google.cloud.kms.v1.CryptoKeyVersion primary = 2;
  bool has_primary() const;
  void clear_primary();
  static const int kPrimaryFieldNumber = 2;
  private:
  const ::google::cloud::kms::v1::CryptoKeyVersion& _internal_primary() const;
  public:
  const ::google::cloud::kms::v1::CryptoKeyVersion& primary() const;
  ::google::cloud::kms::v1::CryptoKeyVersion* release_primary();
  ::google::cloud::kms::v1::CryptoKeyVersion* mutable_primary();
  void set_allocated_primary(::google::cloud::kms::v1::CryptoKeyVersion* primary);
  void unsafe_arena_set_allocated_primary(
      ::google::cloud::kms::v1::CryptoKeyVersion* primary);
  ::google::cloud::kms::v1::CryptoKeyVersion* unsafe_arena_release_primary();

  // .google.protobuf.Timestamp create_time = 5;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 5;
  private:
  const ::google::protobuf::Timestamp& _internal_create_time() const;
  public:
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);
  void unsafe_arena_set_allocated_create_time(
      ::google::protobuf::Timestamp* create_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp next_rotation_time = 7;
  bool has_next_rotation_time() const;
  void clear_next_rotation_time();
  static const int kNextRotationTimeFieldNumber = 7;
  private:
  const ::google::protobuf::Timestamp& _internal_next_rotation_time() const;
  public:
  const ::google::protobuf::Timestamp& next_rotation_time() const;
  ::google::protobuf::Timestamp* release_next_rotation_time();
  ::google::protobuf::Timestamp* mutable_next_rotation_time();
  void set_allocated_next_rotation_time(::google::protobuf::Timestamp* next_rotation_time);
  void unsafe_arena_set_allocated_next_rotation_time(
      ::google::protobuf::Timestamp* next_rotation_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_next_rotation_time();

  // .google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose purpose = 3;
  void clear_purpose();
  static const int kPurposeFieldNumber = 3;
  ::google::cloud::kms::v1::CryptoKey_CryptoKeyPurpose purpose() const;
  void set_purpose(::google::cloud::kms::v1::CryptoKey_CryptoKeyPurpose value);

  // .google.protobuf.Duration rotation_period = 8;
  bool has_rotation_period() const;
  void clear_rotation_period();
  static const int kRotationPeriodFieldNumber = 8;
  private:
  const ::google::protobuf::Duration& _internal_rotation_period() const;
  public:
  const ::google::protobuf::Duration& rotation_period() const;
  ::google::protobuf::Duration* release_rotation_period();
  ::google::protobuf::Duration* mutable_rotation_period();
  void set_allocated_rotation_period(::google::protobuf::Duration* rotation_period);
  void unsafe_arena_set_allocated_rotation_period(
      ::google::protobuf::Duration* rotation_period);
  ::google::protobuf::Duration* unsafe_arena_release_rotation_period();

  void clear_rotation_schedule();
  RotationScheduleCase rotation_schedule_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.kms.v1.CryptoKey)
 private:
  void set_has_rotation_period();

  inline bool has_rotation_schedule() const;
  inline void clear_has_rotation_schedule();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::MapField<
      CryptoKey_LabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::cloud::kms::v1::CryptoKeyVersion* primary_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* next_rotation_time_;
  int purpose_;
  union RotationScheduleUnion {
    RotationScheduleUnion() {}
    ::google::protobuf::Duration* rotation_period_;
  } rotation_schedule_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CryptoKeyVersion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.kms.v1.CryptoKeyVersion) */ {
 public:
  CryptoKeyVersion();
  virtual ~CryptoKeyVersion();

  CryptoKeyVersion(const CryptoKeyVersion& from);

  inline CryptoKeyVersion& operator=(const CryptoKeyVersion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CryptoKeyVersion(CryptoKeyVersion&& from) noexcept
    : CryptoKeyVersion() {
    *this = ::std::move(from);
  }

  inline CryptoKeyVersion& operator=(CryptoKeyVersion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CryptoKeyVersion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CryptoKeyVersion* internal_default_instance() {
    return reinterpret_cast<const CryptoKeyVersion*>(
               &_CryptoKeyVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(CryptoKeyVersion* other);
  void Swap(CryptoKeyVersion* other);
  friend void swap(CryptoKeyVersion& a, CryptoKeyVersion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CryptoKeyVersion* New() const final {
    return CreateMaybeMessage<CryptoKeyVersion>(NULL);
  }

  CryptoKeyVersion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CryptoKeyVersion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CryptoKeyVersion& from);
  void MergeFrom(const CryptoKeyVersion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CryptoKeyVersion* other);
  protected:
  explicit CryptoKeyVersion(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CryptoKeyVersion_CryptoKeyVersionState CryptoKeyVersionState;
  static const CryptoKeyVersionState CRYPTO_KEY_VERSION_STATE_UNSPECIFIED =
    CryptoKeyVersion_CryptoKeyVersionState_CRYPTO_KEY_VERSION_STATE_UNSPECIFIED;
  static const CryptoKeyVersionState ENABLED =
    CryptoKeyVersion_CryptoKeyVersionState_ENABLED;
  static const CryptoKeyVersionState DISABLED =
    CryptoKeyVersion_CryptoKeyVersionState_DISABLED;
  static const CryptoKeyVersionState DESTROYED =
    CryptoKeyVersion_CryptoKeyVersionState_DESTROYED;
  static const CryptoKeyVersionState DESTROY_SCHEDULED =
    CryptoKeyVersion_CryptoKeyVersionState_DESTROY_SCHEDULED;
  static inline bool CryptoKeyVersionState_IsValid(int value) {
    return CryptoKeyVersion_CryptoKeyVersionState_IsValid(value);
  }
  static const CryptoKeyVersionState CryptoKeyVersionState_MIN =
    CryptoKeyVersion_CryptoKeyVersionState_CryptoKeyVersionState_MIN;
  static const CryptoKeyVersionState CryptoKeyVersionState_MAX =
    CryptoKeyVersion_CryptoKeyVersionState_CryptoKeyVersionState_MAX;
  static const int CryptoKeyVersionState_ARRAYSIZE =
    CryptoKeyVersion_CryptoKeyVersionState_CryptoKeyVersionState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CryptoKeyVersionState_descriptor() {
    return CryptoKeyVersion_CryptoKeyVersionState_descriptor();
  }
  static inline const ::std::string& CryptoKeyVersionState_Name(CryptoKeyVersionState value) {
    return CryptoKeyVersion_CryptoKeyVersionState_Name(value);
  }
  static inline bool CryptoKeyVersionState_Parse(const ::std::string& name,
      CryptoKeyVersionState* value) {
    return CryptoKeyVersion_CryptoKeyVersionState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // .google.protobuf.Timestamp create_time = 4;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 4;
  private:
  const ::google::protobuf::Timestamp& _internal_create_time() const;
  public:
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);
  void unsafe_arena_set_allocated_create_time(
      ::google::protobuf::Timestamp* create_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp destroy_time = 5;
  bool has_destroy_time() const;
  void clear_destroy_time();
  static const int kDestroyTimeFieldNumber = 5;
  private:
  const ::google::protobuf::Timestamp& _internal_destroy_time() const;
  public:
  const ::google::protobuf::Timestamp& destroy_time() const;
  ::google::protobuf::Timestamp* release_destroy_time();
  ::google::protobuf::Timestamp* mutable_destroy_time();
  void set_allocated_destroy_time(::google::protobuf::Timestamp* destroy_time);
  void unsafe_arena_set_allocated_destroy_time(
      ::google::protobuf::Timestamp* destroy_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_destroy_time();

  // .google.protobuf.Timestamp destroy_event_time = 6;
  bool has_destroy_event_time() const;
  void clear_destroy_event_time();
  static const int kDestroyEventTimeFieldNumber = 6;
  private:
  const ::google::protobuf::Timestamp& _internal_destroy_event_time() const;
  public:
  const ::google::protobuf::Timestamp& destroy_event_time() const;
  ::google::protobuf::Timestamp* release_destroy_event_time();
  ::google::protobuf::Timestamp* mutable_destroy_event_time();
  void set_allocated_destroy_event_time(::google::protobuf::Timestamp* destroy_event_time);
  void unsafe_arena_set_allocated_destroy_event_time(
      ::google::protobuf::Timestamp* destroy_event_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_destroy_event_time();

  // .google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState state = 3;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::cloud::kms::v1::CryptoKeyVersion_CryptoKeyVersionState state() const;
  void set_state(::google::cloud::kms::v1::CryptoKeyVersion_CryptoKeyVersionState value);

  // @@protoc_insertion_point(class_scope:google.cloud.kms.v1.CryptoKeyVersion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* destroy_time_;
  ::google::protobuf::Timestamp* destroy_event_time_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyRing

// string name = 1;
inline void KeyRing::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& KeyRing::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.kms.v1.KeyRing.name)
  return name_.Get();
}
inline void KeyRing::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.kms.v1.KeyRing.name)
}
#if LANG_CXX11
inline void KeyRing::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.kms.v1.KeyRing.name)
}
#endif
inline void KeyRing::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.kms.v1.KeyRing.name)
}
inline void KeyRing::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.kms.v1.KeyRing.name)
}
inline ::std::string* KeyRing::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.kms.v1.KeyRing.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* KeyRing::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.kms.v1.KeyRing.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void KeyRing::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.kms.v1.KeyRing.name)
}
inline ::std::string* KeyRing::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.kms.v1.KeyRing.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void KeyRing::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.kms.v1.KeyRing.name)
}

// .google.protobuf.Timestamp create_time = 2;
inline bool KeyRing::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& KeyRing::_internal_create_time() const {
  return *create_time_;
}
inline const ::google::protobuf::Timestamp& KeyRing::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.cloud.kms.v1.KeyRing.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* KeyRing::release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.kms.v1.KeyRing.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* KeyRing::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.kms.v1.KeyRing.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* KeyRing::mutable_create_time() {
  
  if (create_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.kms.v1.KeyRing.create_time)
  return create_time_;
}
inline void KeyRing::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.kms.v1.KeyRing.create_time)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CryptoKey

// string name = 1;
inline void CryptoKey::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CryptoKey::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.kms.v1.CryptoKey.name)
  return name_.Get();
}
inline void CryptoKey::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.kms.v1.CryptoKey.name)
}
#if LANG_CXX11
inline void CryptoKey::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.kms.v1.CryptoKey.name)
}
#endif
inline void CryptoKey::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.kms.v1.CryptoKey.name)
}
inline void CryptoKey::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.kms.v1.CryptoKey.name)
}
inline ::std::string* CryptoKey::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.kms.v1.CryptoKey.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CryptoKey::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.kms.v1.CryptoKey.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CryptoKey::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.kms.v1.CryptoKey.name)
}
inline ::std::string* CryptoKey::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.kms.v1.CryptoKey.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CryptoKey::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.kms.v1.CryptoKey.name)
}

// .google.cloud.kms.v1.CryptoKeyVersion primary = 2;
inline bool CryptoKey::has_primary() const {
  return this != internal_default_instance() && primary_ != NULL;
}
inline void CryptoKey::clear_primary() {
  if (GetArenaNoVirtual() == NULL && primary_ != NULL) {
    delete primary_;
  }
  primary_ = NULL;
}
inline const ::google::cloud::kms::v1::CryptoKeyVersion& CryptoKey::_internal_primary() const {
  return *primary_;
}
inline const ::google::cloud::kms::v1::CryptoKeyVersion& CryptoKey::primary() const {
  const ::google::cloud::kms::v1::CryptoKeyVersion* p = primary_;
  // @@protoc_insertion_point(field_get:google.cloud.kms.v1.CryptoKey.primary)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::kms::v1::CryptoKeyVersion*>(
      &::google::cloud::kms::v1::_CryptoKeyVersion_default_instance_);
}
inline ::google::cloud::kms::v1::CryptoKeyVersion* CryptoKey::release_primary() {
  // @@protoc_insertion_point(field_release:google.cloud.kms.v1.CryptoKey.primary)
  
  ::google::cloud::kms::v1::CryptoKeyVersion* temp = primary_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  primary_ = NULL;
  return temp;
}
inline ::google::cloud::kms::v1::CryptoKeyVersion* CryptoKey::unsafe_arena_release_primary() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.kms.v1.CryptoKey.primary)
  
  ::google::cloud::kms::v1::CryptoKeyVersion* temp = primary_;
  primary_ = NULL;
  return temp;
}
inline ::google::cloud::kms::v1::CryptoKeyVersion* CryptoKey::mutable_primary() {
  
  if (primary_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::kms::v1::CryptoKeyVersion>(GetArenaNoVirtual());
    primary_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.kms.v1.CryptoKey.primary)
  return primary_;
}
inline void CryptoKey::set_allocated_primary(::google::cloud::kms::v1::CryptoKeyVersion* primary) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete primary_;
  }
  if (primary) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(primary);
    if (message_arena != submessage_arena) {
      primary = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, primary, submessage_arena);
    }
    
  } else {
    
  }
  primary_ = primary;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.kms.v1.CryptoKey.primary)
}

// .google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose purpose = 3;
inline void CryptoKey::clear_purpose() {
  purpose_ = 0;
}
inline ::google::cloud::kms::v1::CryptoKey_CryptoKeyPurpose CryptoKey::purpose() const {
  // @@protoc_insertion_point(field_get:google.cloud.kms.v1.CryptoKey.purpose)
  return static_cast< ::google::cloud::kms::v1::CryptoKey_CryptoKeyPurpose >(purpose_);
}
inline void CryptoKey::set_purpose(::google::cloud::kms::v1::CryptoKey_CryptoKeyPurpose value) {
  
  purpose_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.kms.v1.CryptoKey.purpose)
}

// .google.protobuf.Timestamp create_time = 5;
inline bool CryptoKey::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& CryptoKey::_internal_create_time() const {
  return *create_time_;
}
inline const ::google::protobuf::Timestamp& CryptoKey::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.cloud.kms.v1.CryptoKey.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* CryptoKey::release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.kms.v1.CryptoKey.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* CryptoKey::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.kms.v1.CryptoKey.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* CryptoKey::mutable_create_time() {
  
  if (create_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.kms.v1.CryptoKey.create_time)
  return create_time_;
}
inline void CryptoKey::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.kms.v1.CryptoKey.create_time)
}

// .google.protobuf.Timestamp next_rotation_time = 7;
inline bool CryptoKey::has_next_rotation_time() const {
  return this != internal_default_instance() && next_rotation_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& CryptoKey::_internal_next_rotation_time() const {
  return *next_rotation_time_;
}
inline const ::google::protobuf::Timestamp& CryptoKey::next_rotation_time() const {
  const ::google::protobuf::Timestamp* p = next_rotation_time_;
  // @@protoc_insertion_point(field_get:google.cloud.kms.v1.CryptoKey.next_rotation_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* CryptoKey::release_next_rotation_time() {
  // @@protoc_insertion_point(field_release:google.cloud.kms.v1.CryptoKey.next_rotation_time)
  
  ::google::protobuf::Timestamp* temp = next_rotation_time_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  next_rotation_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* CryptoKey::unsafe_arena_release_next_rotation_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.kms.v1.CryptoKey.next_rotation_time)
  
  ::google::protobuf::Timestamp* temp = next_rotation_time_;
  next_rotation_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* CryptoKey::mutable_next_rotation_time() {
  
  if (next_rotation_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    next_rotation_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.kms.v1.CryptoKey.next_rotation_time)
  return next_rotation_time_;
}
inline void CryptoKey::set_allocated_next_rotation_time(::google::protobuf::Timestamp* next_rotation_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(next_rotation_time_);
  }
  if (next_rotation_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(next_rotation_time)->GetArena();
    if (message_arena != submessage_arena) {
      next_rotation_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, next_rotation_time, submessage_arena);
    }
    
  } else {
    
  }
  next_rotation_time_ = next_rotation_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.kms.v1.CryptoKey.next_rotation_time)
}

// .google.protobuf.Duration rotation_period = 8;
inline bool CryptoKey::has_rotation_period() const {
  return rotation_schedule_case() == kRotationPeriod;
}
inline void CryptoKey::set_has_rotation_period() {
  _oneof_case_[0] = kRotationPeriod;
}
inline const ::google::protobuf::Duration& CryptoKey::_internal_rotation_period() const {
  return *rotation_schedule_.rotation_period_;
}
inline ::google::protobuf::Duration* CryptoKey::release_rotation_period() {
  // @@protoc_insertion_point(field_release:google.cloud.kms.v1.CryptoKey.rotation_period)
  if (has_rotation_period()) {
    clear_has_rotation_schedule();
      ::google::protobuf::Duration* temp = rotation_schedule_.rotation_period_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    rotation_schedule_.rotation_period_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::protobuf::Duration& CryptoKey::rotation_period() const {
  // @@protoc_insertion_point(field_get:google.cloud.kms.v1.CryptoKey.rotation_period)
  return has_rotation_period()
      ? *rotation_schedule_.rotation_period_
      : *reinterpret_cast< ::google::protobuf::Duration*>(&::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* CryptoKey::unsafe_arena_release_rotation_period() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.kms.v1.CryptoKey.rotation_period)
  if (has_rotation_period()) {
    clear_has_rotation_schedule();
    ::google::protobuf::Duration* temp = rotation_schedule_.rotation_period_;
    rotation_schedule_.rotation_period_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CryptoKey::unsafe_arena_set_allocated_rotation_period(::google::protobuf::Duration* rotation_period) {
  clear_rotation_schedule();
  if (rotation_period) {
    set_has_rotation_period();
    rotation_schedule_.rotation_period_ = rotation_period;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.kms.v1.CryptoKey.rotation_period)
}
inline ::google::protobuf::Duration* CryptoKey::mutable_rotation_period() {
  if (!has_rotation_period()) {
    clear_rotation_schedule();
    set_has_rotation_period();
    rotation_schedule_.rotation_period_ = CreateMaybeMessage< ::google::protobuf::Duration >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.kms.v1.CryptoKey.rotation_period)
  return rotation_schedule_.rotation_period_;
}

// map<string, string> labels = 10;
inline int CryptoKey::labels_size() const {
  return labels_.size();
}
inline void CryptoKey::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
CryptoKey::labels() const {
  // @@protoc_insertion_point(field_map:google.cloud.kms.v1.CryptoKey.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
CryptoKey::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.kms.v1.CryptoKey.labels)
  return labels_.MutableMap();
}

inline bool CryptoKey::has_rotation_schedule() const {
  return rotation_schedule_case() != ROTATION_SCHEDULE_NOT_SET;
}
inline void CryptoKey::clear_has_rotation_schedule() {
  _oneof_case_[0] = ROTATION_SCHEDULE_NOT_SET;
}
inline CryptoKey::RotationScheduleCase CryptoKey::rotation_schedule_case() const {
  return CryptoKey::RotationScheduleCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CryptoKeyVersion

// string name = 1;
inline void CryptoKeyVersion::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CryptoKeyVersion::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.kms.v1.CryptoKeyVersion.name)
  return name_.Get();
}
inline void CryptoKeyVersion::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.kms.v1.CryptoKeyVersion.name)
}
#if LANG_CXX11
inline void CryptoKeyVersion::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.kms.v1.CryptoKeyVersion.name)
}
#endif
inline void CryptoKeyVersion::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.kms.v1.CryptoKeyVersion.name)
}
inline void CryptoKeyVersion::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.kms.v1.CryptoKeyVersion.name)
}
inline ::std::string* CryptoKeyVersion::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.kms.v1.CryptoKeyVersion.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CryptoKeyVersion::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.kms.v1.CryptoKeyVersion.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CryptoKeyVersion::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.kms.v1.CryptoKeyVersion.name)
}
inline ::std::string* CryptoKeyVersion::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.kms.v1.CryptoKeyVersion.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CryptoKeyVersion::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.kms.v1.CryptoKeyVersion.name)
}

// .google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState state = 3;
inline void CryptoKeyVersion::clear_state() {
  state_ = 0;
}
inline ::google::cloud::kms::v1::CryptoKeyVersion_CryptoKeyVersionState CryptoKeyVersion::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.kms.v1.CryptoKeyVersion.state)
  return static_cast< ::google::cloud::kms::v1::CryptoKeyVersion_CryptoKeyVersionState >(state_);
}
inline void CryptoKeyVersion::set_state(::google::cloud::kms::v1::CryptoKeyVersion_CryptoKeyVersionState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.kms.v1.CryptoKeyVersion.state)
}

// .google.protobuf.Timestamp create_time = 4;
inline bool CryptoKeyVersion::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& CryptoKeyVersion::_internal_create_time() const {
  return *create_time_;
}
inline const ::google::protobuf::Timestamp& CryptoKeyVersion::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.cloud.kms.v1.CryptoKeyVersion.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* CryptoKeyVersion::release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.kms.v1.CryptoKeyVersion.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* CryptoKeyVersion::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.kms.v1.CryptoKeyVersion.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* CryptoKeyVersion::mutable_create_time() {
  
  if (create_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.kms.v1.CryptoKeyVersion.create_time)
  return create_time_;
}
inline void CryptoKeyVersion::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.kms.v1.CryptoKeyVersion.create_time)
}

// .google.protobuf.Timestamp destroy_time = 5;
inline bool CryptoKeyVersion::has_destroy_time() const {
  return this != internal_default_instance() && destroy_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& CryptoKeyVersion::_internal_destroy_time() const {
  return *destroy_time_;
}
inline const ::google::protobuf::Timestamp& CryptoKeyVersion::destroy_time() const {
  const ::google::protobuf::Timestamp* p = destroy_time_;
  // @@protoc_insertion_point(field_get:google.cloud.kms.v1.CryptoKeyVersion.destroy_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* CryptoKeyVersion::release_destroy_time() {
  // @@protoc_insertion_point(field_release:google.cloud.kms.v1.CryptoKeyVersion.destroy_time)
  
  ::google::protobuf::Timestamp* temp = destroy_time_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  destroy_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* CryptoKeyVersion::unsafe_arena_release_destroy_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.kms.v1.CryptoKeyVersion.destroy_time)
  
  ::google::protobuf::Timestamp* temp = destroy_time_;
  destroy_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* CryptoKeyVersion::mutable_destroy_time() {
  
  if (destroy_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    destroy_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.kms.v1.CryptoKeyVersion.destroy_time)
  return destroy_time_;
}
inline void CryptoKeyVersion::set_allocated_destroy_time(::google::protobuf::Timestamp* destroy_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(destroy_time_);
  }
  if (destroy_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(destroy_time)->GetArena();
    if (message_arena != submessage_arena) {
      destroy_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, destroy_time, submessage_arena);
    }
    
  } else {
    
  }
  destroy_time_ = destroy_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.kms.v1.CryptoKeyVersion.destroy_time)
}

// .google.protobuf.Timestamp destroy_event_time = 6;
inline bool CryptoKeyVersion::has_destroy_event_time() const {
  return this != internal_default_instance() && destroy_event_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& CryptoKeyVersion::_internal_destroy_event_time() const {
  return *destroy_event_time_;
}
inline const ::google::protobuf::Timestamp& CryptoKeyVersion::destroy_event_time() const {
  const ::google::protobuf::Timestamp* p = destroy_event_time_;
  // @@protoc_insertion_point(field_get:google.cloud.kms.v1.CryptoKeyVersion.destroy_event_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* CryptoKeyVersion::release_destroy_event_time() {
  // @@protoc_insertion_point(field_release:google.cloud.kms.v1.CryptoKeyVersion.destroy_event_time)
  
  ::google::protobuf::Timestamp* temp = destroy_event_time_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  destroy_event_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* CryptoKeyVersion::unsafe_arena_release_destroy_event_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.kms.v1.CryptoKeyVersion.destroy_event_time)
  
  ::google::protobuf::Timestamp* temp = destroy_event_time_;
  destroy_event_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* CryptoKeyVersion::mutable_destroy_event_time() {
  
  if (destroy_event_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    destroy_event_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.kms.v1.CryptoKeyVersion.destroy_event_time)
  return destroy_event_time_;
}
inline void CryptoKeyVersion::set_allocated_destroy_event_time(::google::protobuf::Timestamp* destroy_event_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(destroy_event_time_);
  }
  if (destroy_event_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(destroy_event_time)->GetArena();
    if (message_arena != submessage_arena) {
      destroy_event_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, destroy_event_time, submessage_arena);
    }
    
  } else {
    
  }
  destroy_event_time_ = destroy_event_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.kms.v1.CryptoKeyVersion.destroy_event_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace kms
}  // namespace cloud
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::cloud::kms::v1::CryptoKey_CryptoKeyPurpose> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::kms::v1::CryptoKey_CryptoKeyPurpose>() {
  return ::google::cloud::kms::v1::CryptoKey_CryptoKeyPurpose_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::kms::v1::CryptoKeyVersion_CryptoKeyVersionState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::kms::v1::CryptoKeyVersion_CryptoKeyVersionState>() {
  return ::google::cloud::kms::v1::CryptoKeyVersion_CryptoKeyVersionState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fcloud_2fkms_2fv1_2fresources_2eproto
