// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/kms/v1/resources.proto

#include "google/cloud/kms/v1/resources.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CryptoKey_LabelsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CryptoKeyVersion;
}  // namespace protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto
namespace protobuf_google_2fprotobuf_2fduration_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fduration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Duration;
}  // namespace protobuf_google_2fprotobuf_2fduration_2eproto
namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto
namespace google {
namespace cloud {
namespace kms {
namespace v1 {
class KeyRingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeyRing>
      _instance;
} _KeyRing_default_instance_;
class CryptoKey_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CryptoKey_LabelsEntry_DoNotUse>
      _instance;
} _CryptoKey_LabelsEntry_DoNotUse_default_instance_;
class CryptoKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CryptoKey>
      _instance;
  const ::google::protobuf::Duration* rotation_period_;
} _CryptoKey_default_instance_;
class CryptoKeyVersionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CryptoKeyVersion>
      _instance;
} _CryptoKeyVersion_default_instance_;
}  // namespace v1
}  // namespace kms
}  // namespace cloud
}  // namespace google
namespace protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto {
static void InitDefaultsKeyRing() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::kms::v1::_KeyRing_default_instance_;
    new (ptr) ::google::cloud::kms::v1::KeyRing();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::kms::v1::KeyRing::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_KeyRing =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsKeyRing}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsCryptoKey_LabelsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::kms::v1::_CryptoKey_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::google::cloud::kms::v1::CryptoKey_LabelsEntry_DoNotUse();
  }
  ::google::cloud::kms::v1::CryptoKey_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CryptoKey_LabelsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCryptoKey_LabelsEntry_DoNotUse}, {}};

static void InitDefaultsCryptoKey() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::kms::v1::_CryptoKey_default_instance_;
    new (ptr) ::google::cloud::kms::v1::CryptoKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::kms::v1::CryptoKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_CryptoKey =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsCryptoKey}, {
      &protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_CryptoKeyVersion.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_google_2fprotobuf_2fduration_2eproto::scc_info_Duration.base,
      &protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_CryptoKey_LabelsEntry_DoNotUse.base,}};

static void InitDefaultsCryptoKeyVersion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::kms::v1::_CryptoKeyVersion_default_instance_;
    new (ptr) ::google::cloud::kms::v1::CryptoKeyVersion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::kms::v1::CryptoKeyVersion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CryptoKeyVersion =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCryptoKeyVersion}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_KeyRing.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CryptoKey_LabelsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CryptoKey.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CryptoKeyVersion.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::KeyRing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::KeyRing, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::KeyRing, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKey_LabelsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKey_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKey_LabelsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKey_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKey, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKey, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKey, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKey, primary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKey, purpose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKey, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKey, next_rotation_time_),
  offsetof(::google::cloud::kms::v1::CryptoKeyDefaultTypeInternal, rotation_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKey, labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKey, rotation_schedule_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKeyVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKeyVersion, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKeyVersion, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKeyVersion, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKeyVersion, destroy_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKeyVersion, destroy_event_time_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::cloud::kms::v1::KeyRing)},
  { 7, 14, sizeof(::google::cloud::kms::v1::CryptoKey_LabelsEntry_DoNotUse)},
  { 16, -1, sizeof(::google::cloud::kms::v1::CryptoKey)},
  { 29, -1, sizeof(::google::cloud::kms::v1::CryptoKeyVersion)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::kms::v1::_KeyRing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::kms::v1::_CryptoKey_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::kms::v1::_CryptoKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::kms::v1::_CryptoKeyVersion_default_instance_),
};

static void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "google/cloud/kms/v1/resources.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

static void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

static void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n#google/cloud/kms/v1/resources.proto\022\023g"
      "oogle.cloud.kms.v1\032\034google/api/annotatio"
      "ns.proto\032\036google/protobuf/duration.proto"
      "\032\037google/protobuf/timestamp.proto\"H\n\007Key"
      "Ring\022\014\n\004name\030\001 \001(\t\022/\n\013create_time\030\002 \001(\0132"
      "\032.google.protobuf.Timestamp\"\377\003\n\tCryptoKe"
      "y\022\014\n\004name\030\001 \001(\t\0226\n\007primary\030\002 \001(\0132%.googl"
      "e.cloud.kms.v1.CryptoKeyVersion\022@\n\007purpo"
      "se\030\003 \001(\0162/.google.cloud.kms.v1.CryptoKey"
      ".CryptoKeyPurpose\022/\n\013create_time\030\005 \001(\0132\032"
      ".google.protobuf.Timestamp\0226\n\022next_rotat"
      "ion_time\030\007 \001(\0132\032.google.protobuf.Timesta"
      "mp\0224\n\017rotation_period\030\010 \001(\0132\031.google.pro"
      "tobuf.DurationH\000\022:\n\006labels\030\n \003(\0132*.googl"
      "e.cloud.kms.v1.CryptoKey.LabelsEntry\032-\n\013"
      "LabelsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:"
      "\0028\001\"K\n\020CryptoKeyPurpose\022\"\n\036CRYPTO_KEY_PU"
      "RPOSE_UNSPECIFIED\020\000\022\023\n\017ENCRYPT_DECRYPT\020\001"
      "B\023\n\021rotation_schedule\"\214\003\n\020CryptoKeyVersi"
      "on\022\014\n\004name\030\001 \001(\t\022J\n\005state\030\003 \001(\0162;.google"
      ".cloud.kms.v1.CryptoKeyVersion.CryptoKey"
      "VersionState\022/\n\013create_time\030\004 \001(\0132\032.goog"
      "le.protobuf.Timestamp\0220\n\014destroy_time\030\005 "
      "\001(\0132\032.google.protobuf.Timestamp\0226\n\022destr"
      "oy_event_time\030\006 \001(\0132\032.google.protobuf.Ti"
      "mestamp\"\202\001\n\025CryptoKeyVersionState\022(\n$CRY"
      "PTO_KEY_VERSION_STATE_UNSPECIFIED\020\000\022\013\n\007E"
      "NABLED\020\001\022\014\n\010DISABLED\020\002\022\r\n\tDESTROYED\020\003\022\025\n"
      "\021DESTROY_SCHEDULED\020\004B\225\001\n\027com.google.clou"
      "d.kms.v1B\021KmsResourcesProtoP\001Z6google.go"
      "lang.org/genproto/googleapis/cloud/kms/v"
      "1;kms\370\001\001\252\002\023Google.Cloud.Kms.V1\312\002\023Google\\"
      "Cloud\\Kms\\V1b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1300);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/cloud/kms/v1/resources.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto
namespace google {
namespace cloud {
namespace kms {
namespace v1 {
const ::google::protobuf::EnumDescriptor* CryptoKey_CryptoKeyPurpose_descriptor() {
  protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::file_level_enum_descriptors[0];
}
bool CryptoKey_CryptoKeyPurpose_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CryptoKey_CryptoKeyPurpose CryptoKey::CRYPTO_KEY_PURPOSE_UNSPECIFIED;
const CryptoKey_CryptoKeyPurpose CryptoKey::ENCRYPT_DECRYPT;
const CryptoKey_CryptoKeyPurpose CryptoKey::CryptoKeyPurpose_MIN;
const CryptoKey_CryptoKeyPurpose CryptoKey::CryptoKeyPurpose_MAX;
const int CryptoKey::CryptoKeyPurpose_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CryptoKeyVersion_CryptoKeyVersionState_descriptor() {
  protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::file_level_enum_descriptors[1];
}
bool CryptoKeyVersion_CryptoKeyVersionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CryptoKeyVersion_CryptoKeyVersionState CryptoKeyVersion::CRYPTO_KEY_VERSION_STATE_UNSPECIFIED;
const CryptoKeyVersion_CryptoKeyVersionState CryptoKeyVersion::ENABLED;
const CryptoKeyVersion_CryptoKeyVersionState CryptoKeyVersion::DISABLED;
const CryptoKeyVersion_CryptoKeyVersionState CryptoKeyVersion::DESTROYED;
const CryptoKeyVersion_CryptoKeyVersionState CryptoKeyVersion::DESTROY_SCHEDULED;
const CryptoKeyVersion_CryptoKeyVersionState CryptoKeyVersion::CryptoKeyVersionState_MIN;
const CryptoKeyVersion_CryptoKeyVersionState CryptoKeyVersion::CryptoKeyVersionState_MAX;
const int CryptoKeyVersion::CryptoKeyVersionState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void KeyRing::InitAsDefaultInstance() {
  ::google::cloud::kms::v1::_KeyRing_default_instance_._instance.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void KeyRing::unsafe_arena_set_allocated_create_time(
    ::google::protobuf::Timestamp* create_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete create_time_;
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.kms.v1.KeyRing.create_time)
}
void KeyRing::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyRing::kNameFieldNumber;
const int KeyRing::kCreateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyRing::KeyRing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_KeyRing.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.kms.v1.KeyRing)
}
KeyRing::KeyRing(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_KeyRing.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.kms.v1.KeyRing)
}
KeyRing::KeyRing(const KeyRing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.kms.v1.KeyRing)
}

void KeyRing::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_time_ = NULL;
}

KeyRing::~KeyRing() {
  // @@protoc_insertion_point(destructor:google.cloud.kms.v1.KeyRing)
  SharedDtor();
}

void KeyRing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete create_time_;
}

void KeyRing::ArenaDtor(void* object) {
  KeyRing* _this = reinterpret_cast< KeyRing* >(object);
  (void)_this;
}
void KeyRing::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void KeyRing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KeyRing::descriptor() {
  ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyRing& KeyRing::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_KeyRing.base);
  return *internal_default_instance();
}


void KeyRing::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.kms.v1.KeyRing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  _internal_metadata_.Clear();
}

bool KeyRing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.kms.v1.KeyRing)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.kms.v1.KeyRing.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.kms.v1.KeyRing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.kms.v1.KeyRing)
  return false;
#undef DO_
}

void KeyRing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.kms.v1.KeyRing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.kms.v1.KeyRing.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.protobuf.Timestamp create_time = 2;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_create_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.kms.v1.KeyRing)
}

::google::protobuf::uint8* KeyRing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.kms.v1.KeyRing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.kms.v1.KeyRing.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.protobuf.Timestamp create_time = 2;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_create_time(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.kms.v1.KeyRing)
  return target;
}

size_t KeyRing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.kms.v1.KeyRing)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.protobuf.Timestamp create_time = 2;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyRing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.kms.v1.KeyRing)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyRing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyRing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.kms.v1.KeyRing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.kms.v1.KeyRing)
    MergeFrom(*source);
  }
}

void KeyRing::MergeFrom(const KeyRing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.kms.v1.KeyRing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
}

void KeyRing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.kms.v1.KeyRing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyRing::CopyFrom(const KeyRing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.kms.v1.KeyRing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyRing::IsInitialized() const {
  return true;
}

void KeyRing::Swap(KeyRing* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    KeyRing* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void KeyRing::UnsafeArenaSwap(KeyRing* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void KeyRing::InternalSwap(KeyRing* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(create_time_, other->create_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KeyRing::GetMetadata() const {
  protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

CryptoKey_LabelsEntry_DoNotUse::CryptoKey_LabelsEntry_DoNotUse() {}
CryptoKey_LabelsEntry_DoNotUse::CryptoKey_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void CryptoKey_LabelsEntry_DoNotUse::MergeFrom(const CryptoKey_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata CryptoKey_LabelsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::file_level_metadata[1];
}
void CryptoKey_LabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void CryptoKey::InitAsDefaultInstance() {
  ::google::cloud::kms::v1::_CryptoKey_default_instance_._instance.get_mutable()->primary_ = const_cast< ::google::cloud::kms::v1::CryptoKeyVersion*>(
      ::google::cloud::kms::v1::CryptoKeyVersion::internal_default_instance());
  ::google::cloud::kms::v1::_CryptoKey_default_instance_._instance.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::cloud::kms::v1::_CryptoKey_default_instance_._instance.get_mutable()->next_rotation_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::cloud::kms::v1::_CryptoKey_default_instance_.rotation_period_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void CryptoKey::unsafe_arena_set_allocated_primary(
    ::google::cloud::kms::v1::CryptoKeyVersion* primary) {
  if (GetArenaNoVirtual() == NULL) {
    delete primary_;
  }
  primary_ = primary;
  if (primary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.kms.v1.CryptoKey.primary)
}
void CryptoKey::unsafe_arena_set_allocated_create_time(
    ::google::protobuf::Timestamp* create_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete create_time_;
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.kms.v1.CryptoKey.create_time)
}
void CryptoKey::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
}
void CryptoKey::unsafe_arena_set_allocated_next_rotation_time(
    ::google::protobuf::Timestamp* next_rotation_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete next_rotation_time_;
  }
  next_rotation_time_ = next_rotation_time;
  if (next_rotation_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.kms.v1.CryptoKey.next_rotation_time)
}
void CryptoKey::clear_next_rotation_time() {
  if (GetArenaNoVirtual() == NULL && next_rotation_time_ != NULL) {
    delete next_rotation_time_;
  }
  next_rotation_time_ = NULL;
}
void CryptoKey::set_allocated_rotation_period(::google::protobuf::Duration* rotation_period) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rotation_schedule();
  if (rotation_period) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(rotation_period)->GetArena();
    if (message_arena != submessage_arena) {
      rotation_period = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rotation_period, submessage_arena);
    }
    set_has_rotation_period();
    rotation_schedule_.rotation_period_ = rotation_period;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.kms.v1.CryptoKey.rotation_period)
}
void CryptoKey::clear_rotation_period() {
  if (has_rotation_period()) {
    if (GetArenaNoVirtual() == NULL) {
      delete rotation_schedule_.rotation_period_;
    }
    clear_has_rotation_schedule();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CryptoKey::kNameFieldNumber;
const int CryptoKey::kPrimaryFieldNumber;
const int CryptoKey::kPurposeFieldNumber;
const int CryptoKey::kCreateTimeFieldNumber;
const int CryptoKey::kNextRotationTimeFieldNumber;
const int CryptoKey::kRotationPeriodFieldNumber;
const int CryptoKey::kLabelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CryptoKey::CryptoKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_CryptoKey.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.kms.v1.CryptoKey)
}
CryptoKey::CryptoKey(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  labels_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_CryptoKey.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.kms.v1.CryptoKey)
}
CryptoKey::CryptoKey(const CryptoKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  if (from.has_primary()) {
    primary_ = new ::google::cloud::kms::v1::CryptoKeyVersion(*from.primary_);
  } else {
    primary_ = NULL;
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  if (from.has_next_rotation_time()) {
    next_rotation_time_ = new ::google::protobuf::Timestamp(*from.next_rotation_time_);
  } else {
    next_rotation_time_ = NULL;
  }
  purpose_ = from.purpose_;
  clear_has_rotation_schedule();
  switch (from.rotation_schedule_case()) {
    case kRotationPeriod: {
      mutable_rotation_period()->::google::protobuf::Duration::MergeFrom(from.rotation_period());
      break;
    }
    case ROTATION_SCHEDULE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.kms.v1.CryptoKey)
}

void CryptoKey::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&primary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&purpose_) -
      reinterpret_cast<char*>(&primary_)) + sizeof(purpose_));
  clear_has_rotation_schedule();
}

CryptoKey::~CryptoKey() {
  // @@protoc_insertion_point(destructor:google.cloud.kms.v1.CryptoKey)
  SharedDtor();
}

void CryptoKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete primary_;
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete next_rotation_time_;
  if (has_rotation_schedule()) {
    clear_rotation_schedule();
  }
}

void CryptoKey::ArenaDtor(void* object) {
  CryptoKey* _this = reinterpret_cast< CryptoKey* >(object);
  (void)_this;
}
void CryptoKey::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void CryptoKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CryptoKey::descriptor() {
  ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CryptoKey& CryptoKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_CryptoKey.base);
  return *internal_default_instance();
}


void CryptoKey::clear_rotation_schedule() {
// @@protoc_insertion_point(one_of_clear_start:google.cloud.kms.v1.CryptoKey)
  switch (rotation_schedule_case()) {
    case kRotationPeriod: {
      if (GetArenaNoVirtual() == NULL) {
        delete rotation_schedule_.rotation_period_;
      }
      break;
    }
    case ROTATION_SCHEDULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ROTATION_SCHEDULE_NOT_SET;
}


void CryptoKey::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.kms.v1.CryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && primary_ != NULL) {
    delete primary_;
  }
  primary_ = NULL;
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && next_rotation_time_ != NULL) {
    delete next_rotation_time_;
  }
  next_rotation_time_ = NULL;
  purpose_ = 0;
  clear_rotation_schedule();
  _internal_metadata_.Clear();
}

bool CryptoKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.kms.v1.CryptoKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.kms.v1.CryptoKey.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.kms.v1.CryptoKeyVersion primary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_primary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose purpose = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_purpose(static_cast< ::google::cloud::kms::v1::CryptoKey_CryptoKeyPurpose >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp next_rotation_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_next_rotation_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration rotation_period = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotation_period()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          CryptoKey_LabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              CryptoKey_LabelsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.kms.v1.CryptoKey.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.kms.v1.CryptoKey.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.kms.v1.CryptoKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.kms.v1.CryptoKey)
  return false;
#undef DO_
}

void CryptoKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.kms.v1.CryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.kms.v1.CryptoKey.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.cloud.kms.v1.CryptoKeyVersion primary = 2;
  if (this->has_primary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_primary(), output);
  }

  // .google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose purpose = 3;
  if (this->purpose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->purpose(), output);
  }

  // .google.protobuf.Timestamp create_time = 5;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_create_time(), output);
  }

  // .google.protobuf.Timestamp next_rotation_time = 7;
  if (this->has_next_rotation_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_next_rotation_time(), output);
  }

  // .google.protobuf.Duration rotation_period = 8;
  if (has_rotation_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_rotation_period(), output);
  }

  // map<string, string> labels = 10;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.cloud.kms.v1.CryptoKey.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.cloud.kms.v1.CryptoKey.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<CryptoKey_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<CryptoKey_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.kms.v1.CryptoKey)
}

::google::protobuf::uint8* CryptoKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.kms.v1.CryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.kms.v1.CryptoKey.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.cloud.kms.v1.CryptoKeyVersion primary = 2;
  if (this->has_primary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_primary(), deterministic, target);
  }

  // .google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose purpose = 3;
  if (this->purpose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->purpose(), target);
  }

  // .google.protobuf.Timestamp create_time = 5;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_create_time(), deterministic, target);
  }

  // .google.protobuf.Timestamp next_rotation_time = 7;
  if (this->has_next_rotation_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_next_rotation_time(), deterministic, target);
  }

  // .google.protobuf.Duration rotation_period = 8;
  if (has_rotation_period()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_rotation_period(), deterministic, target);
  }

  // map<string, string> labels = 10;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.cloud.kms.v1.CryptoKey.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.cloud.kms.v1.CryptoKey.LabelsEntry.value");
      }
    };

    if (deterministic &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<CryptoKey_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<CryptoKey_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.kms.v1.CryptoKey)
  return target;
}

size_t CryptoKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.kms.v1.CryptoKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> labels = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::std::unique_ptr<CryptoKey_LabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.cloud.kms.v1.CryptoKeyVersion primary = 2;
  if (this->has_primary()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *primary_);
  }

  // .google.protobuf.Timestamp create_time = 5;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.protobuf.Timestamp next_rotation_time = 7;
  if (this->has_next_rotation_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *next_rotation_time_);
  }

  // .google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose purpose = 3;
  if (this->purpose() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->purpose());
  }

  switch (rotation_schedule_case()) {
    // .google.protobuf.Duration rotation_period = 8;
    case kRotationPeriod: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rotation_schedule_.rotation_period_);
      break;
    }
    case ROTATION_SCHEDULE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CryptoKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.kms.v1.CryptoKey)
  GOOGLE_DCHECK_NE(&from, this);
  const CryptoKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CryptoKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.kms.v1.CryptoKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.kms.v1.CryptoKey)
    MergeFrom(*source);
  }
}

void CryptoKey::MergeFrom(const CryptoKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.kms.v1.CryptoKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.has_primary()) {
    mutable_primary()->::google::cloud::kms::v1::CryptoKeyVersion::MergeFrom(from.primary());
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_next_rotation_time()) {
    mutable_next_rotation_time()->::google::protobuf::Timestamp::MergeFrom(from.next_rotation_time());
  }
  if (from.purpose() != 0) {
    set_purpose(from.purpose());
  }
  switch (from.rotation_schedule_case()) {
    case kRotationPeriod: {
      mutable_rotation_period()->::google::protobuf::Duration::MergeFrom(from.rotation_period());
      break;
    }
    case ROTATION_SCHEDULE_NOT_SET: {
      break;
    }
  }
}

void CryptoKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.kms.v1.CryptoKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CryptoKey::CopyFrom(const CryptoKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.kms.v1.CryptoKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptoKey::IsInitialized() const {
  return true;
}

void CryptoKey::Swap(CryptoKey* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CryptoKey* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CryptoKey::UnsafeArenaSwap(CryptoKey* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CryptoKey::InternalSwap(CryptoKey* other) {
  using std::swap;
  labels_.Swap(&other->labels_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(primary_, other->primary_);
  swap(create_time_, other->create_time_);
  swap(next_rotation_time_, other->next_rotation_time_);
  swap(purpose_, other->purpose_);
  swap(rotation_schedule_, other->rotation_schedule_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CryptoKey::GetMetadata() const {
  protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CryptoKeyVersion::InitAsDefaultInstance() {
  ::google::cloud::kms::v1::_CryptoKeyVersion_default_instance_._instance.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::cloud::kms::v1::_CryptoKeyVersion_default_instance_._instance.get_mutable()->destroy_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::cloud::kms::v1::_CryptoKeyVersion_default_instance_._instance.get_mutable()->destroy_event_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void CryptoKeyVersion::unsafe_arena_set_allocated_create_time(
    ::google::protobuf::Timestamp* create_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete create_time_;
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.kms.v1.CryptoKeyVersion.create_time)
}
void CryptoKeyVersion::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
}
void CryptoKeyVersion::unsafe_arena_set_allocated_destroy_time(
    ::google::protobuf::Timestamp* destroy_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete destroy_time_;
  }
  destroy_time_ = destroy_time;
  if (destroy_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.kms.v1.CryptoKeyVersion.destroy_time)
}
void CryptoKeyVersion::clear_destroy_time() {
  if (GetArenaNoVirtual() == NULL && destroy_time_ != NULL) {
    delete destroy_time_;
  }
  destroy_time_ = NULL;
}
void CryptoKeyVersion::unsafe_arena_set_allocated_destroy_event_time(
    ::google::protobuf::Timestamp* destroy_event_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete destroy_event_time_;
  }
  destroy_event_time_ = destroy_event_time;
  if (destroy_event_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.kms.v1.CryptoKeyVersion.destroy_event_time)
}
void CryptoKeyVersion::clear_destroy_event_time() {
  if (GetArenaNoVirtual() == NULL && destroy_event_time_ != NULL) {
    delete destroy_event_time_;
  }
  destroy_event_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CryptoKeyVersion::kNameFieldNumber;
const int CryptoKeyVersion::kStateFieldNumber;
const int CryptoKeyVersion::kCreateTimeFieldNumber;
const int CryptoKeyVersion::kDestroyTimeFieldNumber;
const int CryptoKeyVersion::kDestroyEventTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CryptoKeyVersion::CryptoKeyVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_CryptoKeyVersion.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.kms.v1.CryptoKeyVersion)
}
CryptoKeyVersion::CryptoKeyVersion(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_CryptoKeyVersion.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.kms.v1.CryptoKeyVersion)
}
CryptoKeyVersion::CryptoKeyVersion(const CryptoKeyVersion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  if (from.has_destroy_time()) {
    destroy_time_ = new ::google::protobuf::Timestamp(*from.destroy_time_);
  } else {
    destroy_time_ = NULL;
  }
  if (from.has_destroy_event_time()) {
    destroy_event_time_ = new ::google::protobuf::Timestamp(*from.destroy_event_time_);
  } else {
    destroy_event_time_ = NULL;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.kms.v1.CryptoKeyVersion)
}

void CryptoKeyVersion::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&create_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&create_time_)) + sizeof(state_));
}

CryptoKeyVersion::~CryptoKeyVersion() {
  // @@protoc_insertion_point(destructor:google.cloud.kms.v1.CryptoKeyVersion)
  SharedDtor();
}

void CryptoKeyVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete destroy_time_;
  if (this != internal_default_instance()) delete destroy_event_time_;
}

void CryptoKeyVersion::ArenaDtor(void* object) {
  CryptoKeyVersion* _this = reinterpret_cast< CryptoKeyVersion* >(object);
  (void)_this;
}
void CryptoKeyVersion::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void CryptoKeyVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CryptoKeyVersion::descriptor() {
  ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CryptoKeyVersion& CryptoKeyVersion::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_CryptoKeyVersion.base);
  return *internal_default_instance();
}


void CryptoKeyVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.kms.v1.CryptoKeyVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && destroy_time_ != NULL) {
    delete destroy_time_;
  }
  destroy_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && destroy_event_time_ != NULL) {
    delete destroy_event_time_;
  }
  destroy_event_time_ = NULL;
  state_ = 0;
  _internal_metadata_.Clear();
}

bool CryptoKeyVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.kms.v1.CryptoKeyVersion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.kms.v1.CryptoKeyVersion.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::google::cloud::kms::v1::CryptoKeyVersion_CryptoKeyVersionState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp destroy_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destroy_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp destroy_event_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destroy_event_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.kms.v1.CryptoKeyVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.kms.v1.CryptoKeyVersion)
  return false;
#undef DO_
}

void CryptoKeyVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.kms.v1.CryptoKeyVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.kms.v1.CryptoKeyVersion.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState state = 3;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // .google.protobuf.Timestamp create_time = 4;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_create_time(), output);
  }

  // .google.protobuf.Timestamp destroy_time = 5;
  if (this->has_destroy_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_destroy_time(), output);
  }

  // .google.protobuf.Timestamp destroy_event_time = 6;
  if (this->has_destroy_event_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_destroy_event_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.kms.v1.CryptoKeyVersion)
}

::google::protobuf::uint8* CryptoKeyVersion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.kms.v1.CryptoKeyVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.kms.v1.CryptoKeyVersion.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState state = 3;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // .google.protobuf.Timestamp create_time = 4;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_create_time(), deterministic, target);
  }

  // .google.protobuf.Timestamp destroy_time = 5;
  if (this->has_destroy_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_destroy_time(), deterministic, target);
  }

  // .google.protobuf.Timestamp destroy_event_time = 6;
  if (this->has_destroy_event_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_destroy_event_time(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.kms.v1.CryptoKeyVersion)
  return target;
}

size_t CryptoKeyVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.kms.v1.CryptoKeyVersion)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.protobuf.Timestamp create_time = 4;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.protobuf.Timestamp destroy_time = 5;
  if (this->has_destroy_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *destroy_time_);
  }

  // .google.protobuf.Timestamp destroy_event_time = 6;
  if (this->has_destroy_event_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *destroy_event_time_);
  }

  // .google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CryptoKeyVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.kms.v1.CryptoKeyVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const CryptoKeyVersion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CryptoKeyVersion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.kms.v1.CryptoKeyVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.kms.v1.CryptoKeyVersion)
    MergeFrom(*source);
  }
}

void CryptoKeyVersion::MergeFrom(const CryptoKeyVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.kms.v1.CryptoKeyVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_destroy_time()) {
    mutable_destroy_time()->::google::protobuf::Timestamp::MergeFrom(from.destroy_time());
  }
  if (from.has_destroy_event_time()) {
    mutable_destroy_event_time()->::google::protobuf::Timestamp::MergeFrom(from.destroy_event_time());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void CryptoKeyVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.kms.v1.CryptoKeyVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CryptoKeyVersion::CopyFrom(const CryptoKeyVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.kms.v1.CryptoKeyVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptoKeyVersion::IsInitialized() const {
  return true;
}

void CryptoKeyVersion::Swap(CryptoKeyVersion* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CryptoKeyVersion* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CryptoKeyVersion::UnsafeArenaSwap(CryptoKeyVersion* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CryptoKeyVersion::InternalSwap(CryptoKeyVersion* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(create_time_, other->create_time_);
  swap(destroy_time_, other->destroy_time_);
  swap(destroy_event_time_, other->destroy_event_time_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CryptoKeyVersion::GetMetadata() const {
  protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace kms
}  // namespace cloud
}  // namespace google
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::kms::v1::KeyRing* Arena::CreateMaybeMessage< ::google::cloud::kms::v1::KeyRing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::kms::v1::KeyRing >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::kms::v1::CryptoKey_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::cloud::kms::v1::CryptoKey_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::kms::v1::CryptoKey_LabelsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::kms::v1::CryptoKey* Arena::CreateMaybeMessage< ::google::cloud::kms::v1::CryptoKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::kms::v1::CryptoKey >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::kms::v1::CryptoKeyVersion* Arena::CreateMaybeMessage< ::google::cloud::kms::v1::CryptoKeyVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::kms::v1::CryptoKeyVersion >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
