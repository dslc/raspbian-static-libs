// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/cloud/kms/v1/service.proto

#include "google/cloud/kms/v1/service.pb.h"
#include "google/cloud/kms/v1/service.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace cloud {
namespace kms {
namespace v1 {

static const char* KeyManagementService_method_names[] = {
  "/google.cloud.kms.v1.KeyManagementService/ListKeyRings",
  "/google.cloud.kms.v1.KeyManagementService/ListCryptoKeys",
  "/google.cloud.kms.v1.KeyManagementService/ListCryptoKeyVersions",
  "/google.cloud.kms.v1.KeyManagementService/GetKeyRing",
  "/google.cloud.kms.v1.KeyManagementService/GetCryptoKey",
  "/google.cloud.kms.v1.KeyManagementService/GetCryptoKeyVersion",
  "/google.cloud.kms.v1.KeyManagementService/CreateKeyRing",
  "/google.cloud.kms.v1.KeyManagementService/CreateCryptoKey",
  "/google.cloud.kms.v1.KeyManagementService/CreateCryptoKeyVersion",
  "/google.cloud.kms.v1.KeyManagementService/UpdateCryptoKey",
  "/google.cloud.kms.v1.KeyManagementService/UpdateCryptoKeyVersion",
  "/google.cloud.kms.v1.KeyManagementService/Encrypt",
  "/google.cloud.kms.v1.KeyManagementService/Decrypt",
  "/google.cloud.kms.v1.KeyManagementService/UpdateCryptoKeyPrimaryVersion",
  "/google.cloud.kms.v1.KeyManagementService/DestroyCryptoKeyVersion",
  "/google.cloud.kms.v1.KeyManagementService/RestoreCryptoKeyVersion",
};

std::unique_ptr< KeyManagementService::Stub> KeyManagementService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< KeyManagementService::Stub> stub(new KeyManagementService::Stub(channel));
  return stub;
}

KeyManagementService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListKeyRings_(KeyManagementService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListCryptoKeys_(KeyManagementService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListCryptoKeyVersions_(KeyManagementService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetKeyRing_(KeyManagementService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCryptoKey_(KeyManagementService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCryptoKeyVersion_(KeyManagementService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateKeyRing_(KeyManagementService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateCryptoKey_(KeyManagementService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateCryptoKeyVersion_(KeyManagementService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateCryptoKey_(KeyManagementService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateCryptoKeyVersion_(KeyManagementService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Encrypt_(KeyManagementService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Decrypt_(KeyManagementService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateCryptoKeyPrimaryVersion_(KeyManagementService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DestroyCryptoKeyVersion_(KeyManagementService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RestoreCryptoKeyVersion_(KeyManagementService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status KeyManagementService::Stub::ListKeyRings(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListKeyRingsRequest& request, ::google::cloud::kms::v1::ListKeyRingsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListKeyRings_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::ListKeyRingsResponse>* KeyManagementService::Stub::AsyncListKeyRingsRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListKeyRingsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::ListKeyRingsResponse>::Create(channel_.get(), cq, rpcmethod_ListKeyRings_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::ListKeyRingsResponse>* KeyManagementService::Stub::PrepareAsyncListKeyRingsRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListKeyRingsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::ListKeyRingsResponse>::Create(channel_.get(), cq, rpcmethod_ListKeyRings_, context, request, false);
}

::grpc::Status KeyManagementService::Stub::ListCryptoKeys(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListCryptoKeysRequest& request, ::google::cloud::kms::v1::ListCryptoKeysResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListCryptoKeys_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::ListCryptoKeysResponse>* KeyManagementService::Stub::AsyncListCryptoKeysRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListCryptoKeysRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::ListCryptoKeysResponse>::Create(channel_.get(), cq, rpcmethod_ListCryptoKeys_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::ListCryptoKeysResponse>* KeyManagementService::Stub::PrepareAsyncListCryptoKeysRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListCryptoKeysRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::ListCryptoKeysResponse>::Create(channel_.get(), cq, rpcmethod_ListCryptoKeys_, context, request, false);
}

::grpc::Status KeyManagementService::Stub::ListCryptoKeyVersions(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListCryptoKeyVersionsRequest& request, ::google::cloud::kms::v1::ListCryptoKeyVersionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListCryptoKeyVersions_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::ListCryptoKeyVersionsResponse>* KeyManagementService::Stub::AsyncListCryptoKeyVersionsRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListCryptoKeyVersionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::ListCryptoKeyVersionsResponse>::Create(channel_.get(), cq, rpcmethod_ListCryptoKeyVersions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::ListCryptoKeyVersionsResponse>* KeyManagementService::Stub::PrepareAsyncListCryptoKeyVersionsRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListCryptoKeyVersionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::ListCryptoKeyVersionsResponse>::Create(channel_.get(), cq, rpcmethod_ListCryptoKeyVersions_, context, request, false);
}

::grpc::Status KeyManagementService::Stub::GetKeyRing(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetKeyRingRequest& request, ::google::cloud::kms::v1::KeyRing* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetKeyRing_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::KeyRing>* KeyManagementService::Stub::AsyncGetKeyRingRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetKeyRingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::KeyRing>::Create(channel_.get(), cq, rpcmethod_GetKeyRing_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::KeyRing>* KeyManagementService::Stub::PrepareAsyncGetKeyRingRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetKeyRingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::KeyRing>::Create(channel_.get(), cq, rpcmethod_GetKeyRing_, context, request, false);
}

::grpc::Status KeyManagementService::Stub::GetCryptoKey(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetCryptoKeyRequest& request, ::google::cloud::kms::v1::CryptoKey* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCryptoKey_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>* KeyManagementService::Stub::AsyncGetCryptoKeyRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::CryptoKey>::Create(channel_.get(), cq, rpcmethod_GetCryptoKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>* KeyManagementService::Stub::PrepareAsyncGetCryptoKeyRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::CryptoKey>::Create(channel_.get(), cq, rpcmethod_GetCryptoKey_, context, request, false);
}

::grpc::Status KeyManagementService::Stub::GetCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetCryptoKeyVersionRequest& request, ::google::cloud::kms::v1::CryptoKeyVersion* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCryptoKeyVersion_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>* KeyManagementService::Stub::AsyncGetCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::CryptoKeyVersion>::Create(channel_.get(), cq, rpcmethod_GetCryptoKeyVersion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>* KeyManagementService::Stub::PrepareAsyncGetCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::CryptoKeyVersion>::Create(channel_.get(), cq, rpcmethod_GetCryptoKeyVersion_, context, request, false);
}

::grpc::Status KeyManagementService::Stub::CreateKeyRing(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateKeyRingRequest& request, ::google::cloud::kms::v1::KeyRing* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateKeyRing_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::KeyRing>* KeyManagementService::Stub::AsyncCreateKeyRingRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateKeyRingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::KeyRing>::Create(channel_.get(), cq, rpcmethod_CreateKeyRing_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::KeyRing>* KeyManagementService::Stub::PrepareAsyncCreateKeyRingRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateKeyRingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::KeyRing>::Create(channel_.get(), cq, rpcmethod_CreateKeyRing_, context, request, false);
}

::grpc::Status KeyManagementService::Stub::CreateCryptoKey(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyRequest& request, ::google::cloud::kms::v1::CryptoKey* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateCryptoKey_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>* KeyManagementService::Stub::AsyncCreateCryptoKeyRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::CryptoKey>::Create(channel_.get(), cq, rpcmethod_CreateCryptoKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>* KeyManagementService::Stub::PrepareAsyncCreateCryptoKeyRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::CryptoKey>::Create(channel_.get(), cq, rpcmethod_CreateCryptoKey_, context, request, false);
}

::grpc::Status KeyManagementService::Stub::CreateCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyVersionRequest& request, ::google::cloud::kms::v1::CryptoKeyVersion* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateCryptoKeyVersion_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>* KeyManagementService::Stub::AsyncCreateCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::CryptoKeyVersion>::Create(channel_.get(), cq, rpcmethod_CreateCryptoKeyVersion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>* KeyManagementService::Stub::PrepareAsyncCreateCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::CryptoKeyVersion>::Create(channel_.get(), cq, rpcmethod_CreateCryptoKeyVersion_, context, request, false);
}

::grpc::Status KeyManagementService::Stub::UpdateCryptoKey(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyRequest& request, ::google::cloud::kms::v1::CryptoKey* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateCryptoKey_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>* KeyManagementService::Stub::AsyncUpdateCryptoKeyRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::CryptoKey>::Create(channel_.get(), cq, rpcmethod_UpdateCryptoKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>* KeyManagementService::Stub::PrepareAsyncUpdateCryptoKeyRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::CryptoKey>::Create(channel_.get(), cq, rpcmethod_UpdateCryptoKey_, context, request, false);
}

::grpc::Status KeyManagementService::Stub::UpdateCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyVersionRequest& request, ::google::cloud::kms::v1::CryptoKeyVersion* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateCryptoKeyVersion_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>* KeyManagementService::Stub::AsyncUpdateCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::CryptoKeyVersion>::Create(channel_.get(), cq, rpcmethod_UpdateCryptoKeyVersion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>* KeyManagementService::Stub::PrepareAsyncUpdateCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::CryptoKeyVersion>::Create(channel_.get(), cq, rpcmethod_UpdateCryptoKeyVersion_, context, request, false);
}

::grpc::Status KeyManagementService::Stub::Encrypt(::grpc::ClientContext* context, const ::google::cloud::kms::v1::EncryptRequest& request, ::google::cloud::kms::v1::EncryptResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Encrypt_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::EncryptResponse>* KeyManagementService::Stub::AsyncEncryptRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::EncryptRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::EncryptResponse>::Create(channel_.get(), cq, rpcmethod_Encrypt_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::EncryptResponse>* KeyManagementService::Stub::PrepareAsyncEncryptRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::EncryptRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::EncryptResponse>::Create(channel_.get(), cq, rpcmethod_Encrypt_, context, request, false);
}

::grpc::Status KeyManagementService::Stub::Decrypt(::grpc::ClientContext* context, const ::google::cloud::kms::v1::DecryptRequest& request, ::google::cloud::kms::v1::DecryptResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Decrypt_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::DecryptResponse>* KeyManagementService::Stub::AsyncDecryptRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::DecryptRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::DecryptResponse>::Create(channel_.get(), cq, rpcmethod_Decrypt_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::DecryptResponse>* KeyManagementService::Stub::PrepareAsyncDecryptRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::DecryptRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::DecryptResponse>::Create(channel_.get(), cq, rpcmethod_Decrypt_, context, request, false);
}

::grpc::Status KeyManagementService::Stub::UpdateCryptoKeyPrimaryVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyPrimaryVersionRequest& request, ::google::cloud::kms::v1::CryptoKey* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateCryptoKeyPrimaryVersion_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>* KeyManagementService::Stub::AsyncUpdateCryptoKeyPrimaryVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyPrimaryVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::CryptoKey>::Create(channel_.get(), cq, rpcmethod_UpdateCryptoKeyPrimaryVersion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>* KeyManagementService::Stub::PrepareAsyncUpdateCryptoKeyPrimaryVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyPrimaryVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::CryptoKey>::Create(channel_.get(), cq, rpcmethod_UpdateCryptoKeyPrimaryVersion_, context, request, false);
}

::grpc::Status KeyManagementService::Stub::DestroyCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::DestroyCryptoKeyVersionRequest& request, ::google::cloud::kms::v1::CryptoKeyVersion* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DestroyCryptoKeyVersion_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>* KeyManagementService::Stub::AsyncDestroyCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::DestroyCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::CryptoKeyVersion>::Create(channel_.get(), cq, rpcmethod_DestroyCryptoKeyVersion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>* KeyManagementService::Stub::PrepareAsyncDestroyCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::DestroyCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::CryptoKeyVersion>::Create(channel_.get(), cq, rpcmethod_DestroyCryptoKeyVersion_, context, request, false);
}

::grpc::Status KeyManagementService::Stub::RestoreCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::RestoreCryptoKeyVersionRequest& request, ::google::cloud::kms::v1::CryptoKeyVersion* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RestoreCryptoKeyVersion_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>* KeyManagementService::Stub::AsyncRestoreCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::RestoreCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::CryptoKeyVersion>::Create(channel_.get(), cq, rpcmethod_RestoreCryptoKeyVersion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>* KeyManagementService::Stub::PrepareAsyncRestoreCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::RestoreCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::kms::v1::CryptoKeyVersion>::Create(channel_.get(), cq, rpcmethod_RestoreCryptoKeyVersion_, context, request, false);
}

KeyManagementService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyManagementService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeyManagementService::Service, ::google::cloud::kms::v1::ListKeyRingsRequest, ::google::cloud::kms::v1::ListKeyRingsResponse>(
          std::mem_fn(&KeyManagementService::Service::ListKeyRings), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyManagementService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeyManagementService::Service, ::google::cloud::kms::v1::ListCryptoKeysRequest, ::google::cloud::kms::v1::ListCryptoKeysResponse>(
          std::mem_fn(&KeyManagementService::Service::ListCryptoKeys), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyManagementService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeyManagementService::Service, ::google::cloud::kms::v1::ListCryptoKeyVersionsRequest, ::google::cloud::kms::v1::ListCryptoKeyVersionsResponse>(
          std::mem_fn(&KeyManagementService::Service::ListCryptoKeyVersions), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyManagementService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeyManagementService::Service, ::google::cloud::kms::v1::GetKeyRingRequest, ::google::cloud::kms::v1::KeyRing>(
          std::mem_fn(&KeyManagementService::Service::GetKeyRing), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyManagementService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeyManagementService::Service, ::google::cloud::kms::v1::GetCryptoKeyRequest, ::google::cloud::kms::v1::CryptoKey>(
          std::mem_fn(&KeyManagementService::Service::GetCryptoKey), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyManagementService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeyManagementService::Service, ::google::cloud::kms::v1::GetCryptoKeyVersionRequest, ::google::cloud::kms::v1::CryptoKeyVersion>(
          std::mem_fn(&KeyManagementService::Service::GetCryptoKeyVersion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyManagementService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeyManagementService::Service, ::google::cloud::kms::v1::CreateKeyRingRequest, ::google::cloud::kms::v1::KeyRing>(
          std::mem_fn(&KeyManagementService::Service::CreateKeyRing), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyManagementService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeyManagementService::Service, ::google::cloud::kms::v1::CreateCryptoKeyRequest, ::google::cloud::kms::v1::CryptoKey>(
          std::mem_fn(&KeyManagementService::Service::CreateCryptoKey), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyManagementService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeyManagementService::Service, ::google::cloud::kms::v1::CreateCryptoKeyVersionRequest, ::google::cloud::kms::v1::CryptoKeyVersion>(
          std::mem_fn(&KeyManagementService::Service::CreateCryptoKeyVersion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyManagementService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeyManagementService::Service, ::google::cloud::kms::v1::UpdateCryptoKeyRequest, ::google::cloud::kms::v1::CryptoKey>(
          std::mem_fn(&KeyManagementService::Service::UpdateCryptoKey), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyManagementService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeyManagementService::Service, ::google::cloud::kms::v1::UpdateCryptoKeyVersionRequest, ::google::cloud::kms::v1::CryptoKeyVersion>(
          std::mem_fn(&KeyManagementService::Service::UpdateCryptoKeyVersion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyManagementService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeyManagementService::Service, ::google::cloud::kms::v1::EncryptRequest, ::google::cloud::kms::v1::EncryptResponse>(
          std::mem_fn(&KeyManagementService::Service::Encrypt), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyManagementService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeyManagementService::Service, ::google::cloud::kms::v1::DecryptRequest, ::google::cloud::kms::v1::DecryptResponse>(
          std::mem_fn(&KeyManagementService::Service::Decrypt), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyManagementService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeyManagementService::Service, ::google::cloud::kms::v1::UpdateCryptoKeyPrimaryVersionRequest, ::google::cloud::kms::v1::CryptoKey>(
          std::mem_fn(&KeyManagementService::Service::UpdateCryptoKeyPrimaryVersion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyManagementService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeyManagementService::Service, ::google::cloud::kms::v1::DestroyCryptoKeyVersionRequest, ::google::cloud::kms::v1::CryptoKeyVersion>(
          std::mem_fn(&KeyManagementService::Service::DestroyCryptoKeyVersion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyManagementService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeyManagementService::Service, ::google::cloud::kms::v1::RestoreCryptoKeyVersionRequest, ::google::cloud::kms::v1::CryptoKeyVersion>(
          std::mem_fn(&KeyManagementService::Service::RestoreCryptoKeyVersion), this)));
}

KeyManagementService::Service::~Service() {
}

::grpc::Status KeyManagementService::Service::ListKeyRings(::grpc::ServerContext* context, const ::google::cloud::kms::v1::ListKeyRingsRequest* request, ::google::cloud::kms::v1::ListKeyRingsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeyManagementService::Service::ListCryptoKeys(::grpc::ServerContext* context, const ::google::cloud::kms::v1::ListCryptoKeysRequest* request, ::google::cloud::kms::v1::ListCryptoKeysResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeyManagementService::Service::ListCryptoKeyVersions(::grpc::ServerContext* context, const ::google::cloud::kms::v1::ListCryptoKeyVersionsRequest* request, ::google::cloud::kms::v1::ListCryptoKeyVersionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeyManagementService::Service::GetKeyRing(::grpc::ServerContext* context, const ::google::cloud::kms::v1::GetKeyRingRequest* request, ::google::cloud::kms::v1::KeyRing* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeyManagementService::Service::GetCryptoKey(::grpc::ServerContext* context, const ::google::cloud::kms::v1::GetCryptoKeyRequest* request, ::google::cloud::kms::v1::CryptoKey* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeyManagementService::Service::GetCryptoKeyVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::GetCryptoKeyVersionRequest* request, ::google::cloud::kms::v1::CryptoKeyVersion* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeyManagementService::Service::CreateKeyRing(::grpc::ServerContext* context, const ::google::cloud::kms::v1::CreateKeyRingRequest* request, ::google::cloud::kms::v1::KeyRing* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeyManagementService::Service::CreateCryptoKey(::grpc::ServerContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyRequest* request, ::google::cloud::kms::v1::CryptoKey* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeyManagementService::Service::CreateCryptoKeyVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyVersionRequest* request, ::google::cloud::kms::v1::CryptoKeyVersion* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeyManagementService::Service::UpdateCryptoKey(::grpc::ServerContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyRequest* request, ::google::cloud::kms::v1::CryptoKey* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeyManagementService::Service::UpdateCryptoKeyVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyVersionRequest* request, ::google::cloud::kms::v1::CryptoKeyVersion* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeyManagementService::Service::Encrypt(::grpc::ServerContext* context, const ::google::cloud::kms::v1::EncryptRequest* request, ::google::cloud::kms::v1::EncryptResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeyManagementService::Service::Decrypt(::grpc::ServerContext* context, const ::google::cloud::kms::v1::DecryptRequest* request, ::google::cloud::kms::v1::DecryptResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeyManagementService::Service::UpdateCryptoKeyPrimaryVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyPrimaryVersionRequest* request, ::google::cloud::kms::v1::CryptoKey* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeyManagementService::Service::DestroyCryptoKeyVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::DestroyCryptoKeyVersionRequest* request, ::google::cloud::kms::v1::CryptoKeyVersion* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeyManagementService::Service::RestoreCryptoKeyVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::RestoreCryptoKeyVersionRequest* request, ::google::cloud::kms::v1::CryptoKeyVersion* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace cloud
}  // namespace kms
}  // namespace v1

