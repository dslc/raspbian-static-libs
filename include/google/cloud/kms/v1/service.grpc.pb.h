// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/cloud/kms/v1/service.proto
// Original file comments:
// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fcloud_2fkms_2fv1_2fservice_2eproto__INCLUDED
#define GRPC_google_2fcloud_2fkms_2fv1_2fservice_2eproto__INCLUDED

#include "google/cloud/kms/v1/service.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace cloud {
namespace kms {
namespace v1 {

// Google Cloud Key Management Service
//
// Manages cryptographic keys and operations using those keys. Implements a REST
// model with the following objects:
//
// * [KeyRing][google.cloud.kms.v1.KeyRing]
// * [CryptoKey][google.cloud.kms.v1.CryptoKey]
// * [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion]
class KeyManagementService final {
 public:
  static constexpr char const* service_full_name() {
    return "google.cloud.kms.v1.KeyManagementService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists [KeyRings][google.cloud.kms.v1.KeyRing].
    virtual ::grpc::Status ListKeyRings(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListKeyRingsRequest& request, ::google::cloud::kms::v1::ListKeyRingsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::ListKeyRingsResponse>> AsyncListKeyRings(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListKeyRingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::ListKeyRingsResponse>>(AsyncListKeyRingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::ListKeyRingsResponse>> PrepareAsyncListKeyRings(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListKeyRingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::ListKeyRingsResponse>>(PrepareAsyncListKeyRingsRaw(context, request, cq));
    }
    // Lists [CryptoKeys][google.cloud.kms.v1.CryptoKey].
    virtual ::grpc::Status ListCryptoKeys(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListCryptoKeysRequest& request, ::google::cloud::kms::v1::ListCryptoKeysResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::ListCryptoKeysResponse>> AsyncListCryptoKeys(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListCryptoKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::ListCryptoKeysResponse>>(AsyncListCryptoKeysRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::ListCryptoKeysResponse>> PrepareAsyncListCryptoKeys(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListCryptoKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::ListCryptoKeysResponse>>(PrepareAsyncListCryptoKeysRaw(context, request, cq));
    }
    // Lists [CryptoKeyVersions][google.cloud.kms.v1.CryptoKeyVersion].
    virtual ::grpc::Status ListCryptoKeyVersions(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListCryptoKeyVersionsRequest& request, ::google::cloud::kms::v1::ListCryptoKeyVersionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::ListCryptoKeyVersionsResponse>> AsyncListCryptoKeyVersions(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListCryptoKeyVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::ListCryptoKeyVersionsResponse>>(AsyncListCryptoKeyVersionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::ListCryptoKeyVersionsResponse>> PrepareAsyncListCryptoKeyVersions(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListCryptoKeyVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::ListCryptoKeyVersionsResponse>>(PrepareAsyncListCryptoKeyVersionsRaw(context, request, cq));
    }
    // Returns metadata for a given [KeyRing][google.cloud.kms.v1.KeyRing].
    virtual ::grpc::Status GetKeyRing(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetKeyRingRequest& request, ::google::cloud::kms::v1::KeyRing* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::KeyRing>> AsyncGetKeyRing(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetKeyRingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::KeyRing>>(AsyncGetKeyRingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::KeyRing>> PrepareAsyncGetKeyRing(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetKeyRingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::KeyRing>>(PrepareAsyncGetKeyRingRaw(context, request, cq));
    }
    // Returns metadata for a given [CryptoKey][google.cloud.kms.v1.CryptoKey], as well as its
    // [primary][google.cloud.kms.v1.CryptoKey.primary] [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion].
    virtual ::grpc::Status GetCryptoKey(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetCryptoKeyRequest& request, ::google::cloud::kms::v1::CryptoKey* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKey>> AsyncGetCryptoKey(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKey>>(AsyncGetCryptoKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKey>> PrepareAsyncGetCryptoKey(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKey>>(PrepareAsyncGetCryptoKeyRaw(context, request, cq));
    }
    // Returns metadata for a given [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion].
    virtual ::grpc::Status GetCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetCryptoKeyVersionRequest& request, ::google::cloud::kms::v1::CryptoKeyVersion* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>> AsyncGetCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>>(AsyncGetCryptoKeyVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>> PrepareAsyncGetCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>>(PrepareAsyncGetCryptoKeyVersionRaw(context, request, cq));
    }
    // Create a new [KeyRing][google.cloud.kms.v1.KeyRing] in a given Project and Location.
    virtual ::grpc::Status CreateKeyRing(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateKeyRingRequest& request, ::google::cloud::kms::v1::KeyRing* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::KeyRing>> AsyncCreateKeyRing(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateKeyRingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::KeyRing>>(AsyncCreateKeyRingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::KeyRing>> PrepareAsyncCreateKeyRing(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateKeyRingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::KeyRing>>(PrepareAsyncCreateKeyRingRaw(context, request, cq));
    }
    // Create a new [CryptoKey][google.cloud.kms.v1.CryptoKey] within a [KeyRing][google.cloud.kms.v1.KeyRing].
    //
    // [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] is required.
    virtual ::grpc::Status CreateCryptoKey(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyRequest& request, ::google::cloud::kms::v1::CryptoKey* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKey>> AsyncCreateCryptoKey(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKey>>(AsyncCreateCryptoKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKey>> PrepareAsyncCreateCryptoKey(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKey>>(PrepareAsyncCreateCryptoKeyRaw(context, request, cq));
    }
    // Create a new [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] in a [CryptoKey][google.cloud.kms.v1.CryptoKey].
    //
    // The server will assign the next sequential id. If unset,
    // [state][google.cloud.kms.v1.CryptoKeyVersion.state] will be set to
    // [ENABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.ENABLED].
    virtual ::grpc::Status CreateCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyVersionRequest& request, ::google::cloud::kms::v1::CryptoKeyVersion* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>> AsyncCreateCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>>(AsyncCreateCryptoKeyVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>> PrepareAsyncCreateCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>>(PrepareAsyncCreateCryptoKeyVersionRaw(context, request, cq));
    }
    // Update a [CryptoKey][google.cloud.kms.v1.CryptoKey].
    virtual ::grpc::Status UpdateCryptoKey(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyRequest& request, ::google::cloud::kms::v1::CryptoKey* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKey>> AsyncUpdateCryptoKey(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKey>>(AsyncUpdateCryptoKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKey>> PrepareAsyncUpdateCryptoKey(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKey>>(PrepareAsyncUpdateCryptoKeyRaw(context, request, cq));
    }
    // Update a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion]'s metadata.
    //
    // [state][google.cloud.kms.v1.CryptoKeyVersion.state] may be changed between
    // [ENABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.ENABLED] and
    // [DISABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DISABLED] using this
    // method. See [DestroyCryptoKeyVersion][google.cloud.kms.v1.KeyManagementService.DestroyCryptoKeyVersion] and [RestoreCryptoKeyVersion][google.cloud.kms.v1.KeyManagementService.RestoreCryptoKeyVersion] to
    // move between other states.
    virtual ::grpc::Status UpdateCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyVersionRequest& request, ::google::cloud::kms::v1::CryptoKeyVersion* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>> AsyncUpdateCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>>(AsyncUpdateCryptoKeyVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>> PrepareAsyncUpdateCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>>(PrepareAsyncUpdateCryptoKeyVersionRaw(context, request, cq));
    }
    // Encrypts data, so that it can only be recovered by a call to [Decrypt][google.cloud.kms.v1.KeyManagementService.Decrypt].
    virtual ::grpc::Status Encrypt(::grpc::ClientContext* context, const ::google::cloud::kms::v1::EncryptRequest& request, ::google::cloud::kms::v1::EncryptResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::EncryptResponse>> AsyncEncrypt(::grpc::ClientContext* context, const ::google::cloud::kms::v1::EncryptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::EncryptResponse>>(AsyncEncryptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::EncryptResponse>> PrepareAsyncEncrypt(::grpc::ClientContext* context, const ::google::cloud::kms::v1::EncryptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::EncryptResponse>>(PrepareAsyncEncryptRaw(context, request, cq));
    }
    // Decrypts data that was protected by [Encrypt][google.cloud.kms.v1.KeyManagementService.Encrypt].
    virtual ::grpc::Status Decrypt(::grpc::ClientContext* context, const ::google::cloud::kms::v1::DecryptRequest& request, ::google::cloud::kms::v1::DecryptResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::DecryptResponse>> AsyncDecrypt(::grpc::ClientContext* context, const ::google::cloud::kms::v1::DecryptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::DecryptResponse>>(AsyncDecryptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::DecryptResponse>> PrepareAsyncDecrypt(::grpc::ClientContext* context, const ::google::cloud::kms::v1::DecryptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::DecryptResponse>>(PrepareAsyncDecryptRaw(context, request, cq));
    }
    // Update the version of a [CryptoKey][google.cloud.kms.v1.CryptoKey] that will be used in [Encrypt][google.cloud.kms.v1.KeyManagementService.Encrypt]
    virtual ::grpc::Status UpdateCryptoKeyPrimaryVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyPrimaryVersionRequest& request, ::google::cloud::kms::v1::CryptoKey* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKey>> AsyncUpdateCryptoKeyPrimaryVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyPrimaryVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKey>>(AsyncUpdateCryptoKeyPrimaryVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKey>> PrepareAsyncUpdateCryptoKeyPrimaryVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyPrimaryVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKey>>(PrepareAsyncUpdateCryptoKeyPrimaryVersionRaw(context, request, cq));
    }
    // Schedule a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] for destruction.
    //
    // Upon calling this method, [CryptoKeyVersion.state][google.cloud.kms.v1.CryptoKeyVersion.state] will be set to
    // [DESTROY_SCHEDULED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DESTROY_SCHEDULED]
    // and [destroy_time][google.cloud.kms.v1.CryptoKeyVersion.destroy_time] will be set to a time 24
    // hours in the future, at which point the [state][google.cloud.kms.v1.CryptoKeyVersion.state]
    // will be changed to
    // [DESTROYED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DESTROYED], and the key
    // material will be irrevocably destroyed.
    //
    // Before the [destroy_time][google.cloud.kms.v1.CryptoKeyVersion.destroy_time] is reached,
    // [RestoreCryptoKeyVersion][google.cloud.kms.v1.KeyManagementService.RestoreCryptoKeyVersion] may be called to reverse the process.
    virtual ::grpc::Status DestroyCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::DestroyCryptoKeyVersionRequest& request, ::google::cloud::kms::v1::CryptoKeyVersion* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>> AsyncDestroyCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::DestroyCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>>(AsyncDestroyCryptoKeyVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>> PrepareAsyncDestroyCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::DestroyCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>>(PrepareAsyncDestroyCryptoKeyVersionRaw(context, request, cq));
    }
    // Restore a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] in the
    // [DESTROY_SCHEDULED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DESTROY_SCHEDULED],
    // state.
    //
    // Upon restoration of the CryptoKeyVersion, [state][google.cloud.kms.v1.CryptoKeyVersion.state]
    // will be set to [DISABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DISABLED],
    // and [destroy_time][google.cloud.kms.v1.CryptoKeyVersion.destroy_time] will be cleared.
    virtual ::grpc::Status RestoreCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::RestoreCryptoKeyVersionRequest& request, ::google::cloud::kms::v1::CryptoKeyVersion* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>> AsyncRestoreCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::RestoreCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>>(AsyncRestoreCryptoKeyVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>> PrepareAsyncRestoreCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::RestoreCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>>(PrepareAsyncRestoreCryptoKeyVersionRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::ListKeyRingsResponse>* AsyncListKeyRingsRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListKeyRingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::ListKeyRingsResponse>* PrepareAsyncListKeyRingsRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListKeyRingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::ListCryptoKeysResponse>* AsyncListCryptoKeysRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListCryptoKeysRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::ListCryptoKeysResponse>* PrepareAsyncListCryptoKeysRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListCryptoKeysRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::ListCryptoKeyVersionsResponse>* AsyncListCryptoKeyVersionsRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListCryptoKeyVersionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::ListCryptoKeyVersionsResponse>* PrepareAsyncListCryptoKeyVersionsRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListCryptoKeyVersionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::KeyRing>* AsyncGetKeyRingRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetKeyRingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::KeyRing>* PrepareAsyncGetKeyRingRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetKeyRingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKey>* AsyncGetCryptoKeyRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKey>* PrepareAsyncGetCryptoKeyRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>* AsyncGetCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>* PrepareAsyncGetCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::KeyRing>* AsyncCreateKeyRingRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateKeyRingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::KeyRing>* PrepareAsyncCreateKeyRingRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateKeyRingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKey>* AsyncCreateCryptoKeyRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKey>* PrepareAsyncCreateCryptoKeyRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>* AsyncCreateCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>* PrepareAsyncCreateCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKey>* AsyncUpdateCryptoKeyRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKey>* PrepareAsyncUpdateCryptoKeyRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>* AsyncUpdateCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>* PrepareAsyncUpdateCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::EncryptResponse>* AsyncEncryptRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::EncryptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::EncryptResponse>* PrepareAsyncEncryptRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::EncryptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::DecryptResponse>* AsyncDecryptRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::DecryptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::DecryptResponse>* PrepareAsyncDecryptRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::DecryptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKey>* AsyncUpdateCryptoKeyPrimaryVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyPrimaryVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKey>* PrepareAsyncUpdateCryptoKeyPrimaryVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyPrimaryVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>* AsyncDestroyCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::DestroyCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>* PrepareAsyncDestroyCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::DestroyCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>* AsyncRestoreCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::RestoreCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::kms::v1::CryptoKeyVersion>* PrepareAsyncRestoreCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::RestoreCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListKeyRings(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListKeyRingsRequest& request, ::google::cloud::kms::v1::ListKeyRingsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::ListKeyRingsResponse>> AsyncListKeyRings(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListKeyRingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::ListKeyRingsResponse>>(AsyncListKeyRingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::ListKeyRingsResponse>> PrepareAsyncListKeyRings(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListKeyRingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::ListKeyRingsResponse>>(PrepareAsyncListKeyRingsRaw(context, request, cq));
    }
    ::grpc::Status ListCryptoKeys(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListCryptoKeysRequest& request, ::google::cloud::kms::v1::ListCryptoKeysResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::ListCryptoKeysResponse>> AsyncListCryptoKeys(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListCryptoKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::ListCryptoKeysResponse>>(AsyncListCryptoKeysRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::ListCryptoKeysResponse>> PrepareAsyncListCryptoKeys(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListCryptoKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::ListCryptoKeysResponse>>(PrepareAsyncListCryptoKeysRaw(context, request, cq));
    }
    ::grpc::Status ListCryptoKeyVersions(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListCryptoKeyVersionsRequest& request, ::google::cloud::kms::v1::ListCryptoKeyVersionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::ListCryptoKeyVersionsResponse>> AsyncListCryptoKeyVersions(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListCryptoKeyVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::ListCryptoKeyVersionsResponse>>(AsyncListCryptoKeyVersionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::ListCryptoKeyVersionsResponse>> PrepareAsyncListCryptoKeyVersions(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListCryptoKeyVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::ListCryptoKeyVersionsResponse>>(PrepareAsyncListCryptoKeyVersionsRaw(context, request, cq));
    }
    ::grpc::Status GetKeyRing(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetKeyRingRequest& request, ::google::cloud::kms::v1::KeyRing* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::KeyRing>> AsyncGetKeyRing(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetKeyRingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::KeyRing>>(AsyncGetKeyRingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::KeyRing>> PrepareAsyncGetKeyRing(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetKeyRingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::KeyRing>>(PrepareAsyncGetKeyRingRaw(context, request, cq));
    }
    ::grpc::Status GetCryptoKey(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetCryptoKeyRequest& request, ::google::cloud::kms::v1::CryptoKey* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>> AsyncGetCryptoKey(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>>(AsyncGetCryptoKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>> PrepareAsyncGetCryptoKey(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>>(PrepareAsyncGetCryptoKeyRaw(context, request, cq));
    }
    ::grpc::Status GetCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetCryptoKeyVersionRequest& request, ::google::cloud::kms::v1::CryptoKeyVersion* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>> AsyncGetCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>>(AsyncGetCryptoKeyVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>> PrepareAsyncGetCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>>(PrepareAsyncGetCryptoKeyVersionRaw(context, request, cq));
    }
    ::grpc::Status CreateKeyRing(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateKeyRingRequest& request, ::google::cloud::kms::v1::KeyRing* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::KeyRing>> AsyncCreateKeyRing(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateKeyRingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::KeyRing>>(AsyncCreateKeyRingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::KeyRing>> PrepareAsyncCreateKeyRing(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateKeyRingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::KeyRing>>(PrepareAsyncCreateKeyRingRaw(context, request, cq));
    }
    ::grpc::Status CreateCryptoKey(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyRequest& request, ::google::cloud::kms::v1::CryptoKey* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>> AsyncCreateCryptoKey(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>>(AsyncCreateCryptoKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>> PrepareAsyncCreateCryptoKey(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>>(PrepareAsyncCreateCryptoKeyRaw(context, request, cq));
    }
    ::grpc::Status CreateCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyVersionRequest& request, ::google::cloud::kms::v1::CryptoKeyVersion* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>> AsyncCreateCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>>(AsyncCreateCryptoKeyVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>> PrepareAsyncCreateCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>>(PrepareAsyncCreateCryptoKeyVersionRaw(context, request, cq));
    }
    ::grpc::Status UpdateCryptoKey(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyRequest& request, ::google::cloud::kms::v1::CryptoKey* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>> AsyncUpdateCryptoKey(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>>(AsyncUpdateCryptoKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>> PrepareAsyncUpdateCryptoKey(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>>(PrepareAsyncUpdateCryptoKeyRaw(context, request, cq));
    }
    ::grpc::Status UpdateCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyVersionRequest& request, ::google::cloud::kms::v1::CryptoKeyVersion* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>> AsyncUpdateCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>>(AsyncUpdateCryptoKeyVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>> PrepareAsyncUpdateCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>>(PrepareAsyncUpdateCryptoKeyVersionRaw(context, request, cq));
    }
    ::grpc::Status Encrypt(::grpc::ClientContext* context, const ::google::cloud::kms::v1::EncryptRequest& request, ::google::cloud::kms::v1::EncryptResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::EncryptResponse>> AsyncEncrypt(::grpc::ClientContext* context, const ::google::cloud::kms::v1::EncryptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::EncryptResponse>>(AsyncEncryptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::EncryptResponse>> PrepareAsyncEncrypt(::grpc::ClientContext* context, const ::google::cloud::kms::v1::EncryptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::EncryptResponse>>(PrepareAsyncEncryptRaw(context, request, cq));
    }
    ::grpc::Status Decrypt(::grpc::ClientContext* context, const ::google::cloud::kms::v1::DecryptRequest& request, ::google::cloud::kms::v1::DecryptResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::DecryptResponse>> AsyncDecrypt(::grpc::ClientContext* context, const ::google::cloud::kms::v1::DecryptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::DecryptResponse>>(AsyncDecryptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::DecryptResponse>> PrepareAsyncDecrypt(::grpc::ClientContext* context, const ::google::cloud::kms::v1::DecryptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::DecryptResponse>>(PrepareAsyncDecryptRaw(context, request, cq));
    }
    ::grpc::Status UpdateCryptoKeyPrimaryVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyPrimaryVersionRequest& request, ::google::cloud::kms::v1::CryptoKey* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>> AsyncUpdateCryptoKeyPrimaryVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyPrimaryVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>>(AsyncUpdateCryptoKeyPrimaryVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>> PrepareAsyncUpdateCryptoKeyPrimaryVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyPrimaryVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>>(PrepareAsyncUpdateCryptoKeyPrimaryVersionRaw(context, request, cq));
    }
    ::grpc::Status DestroyCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::DestroyCryptoKeyVersionRequest& request, ::google::cloud::kms::v1::CryptoKeyVersion* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>> AsyncDestroyCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::DestroyCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>>(AsyncDestroyCryptoKeyVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>> PrepareAsyncDestroyCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::DestroyCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>>(PrepareAsyncDestroyCryptoKeyVersionRaw(context, request, cq));
    }
    ::grpc::Status RestoreCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::RestoreCryptoKeyVersionRequest& request, ::google::cloud::kms::v1::CryptoKeyVersion* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>> AsyncRestoreCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::RestoreCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>>(AsyncRestoreCryptoKeyVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>> PrepareAsyncRestoreCryptoKeyVersion(::grpc::ClientContext* context, const ::google::cloud::kms::v1::RestoreCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>>(PrepareAsyncRestoreCryptoKeyVersionRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::ListKeyRingsResponse>* AsyncListKeyRingsRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListKeyRingsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::ListKeyRingsResponse>* PrepareAsyncListKeyRingsRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListKeyRingsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::ListCryptoKeysResponse>* AsyncListCryptoKeysRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListCryptoKeysRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::ListCryptoKeysResponse>* PrepareAsyncListCryptoKeysRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListCryptoKeysRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::ListCryptoKeyVersionsResponse>* AsyncListCryptoKeyVersionsRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListCryptoKeyVersionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::ListCryptoKeyVersionsResponse>* PrepareAsyncListCryptoKeyVersionsRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::ListCryptoKeyVersionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::KeyRing>* AsyncGetKeyRingRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetKeyRingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::KeyRing>* PrepareAsyncGetKeyRingRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetKeyRingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>* AsyncGetCryptoKeyRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>* PrepareAsyncGetCryptoKeyRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>* AsyncGetCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>* PrepareAsyncGetCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::GetCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::KeyRing>* AsyncCreateKeyRingRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateKeyRingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::KeyRing>* PrepareAsyncCreateKeyRingRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateKeyRingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>* AsyncCreateCryptoKeyRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>* PrepareAsyncCreateCryptoKeyRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>* AsyncCreateCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>* PrepareAsyncCreateCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>* AsyncUpdateCryptoKeyRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>* PrepareAsyncUpdateCryptoKeyRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>* AsyncUpdateCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>* PrepareAsyncUpdateCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::EncryptResponse>* AsyncEncryptRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::EncryptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::EncryptResponse>* PrepareAsyncEncryptRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::EncryptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::DecryptResponse>* AsyncDecryptRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::DecryptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::DecryptResponse>* PrepareAsyncDecryptRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::DecryptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>* AsyncUpdateCryptoKeyPrimaryVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyPrimaryVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKey>* PrepareAsyncUpdateCryptoKeyPrimaryVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyPrimaryVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>* AsyncDestroyCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::DestroyCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>* PrepareAsyncDestroyCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::DestroyCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>* AsyncRestoreCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::RestoreCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::kms::v1::CryptoKeyVersion>* PrepareAsyncRestoreCryptoKeyVersionRaw(::grpc::ClientContext* context, const ::google::cloud::kms::v1::RestoreCryptoKeyVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListKeyRings_;
    const ::grpc::internal::RpcMethod rpcmethod_ListCryptoKeys_;
    const ::grpc::internal::RpcMethod rpcmethod_ListCryptoKeyVersions_;
    const ::grpc::internal::RpcMethod rpcmethod_GetKeyRing_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCryptoKey_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCryptoKeyVersion_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateKeyRing_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCryptoKey_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCryptoKeyVersion_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateCryptoKey_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateCryptoKeyVersion_;
    const ::grpc::internal::RpcMethod rpcmethod_Encrypt_;
    const ::grpc::internal::RpcMethod rpcmethod_Decrypt_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateCryptoKeyPrimaryVersion_;
    const ::grpc::internal::RpcMethod rpcmethod_DestroyCryptoKeyVersion_;
    const ::grpc::internal::RpcMethod rpcmethod_RestoreCryptoKeyVersion_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists [KeyRings][google.cloud.kms.v1.KeyRing].
    virtual ::grpc::Status ListKeyRings(::grpc::ServerContext* context, const ::google::cloud::kms::v1::ListKeyRingsRequest* request, ::google::cloud::kms::v1::ListKeyRingsResponse* response);
    // Lists [CryptoKeys][google.cloud.kms.v1.CryptoKey].
    virtual ::grpc::Status ListCryptoKeys(::grpc::ServerContext* context, const ::google::cloud::kms::v1::ListCryptoKeysRequest* request, ::google::cloud::kms::v1::ListCryptoKeysResponse* response);
    // Lists [CryptoKeyVersions][google.cloud.kms.v1.CryptoKeyVersion].
    virtual ::grpc::Status ListCryptoKeyVersions(::grpc::ServerContext* context, const ::google::cloud::kms::v1::ListCryptoKeyVersionsRequest* request, ::google::cloud::kms::v1::ListCryptoKeyVersionsResponse* response);
    // Returns metadata for a given [KeyRing][google.cloud.kms.v1.KeyRing].
    virtual ::grpc::Status GetKeyRing(::grpc::ServerContext* context, const ::google::cloud::kms::v1::GetKeyRingRequest* request, ::google::cloud::kms::v1::KeyRing* response);
    // Returns metadata for a given [CryptoKey][google.cloud.kms.v1.CryptoKey], as well as its
    // [primary][google.cloud.kms.v1.CryptoKey.primary] [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion].
    virtual ::grpc::Status GetCryptoKey(::grpc::ServerContext* context, const ::google::cloud::kms::v1::GetCryptoKeyRequest* request, ::google::cloud::kms::v1::CryptoKey* response);
    // Returns metadata for a given [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion].
    virtual ::grpc::Status GetCryptoKeyVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::GetCryptoKeyVersionRequest* request, ::google::cloud::kms::v1::CryptoKeyVersion* response);
    // Create a new [KeyRing][google.cloud.kms.v1.KeyRing] in a given Project and Location.
    virtual ::grpc::Status CreateKeyRing(::grpc::ServerContext* context, const ::google::cloud::kms::v1::CreateKeyRingRequest* request, ::google::cloud::kms::v1::KeyRing* response);
    // Create a new [CryptoKey][google.cloud.kms.v1.CryptoKey] within a [KeyRing][google.cloud.kms.v1.KeyRing].
    //
    // [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] is required.
    virtual ::grpc::Status CreateCryptoKey(::grpc::ServerContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyRequest* request, ::google::cloud::kms::v1::CryptoKey* response);
    // Create a new [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] in a [CryptoKey][google.cloud.kms.v1.CryptoKey].
    //
    // The server will assign the next sequential id. If unset,
    // [state][google.cloud.kms.v1.CryptoKeyVersion.state] will be set to
    // [ENABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.ENABLED].
    virtual ::grpc::Status CreateCryptoKeyVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyVersionRequest* request, ::google::cloud::kms::v1::CryptoKeyVersion* response);
    // Update a [CryptoKey][google.cloud.kms.v1.CryptoKey].
    virtual ::grpc::Status UpdateCryptoKey(::grpc::ServerContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyRequest* request, ::google::cloud::kms::v1::CryptoKey* response);
    // Update a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion]'s metadata.
    //
    // [state][google.cloud.kms.v1.CryptoKeyVersion.state] may be changed between
    // [ENABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.ENABLED] and
    // [DISABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DISABLED] using this
    // method. See [DestroyCryptoKeyVersion][google.cloud.kms.v1.KeyManagementService.DestroyCryptoKeyVersion] and [RestoreCryptoKeyVersion][google.cloud.kms.v1.KeyManagementService.RestoreCryptoKeyVersion] to
    // move between other states.
    virtual ::grpc::Status UpdateCryptoKeyVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyVersionRequest* request, ::google::cloud::kms::v1::CryptoKeyVersion* response);
    // Encrypts data, so that it can only be recovered by a call to [Decrypt][google.cloud.kms.v1.KeyManagementService.Decrypt].
    virtual ::grpc::Status Encrypt(::grpc::ServerContext* context, const ::google::cloud::kms::v1::EncryptRequest* request, ::google::cloud::kms::v1::EncryptResponse* response);
    // Decrypts data that was protected by [Encrypt][google.cloud.kms.v1.KeyManagementService.Encrypt].
    virtual ::grpc::Status Decrypt(::grpc::ServerContext* context, const ::google::cloud::kms::v1::DecryptRequest* request, ::google::cloud::kms::v1::DecryptResponse* response);
    // Update the version of a [CryptoKey][google.cloud.kms.v1.CryptoKey] that will be used in [Encrypt][google.cloud.kms.v1.KeyManagementService.Encrypt]
    virtual ::grpc::Status UpdateCryptoKeyPrimaryVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyPrimaryVersionRequest* request, ::google::cloud::kms::v1::CryptoKey* response);
    // Schedule a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] for destruction.
    //
    // Upon calling this method, [CryptoKeyVersion.state][google.cloud.kms.v1.CryptoKeyVersion.state] will be set to
    // [DESTROY_SCHEDULED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DESTROY_SCHEDULED]
    // and [destroy_time][google.cloud.kms.v1.CryptoKeyVersion.destroy_time] will be set to a time 24
    // hours in the future, at which point the [state][google.cloud.kms.v1.CryptoKeyVersion.state]
    // will be changed to
    // [DESTROYED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DESTROYED], and the key
    // material will be irrevocably destroyed.
    //
    // Before the [destroy_time][google.cloud.kms.v1.CryptoKeyVersion.destroy_time] is reached,
    // [RestoreCryptoKeyVersion][google.cloud.kms.v1.KeyManagementService.RestoreCryptoKeyVersion] may be called to reverse the process.
    virtual ::grpc::Status DestroyCryptoKeyVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::DestroyCryptoKeyVersionRequest* request, ::google::cloud::kms::v1::CryptoKeyVersion* response);
    // Restore a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] in the
    // [DESTROY_SCHEDULED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DESTROY_SCHEDULED],
    // state.
    //
    // Upon restoration of the CryptoKeyVersion, [state][google.cloud.kms.v1.CryptoKeyVersion.state]
    // will be set to [DISABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DISABLED],
    // and [destroy_time][google.cloud.kms.v1.CryptoKeyVersion.destroy_time] will be cleared.
    virtual ::grpc::Status RestoreCryptoKeyVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::RestoreCryptoKeyVersionRequest* request, ::google::cloud::kms::v1::CryptoKeyVersion* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListKeyRings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListKeyRings() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListKeyRings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListKeyRings(::grpc::ServerContext* context, const ::google::cloud::kms::v1::ListKeyRingsRequest* request, ::google::cloud::kms::v1::ListKeyRingsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListKeyRings(::grpc::ServerContext* context, ::google::cloud::kms::v1::ListKeyRingsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::kms::v1::ListKeyRingsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListCryptoKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListCryptoKeys() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListCryptoKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCryptoKeys(::grpc::ServerContext* context, const ::google::cloud::kms::v1::ListCryptoKeysRequest* request, ::google::cloud::kms::v1::ListCryptoKeysResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCryptoKeys(::grpc::ServerContext* context, ::google::cloud::kms::v1::ListCryptoKeysRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::kms::v1::ListCryptoKeysResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListCryptoKeyVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListCryptoKeyVersions() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListCryptoKeyVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCryptoKeyVersions(::grpc::ServerContext* context, const ::google::cloud::kms::v1::ListCryptoKeyVersionsRequest* request, ::google::cloud::kms::v1::ListCryptoKeyVersionsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCryptoKeyVersions(::grpc::ServerContext* context, ::google::cloud::kms::v1::ListCryptoKeyVersionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::kms::v1::ListCryptoKeyVersionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetKeyRing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetKeyRing() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetKeyRing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKeyRing(::grpc::ServerContext* context, const ::google::cloud::kms::v1::GetKeyRingRequest* request, ::google::cloud::kms::v1::KeyRing* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetKeyRing(::grpc::ServerContext* context, ::google::cloud::kms::v1::GetKeyRingRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::kms::v1::KeyRing>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCryptoKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetCryptoKey() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetCryptoKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCryptoKey(::grpc::ServerContext* context, const ::google::cloud::kms::v1::GetCryptoKeyRequest* request, ::google::cloud::kms::v1::CryptoKey* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCryptoKey(::grpc::ServerContext* context, ::google::cloud::kms::v1::GetCryptoKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::kms::v1::CryptoKey>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCryptoKeyVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetCryptoKeyVersion() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetCryptoKeyVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCryptoKeyVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::GetCryptoKeyVersionRequest* request, ::google::cloud::kms::v1::CryptoKeyVersion* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCryptoKeyVersion(::grpc::ServerContext* context, ::google::cloud::kms::v1::GetCryptoKeyVersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::kms::v1::CryptoKeyVersion>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateKeyRing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateKeyRing() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_CreateKeyRing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateKeyRing(::grpc::ServerContext* context, const ::google::cloud::kms::v1::CreateKeyRingRequest* request, ::google::cloud::kms::v1::KeyRing* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateKeyRing(::grpc::ServerContext* context, ::google::cloud::kms::v1::CreateKeyRingRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::kms::v1::KeyRing>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCryptoKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateCryptoKey() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_CreateCryptoKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCryptoKey(::grpc::ServerContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyRequest* request, ::google::cloud::kms::v1::CryptoKey* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCryptoKey(::grpc::ServerContext* context, ::google::cloud::kms::v1::CreateCryptoKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::kms::v1::CryptoKey>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCryptoKeyVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateCryptoKeyVersion() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_CreateCryptoKeyVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCryptoKeyVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyVersionRequest* request, ::google::cloud::kms::v1::CryptoKeyVersion* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCryptoKeyVersion(::grpc::ServerContext* context, ::google::cloud::kms::v1::CreateCryptoKeyVersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::kms::v1::CryptoKeyVersion>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateCryptoKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateCryptoKey() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_UpdateCryptoKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCryptoKey(::grpc::ServerContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyRequest* request, ::google::cloud::kms::v1::CryptoKey* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCryptoKey(::grpc::ServerContext* context, ::google::cloud::kms::v1::UpdateCryptoKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::kms::v1::CryptoKey>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateCryptoKeyVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateCryptoKeyVersion() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_UpdateCryptoKeyVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCryptoKeyVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyVersionRequest* request, ::google::cloud::kms::v1::CryptoKeyVersion* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCryptoKeyVersion(::grpc::ServerContext* context, ::google::cloud::kms::v1::UpdateCryptoKeyVersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::kms::v1::CryptoKeyVersion>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Encrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Encrypt() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_Encrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Encrypt(::grpc::ServerContext* context, const ::google::cloud::kms::v1::EncryptRequest* request, ::google::cloud::kms::v1::EncryptResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEncrypt(::grpc::ServerContext* context, ::google::cloud::kms::v1::EncryptRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::kms::v1::EncryptResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Decrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Decrypt() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_Decrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Decrypt(::grpc::ServerContext* context, const ::google::cloud::kms::v1::DecryptRequest* request, ::google::cloud::kms::v1::DecryptResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDecrypt(::grpc::ServerContext* context, ::google::cloud::kms::v1::DecryptRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::kms::v1::DecryptResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateCryptoKeyPrimaryVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateCryptoKeyPrimaryVersion() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_UpdateCryptoKeyPrimaryVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCryptoKeyPrimaryVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyPrimaryVersionRequest* request, ::google::cloud::kms::v1::CryptoKey* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCryptoKeyPrimaryVersion(::grpc::ServerContext* context, ::google::cloud::kms::v1::UpdateCryptoKeyPrimaryVersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::kms::v1::CryptoKey>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DestroyCryptoKeyVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DestroyCryptoKeyVersion() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_DestroyCryptoKeyVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyCryptoKeyVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::DestroyCryptoKeyVersionRequest* request, ::google::cloud::kms::v1::CryptoKeyVersion* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDestroyCryptoKeyVersion(::grpc::ServerContext* context, ::google::cloud::kms::v1::DestroyCryptoKeyVersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::kms::v1::CryptoKeyVersion>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RestoreCryptoKeyVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RestoreCryptoKeyVersion() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_RestoreCryptoKeyVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestoreCryptoKeyVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::RestoreCryptoKeyVersionRequest* request, ::google::cloud::kms::v1::CryptoKeyVersion* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRestoreCryptoKeyVersion(::grpc::ServerContext* context, ::google::cloud::kms::v1::RestoreCryptoKeyVersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::kms::v1::CryptoKeyVersion>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListKeyRings<WithAsyncMethod_ListCryptoKeys<WithAsyncMethod_ListCryptoKeyVersions<WithAsyncMethod_GetKeyRing<WithAsyncMethod_GetCryptoKey<WithAsyncMethod_GetCryptoKeyVersion<WithAsyncMethod_CreateKeyRing<WithAsyncMethod_CreateCryptoKey<WithAsyncMethod_CreateCryptoKeyVersion<WithAsyncMethod_UpdateCryptoKey<WithAsyncMethod_UpdateCryptoKeyVersion<WithAsyncMethod_Encrypt<WithAsyncMethod_Decrypt<WithAsyncMethod_UpdateCryptoKeyPrimaryVersion<WithAsyncMethod_DestroyCryptoKeyVersion<WithAsyncMethod_RestoreCryptoKeyVersion<Service > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ListKeyRings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListKeyRings() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListKeyRings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListKeyRings(::grpc::ServerContext* context, const ::google::cloud::kms::v1::ListKeyRingsRequest* request, ::google::cloud::kms::v1::ListKeyRingsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListCryptoKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListCryptoKeys() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListCryptoKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCryptoKeys(::grpc::ServerContext* context, const ::google::cloud::kms::v1::ListCryptoKeysRequest* request, ::google::cloud::kms::v1::ListCryptoKeysResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListCryptoKeyVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListCryptoKeyVersions() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListCryptoKeyVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCryptoKeyVersions(::grpc::ServerContext* context, const ::google::cloud::kms::v1::ListCryptoKeyVersionsRequest* request, ::google::cloud::kms::v1::ListCryptoKeyVersionsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetKeyRing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetKeyRing() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetKeyRing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKeyRing(::grpc::ServerContext* context, const ::google::cloud::kms::v1::GetKeyRingRequest* request, ::google::cloud::kms::v1::KeyRing* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCryptoKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetCryptoKey() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetCryptoKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCryptoKey(::grpc::ServerContext* context, const ::google::cloud::kms::v1::GetCryptoKeyRequest* request, ::google::cloud::kms::v1::CryptoKey* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCryptoKeyVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetCryptoKeyVersion() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetCryptoKeyVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCryptoKeyVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::GetCryptoKeyVersionRequest* request, ::google::cloud::kms::v1::CryptoKeyVersion* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateKeyRing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateKeyRing() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_CreateKeyRing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateKeyRing(::grpc::ServerContext* context, const ::google::cloud::kms::v1::CreateKeyRingRequest* request, ::google::cloud::kms::v1::KeyRing* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateCryptoKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateCryptoKey() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_CreateCryptoKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCryptoKey(::grpc::ServerContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyRequest* request, ::google::cloud::kms::v1::CryptoKey* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateCryptoKeyVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateCryptoKeyVersion() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_CreateCryptoKeyVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCryptoKeyVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyVersionRequest* request, ::google::cloud::kms::v1::CryptoKeyVersion* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateCryptoKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateCryptoKey() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_UpdateCryptoKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCryptoKey(::grpc::ServerContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyRequest* request, ::google::cloud::kms::v1::CryptoKey* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateCryptoKeyVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateCryptoKeyVersion() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_UpdateCryptoKeyVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCryptoKeyVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyVersionRequest* request, ::google::cloud::kms::v1::CryptoKeyVersion* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Encrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Encrypt() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_Encrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Encrypt(::grpc::ServerContext* context, const ::google::cloud::kms::v1::EncryptRequest* request, ::google::cloud::kms::v1::EncryptResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Decrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Decrypt() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_Decrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Decrypt(::grpc::ServerContext* context, const ::google::cloud::kms::v1::DecryptRequest* request, ::google::cloud::kms::v1::DecryptResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateCryptoKeyPrimaryVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateCryptoKeyPrimaryVersion() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_UpdateCryptoKeyPrimaryVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCryptoKeyPrimaryVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyPrimaryVersionRequest* request, ::google::cloud::kms::v1::CryptoKey* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DestroyCryptoKeyVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DestroyCryptoKeyVersion() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_DestroyCryptoKeyVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyCryptoKeyVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::DestroyCryptoKeyVersionRequest* request, ::google::cloud::kms::v1::CryptoKeyVersion* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RestoreCryptoKeyVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RestoreCryptoKeyVersion() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_RestoreCryptoKeyVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestoreCryptoKeyVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::RestoreCryptoKeyVersionRequest* request, ::google::cloud::kms::v1::CryptoKeyVersion* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListKeyRings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListKeyRings() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::kms::v1::ListKeyRingsRequest, ::google::cloud::kms::v1::ListKeyRingsResponse>(std::bind(&WithStreamedUnaryMethod_ListKeyRings<BaseClass>::StreamedListKeyRings, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListKeyRings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListKeyRings(::grpc::ServerContext* context, const ::google::cloud::kms::v1::ListKeyRingsRequest* request, ::google::cloud::kms::v1::ListKeyRingsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListKeyRings(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::kms::v1::ListKeyRingsRequest,::google::cloud::kms::v1::ListKeyRingsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListCryptoKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListCryptoKeys() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::kms::v1::ListCryptoKeysRequest, ::google::cloud::kms::v1::ListCryptoKeysResponse>(std::bind(&WithStreamedUnaryMethod_ListCryptoKeys<BaseClass>::StreamedListCryptoKeys, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListCryptoKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListCryptoKeys(::grpc::ServerContext* context, const ::google::cloud::kms::v1::ListCryptoKeysRequest* request, ::google::cloud::kms::v1::ListCryptoKeysResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListCryptoKeys(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::kms::v1::ListCryptoKeysRequest,::google::cloud::kms::v1::ListCryptoKeysResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListCryptoKeyVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListCryptoKeyVersions() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::kms::v1::ListCryptoKeyVersionsRequest, ::google::cloud::kms::v1::ListCryptoKeyVersionsResponse>(std::bind(&WithStreamedUnaryMethod_ListCryptoKeyVersions<BaseClass>::StreamedListCryptoKeyVersions, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListCryptoKeyVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListCryptoKeyVersions(::grpc::ServerContext* context, const ::google::cloud::kms::v1::ListCryptoKeyVersionsRequest* request, ::google::cloud::kms::v1::ListCryptoKeyVersionsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListCryptoKeyVersions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::kms::v1::ListCryptoKeyVersionsRequest,::google::cloud::kms::v1::ListCryptoKeyVersionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetKeyRing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetKeyRing() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::kms::v1::GetKeyRingRequest, ::google::cloud::kms::v1::KeyRing>(std::bind(&WithStreamedUnaryMethod_GetKeyRing<BaseClass>::StreamedGetKeyRing, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetKeyRing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetKeyRing(::grpc::ServerContext* context, const ::google::cloud::kms::v1::GetKeyRingRequest* request, ::google::cloud::kms::v1::KeyRing* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetKeyRing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::kms::v1::GetKeyRingRequest,::google::cloud::kms::v1::KeyRing>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCryptoKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetCryptoKey() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::kms::v1::GetCryptoKeyRequest, ::google::cloud::kms::v1::CryptoKey>(std::bind(&WithStreamedUnaryMethod_GetCryptoKey<BaseClass>::StreamedGetCryptoKey, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetCryptoKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCryptoKey(::grpc::ServerContext* context, const ::google::cloud::kms::v1::GetCryptoKeyRequest* request, ::google::cloud::kms::v1::CryptoKey* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCryptoKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::kms::v1::GetCryptoKeyRequest,::google::cloud::kms::v1::CryptoKey>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCryptoKeyVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetCryptoKeyVersion() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::kms::v1::GetCryptoKeyVersionRequest, ::google::cloud::kms::v1::CryptoKeyVersion>(std::bind(&WithStreamedUnaryMethod_GetCryptoKeyVersion<BaseClass>::StreamedGetCryptoKeyVersion, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetCryptoKeyVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCryptoKeyVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::GetCryptoKeyVersionRequest* request, ::google::cloud::kms::v1::CryptoKeyVersion* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCryptoKeyVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::kms::v1::GetCryptoKeyVersionRequest,::google::cloud::kms::v1::CryptoKeyVersion>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateKeyRing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateKeyRing() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::kms::v1::CreateKeyRingRequest, ::google::cloud::kms::v1::KeyRing>(std::bind(&WithStreamedUnaryMethod_CreateKeyRing<BaseClass>::StreamedCreateKeyRing, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateKeyRing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateKeyRing(::grpc::ServerContext* context, const ::google::cloud::kms::v1::CreateKeyRingRequest* request, ::google::cloud::kms::v1::KeyRing* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateKeyRing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::kms::v1::CreateKeyRingRequest,::google::cloud::kms::v1::KeyRing>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCryptoKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateCryptoKey() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::kms::v1::CreateCryptoKeyRequest, ::google::cloud::kms::v1::CryptoKey>(std::bind(&WithStreamedUnaryMethod_CreateCryptoKey<BaseClass>::StreamedCreateCryptoKey, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateCryptoKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCryptoKey(::grpc::ServerContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyRequest* request, ::google::cloud::kms::v1::CryptoKey* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCryptoKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::kms::v1::CreateCryptoKeyRequest,::google::cloud::kms::v1::CryptoKey>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCryptoKeyVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateCryptoKeyVersion() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::kms::v1::CreateCryptoKeyVersionRequest, ::google::cloud::kms::v1::CryptoKeyVersion>(std::bind(&WithStreamedUnaryMethod_CreateCryptoKeyVersion<BaseClass>::StreamedCreateCryptoKeyVersion, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateCryptoKeyVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCryptoKeyVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::CreateCryptoKeyVersionRequest* request, ::google::cloud::kms::v1::CryptoKeyVersion* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCryptoKeyVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::kms::v1::CreateCryptoKeyVersionRequest,::google::cloud::kms::v1::CryptoKeyVersion>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateCryptoKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateCryptoKey() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::kms::v1::UpdateCryptoKeyRequest, ::google::cloud::kms::v1::CryptoKey>(std::bind(&WithStreamedUnaryMethod_UpdateCryptoKey<BaseClass>::StreamedUpdateCryptoKey, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateCryptoKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateCryptoKey(::grpc::ServerContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyRequest* request, ::google::cloud::kms::v1::CryptoKey* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateCryptoKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::kms::v1::UpdateCryptoKeyRequest,::google::cloud::kms::v1::CryptoKey>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateCryptoKeyVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateCryptoKeyVersion() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::kms::v1::UpdateCryptoKeyVersionRequest, ::google::cloud::kms::v1::CryptoKeyVersion>(std::bind(&WithStreamedUnaryMethod_UpdateCryptoKeyVersion<BaseClass>::StreamedUpdateCryptoKeyVersion, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateCryptoKeyVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateCryptoKeyVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyVersionRequest* request, ::google::cloud::kms::v1::CryptoKeyVersion* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateCryptoKeyVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::kms::v1::UpdateCryptoKeyVersionRequest,::google::cloud::kms::v1::CryptoKeyVersion>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Encrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Encrypt() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::kms::v1::EncryptRequest, ::google::cloud::kms::v1::EncryptResponse>(std::bind(&WithStreamedUnaryMethod_Encrypt<BaseClass>::StreamedEncrypt, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Encrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Encrypt(::grpc::ServerContext* context, const ::google::cloud::kms::v1::EncryptRequest* request, ::google::cloud::kms::v1::EncryptResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEncrypt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::kms::v1::EncryptRequest,::google::cloud::kms::v1::EncryptResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Decrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Decrypt() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::kms::v1::DecryptRequest, ::google::cloud::kms::v1::DecryptResponse>(std::bind(&WithStreamedUnaryMethod_Decrypt<BaseClass>::StreamedDecrypt, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Decrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Decrypt(::grpc::ServerContext* context, const ::google::cloud::kms::v1::DecryptRequest* request, ::google::cloud::kms::v1::DecryptResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDecrypt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::kms::v1::DecryptRequest,::google::cloud::kms::v1::DecryptResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateCryptoKeyPrimaryVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateCryptoKeyPrimaryVersion() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::kms::v1::UpdateCryptoKeyPrimaryVersionRequest, ::google::cloud::kms::v1::CryptoKey>(std::bind(&WithStreamedUnaryMethod_UpdateCryptoKeyPrimaryVersion<BaseClass>::StreamedUpdateCryptoKeyPrimaryVersion, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateCryptoKeyPrimaryVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateCryptoKeyPrimaryVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::UpdateCryptoKeyPrimaryVersionRequest* request, ::google::cloud::kms::v1::CryptoKey* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateCryptoKeyPrimaryVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::kms::v1::UpdateCryptoKeyPrimaryVersionRequest,::google::cloud::kms::v1::CryptoKey>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DestroyCryptoKeyVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DestroyCryptoKeyVersion() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::kms::v1::DestroyCryptoKeyVersionRequest, ::google::cloud::kms::v1::CryptoKeyVersion>(std::bind(&WithStreamedUnaryMethod_DestroyCryptoKeyVersion<BaseClass>::StreamedDestroyCryptoKeyVersion, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DestroyCryptoKeyVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DestroyCryptoKeyVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::DestroyCryptoKeyVersionRequest* request, ::google::cloud::kms::v1::CryptoKeyVersion* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDestroyCryptoKeyVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::kms::v1::DestroyCryptoKeyVersionRequest,::google::cloud::kms::v1::CryptoKeyVersion>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RestoreCryptoKeyVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RestoreCryptoKeyVersion() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::kms::v1::RestoreCryptoKeyVersionRequest, ::google::cloud::kms::v1::CryptoKeyVersion>(std::bind(&WithStreamedUnaryMethod_RestoreCryptoKeyVersion<BaseClass>::StreamedRestoreCryptoKeyVersion, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RestoreCryptoKeyVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RestoreCryptoKeyVersion(::grpc::ServerContext* context, const ::google::cloud::kms::v1::RestoreCryptoKeyVersionRequest* request, ::google::cloud::kms::v1::CryptoKeyVersion* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRestoreCryptoKeyVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::kms::v1::RestoreCryptoKeyVersionRequest,::google::cloud::kms::v1::CryptoKeyVersion>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListKeyRings<WithStreamedUnaryMethod_ListCryptoKeys<WithStreamedUnaryMethod_ListCryptoKeyVersions<WithStreamedUnaryMethod_GetKeyRing<WithStreamedUnaryMethod_GetCryptoKey<WithStreamedUnaryMethod_GetCryptoKeyVersion<WithStreamedUnaryMethod_CreateKeyRing<WithStreamedUnaryMethod_CreateCryptoKey<WithStreamedUnaryMethod_CreateCryptoKeyVersion<WithStreamedUnaryMethod_UpdateCryptoKey<WithStreamedUnaryMethod_UpdateCryptoKeyVersion<WithStreamedUnaryMethod_Encrypt<WithStreamedUnaryMethod_Decrypt<WithStreamedUnaryMethod_UpdateCryptoKeyPrimaryVersion<WithStreamedUnaryMethod_DestroyCryptoKeyVersion<WithStreamedUnaryMethod_RestoreCryptoKeyVersion<Service > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListKeyRings<WithStreamedUnaryMethod_ListCryptoKeys<WithStreamedUnaryMethod_ListCryptoKeyVersions<WithStreamedUnaryMethod_GetKeyRing<WithStreamedUnaryMethod_GetCryptoKey<WithStreamedUnaryMethod_GetCryptoKeyVersion<WithStreamedUnaryMethod_CreateKeyRing<WithStreamedUnaryMethod_CreateCryptoKey<WithStreamedUnaryMethod_CreateCryptoKeyVersion<WithStreamedUnaryMethod_UpdateCryptoKey<WithStreamedUnaryMethod_UpdateCryptoKeyVersion<WithStreamedUnaryMethod_Encrypt<WithStreamedUnaryMethod_Decrypt<WithStreamedUnaryMethod_UpdateCryptoKeyPrimaryVersion<WithStreamedUnaryMethod_DestroyCryptoKeyVersion<WithStreamedUnaryMethod_RestoreCryptoKeyVersion<Service > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace kms
}  // namespace cloud
}  // namespace google


#endif  // GRPC_google_2fcloud_2fkms_2fv1_2fservice_2eproto__INCLUDED
