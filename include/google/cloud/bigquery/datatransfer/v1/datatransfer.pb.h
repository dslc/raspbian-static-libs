// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/datatransfer/v1/datatransfer.proto

#ifndef PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto
#define PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/cloud/bigquery/datatransfer/v1/transfer.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto 

namespace protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[21];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto
namespace google {
namespace cloud {
namespace bigquery {
namespace datatransfer {
namespace v1 {
class CheckValidCredsRequest;
class CheckValidCredsRequestDefaultTypeInternal;
extern CheckValidCredsRequestDefaultTypeInternal _CheckValidCredsRequest_default_instance_;
class CheckValidCredsResponse;
class CheckValidCredsResponseDefaultTypeInternal;
extern CheckValidCredsResponseDefaultTypeInternal _CheckValidCredsResponse_default_instance_;
class CreateTransferConfigRequest;
class CreateTransferConfigRequestDefaultTypeInternal;
extern CreateTransferConfigRequestDefaultTypeInternal _CreateTransferConfigRequest_default_instance_;
class DataSource;
class DataSourceDefaultTypeInternal;
extern DataSourceDefaultTypeInternal _DataSource_default_instance_;
class DataSourceParameter;
class DataSourceParameterDefaultTypeInternal;
extern DataSourceParameterDefaultTypeInternal _DataSourceParameter_default_instance_;
class DeleteTransferConfigRequest;
class DeleteTransferConfigRequestDefaultTypeInternal;
extern DeleteTransferConfigRequestDefaultTypeInternal _DeleteTransferConfigRequest_default_instance_;
class DeleteTransferRunRequest;
class DeleteTransferRunRequestDefaultTypeInternal;
extern DeleteTransferRunRequestDefaultTypeInternal _DeleteTransferRunRequest_default_instance_;
class GetDataSourceRequest;
class GetDataSourceRequestDefaultTypeInternal;
extern GetDataSourceRequestDefaultTypeInternal _GetDataSourceRequest_default_instance_;
class GetTransferConfigRequest;
class GetTransferConfigRequestDefaultTypeInternal;
extern GetTransferConfigRequestDefaultTypeInternal _GetTransferConfigRequest_default_instance_;
class GetTransferRunRequest;
class GetTransferRunRequestDefaultTypeInternal;
extern GetTransferRunRequestDefaultTypeInternal _GetTransferRunRequest_default_instance_;
class ListDataSourcesRequest;
class ListDataSourcesRequestDefaultTypeInternal;
extern ListDataSourcesRequestDefaultTypeInternal _ListDataSourcesRequest_default_instance_;
class ListDataSourcesResponse;
class ListDataSourcesResponseDefaultTypeInternal;
extern ListDataSourcesResponseDefaultTypeInternal _ListDataSourcesResponse_default_instance_;
class ListTransferConfigsRequest;
class ListTransferConfigsRequestDefaultTypeInternal;
extern ListTransferConfigsRequestDefaultTypeInternal _ListTransferConfigsRequest_default_instance_;
class ListTransferConfigsResponse;
class ListTransferConfigsResponseDefaultTypeInternal;
extern ListTransferConfigsResponseDefaultTypeInternal _ListTransferConfigsResponse_default_instance_;
class ListTransferLogsRequest;
class ListTransferLogsRequestDefaultTypeInternal;
extern ListTransferLogsRequestDefaultTypeInternal _ListTransferLogsRequest_default_instance_;
class ListTransferLogsResponse;
class ListTransferLogsResponseDefaultTypeInternal;
extern ListTransferLogsResponseDefaultTypeInternal _ListTransferLogsResponse_default_instance_;
class ListTransferRunsRequest;
class ListTransferRunsRequestDefaultTypeInternal;
extern ListTransferRunsRequestDefaultTypeInternal _ListTransferRunsRequest_default_instance_;
class ListTransferRunsResponse;
class ListTransferRunsResponseDefaultTypeInternal;
extern ListTransferRunsResponseDefaultTypeInternal _ListTransferRunsResponse_default_instance_;
class ScheduleTransferRunsRequest;
class ScheduleTransferRunsRequestDefaultTypeInternal;
extern ScheduleTransferRunsRequestDefaultTypeInternal _ScheduleTransferRunsRequest_default_instance_;
class ScheduleTransferRunsResponse;
class ScheduleTransferRunsResponseDefaultTypeInternal;
extern ScheduleTransferRunsResponseDefaultTypeInternal _ScheduleTransferRunsResponse_default_instance_;
class UpdateTransferConfigRequest;
class UpdateTransferConfigRequestDefaultTypeInternal;
extern UpdateTransferConfigRequestDefaultTypeInternal _UpdateTransferConfigRequest_default_instance_;
}  // namespace v1
}  // namespace datatransfer
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::CheckValidCredsRequest>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::CheckValidCredsResponse>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::CreateTransferConfigRequest>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::DataSource* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::DataSource>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::DataSourceParameter>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::DeleteTransferConfigRequest>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::DeleteTransferRunRequest>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::GetDataSourceRequest>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::GetTransferConfigRequest>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::GetTransferRunRequest>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::ListDataSourcesRequest>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::ListDataSourcesResponse>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsRequest>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::ListTransferConfigsResponse>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::ListTransferLogsRequest>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::ListTransferLogsResponse>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::ListTransferRunsResponse>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsRequest>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::ScheduleTransferRunsResponse>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::UpdateTransferConfigRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace cloud {
namespace bigquery {
namespace datatransfer {
namespace v1 {

enum DataSourceParameter_Type {
  DataSourceParameter_Type_TYPE_UNSPECIFIED = 0,
  DataSourceParameter_Type_STRING = 1,
  DataSourceParameter_Type_INTEGER = 2,
  DataSourceParameter_Type_DOUBLE = 3,
  DataSourceParameter_Type_BOOLEAN = 4,
  DataSourceParameter_Type_RECORD = 5,
  DataSourceParameter_Type_PLUS_PAGE = 6,
  DataSourceParameter_Type_DataSourceParameter_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DataSourceParameter_Type_DataSourceParameter_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DataSourceParameter_Type_IsValid(int value);
const DataSourceParameter_Type DataSourceParameter_Type_Type_MIN = DataSourceParameter_Type_TYPE_UNSPECIFIED;
const DataSourceParameter_Type DataSourceParameter_Type_Type_MAX = DataSourceParameter_Type_PLUS_PAGE;
const int DataSourceParameter_Type_Type_ARRAYSIZE = DataSourceParameter_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataSourceParameter_Type_descriptor();
inline const ::std::string& DataSourceParameter_Type_Name(DataSourceParameter_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataSourceParameter_Type_descriptor(), value);
}
inline bool DataSourceParameter_Type_Parse(
    const ::std::string& name, DataSourceParameter_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataSourceParameter_Type>(
    DataSourceParameter_Type_descriptor(), name, value);
}
enum DataSource_AuthorizationType {
  DataSource_AuthorizationType_AUTHORIZATION_TYPE_UNSPECIFIED = 0,
  DataSource_AuthorizationType_AUTHORIZATION_CODE = 1,
  DataSource_AuthorizationType_GOOGLE_PLUS_AUTHORIZATION_CODE = 2,
  DataSource_AuthorizationType_DataSource_AuthorizationType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DataSource_AuthorizationType_DataSource_AuthorizationType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DataSource_AuthorizationType_IsValid(int value);
const DataSource_AuthorizationType DataSource_AuthorizationType_AuthorizationType_MIN = DataSource_AuthorizationType_AUTHORIZATION_TYPE_UNSPECIFIED;
const DataSource_AuthorizationType DataSource_AuthorizationType_AuthorizationType_MAX = DataSource_AuthorizationType_GOOGLE_PLUS_AUTHORIZATION_CODE;
const int DataSource_AuthorizationType_AuthorizationType_ARRAYSIZE = DataSource_AuthorizationType_AuthorizationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataSource_AuthorizationType_descriptor();
inline const ::std::string& DataSource_AuthorizationType_Name(DataSource_AuthorizationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataSource_AuthorizationType_descriptor(), value);
}
inline bool DataSource_AuthorizationType_Parse(
    const ::std::string& name, DataSource_AuthorizationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataSource_AuthorizationType>(
    DataSource_AuthorizationType_descriptor(), name, value);
}
enum DataSource_DataRefreshType {
  DataSource_DataRefreshType_DATA_REFRESH_TYPE_UNSPECIFIED = 0,
  DataSource_DataRefreshType_SLIDING_WINDOW = 1,
  DataSource_DataRefreshType_CUSTOM_SLIDING_WINDOW = 2,
  DataSource_DataRefreshType_DataSource_DataRefreshType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DataSource_DataRefreshType_DataSource_DataRefreshType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DataSource_DataRefreshType_IsValid(int value);
const DataSource_DataRefreshType DataSource_DataRefreshType_DataRefreshType_MIN = DataSource_DataRefreshType_DATA_REFRESH_TYPE_UNSPECIFIED;
const DataSource_DataRefreshType DataSource_DataRefreshType_DataRefreshType_MAX = DataSource_DataRefreshType_CUSTOM_SLIDING_WINDOW;
const int DataSource_DataRefreshType_DataRefreshType_ARRAYSIZE = DataSource_DataRefreshType_DataRefreshType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataSource_DataRefreshType_descriptor();
inline const ::std::string& DataSource_DataRefreshType_Name(DataSource_DataRefreshType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataSource_DataRefreshType_descriptor(), value);
}
inline bool DataSource_DataRefreshType_Parse(
    const ::std::string& name, DataSource_DataRefreshType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataSource_DataRefreshType>(
    DataSource_DataRefreshType_descriptor(), name, value);
}
enum ListTransferRunsRequest_RunAttempt {
  ListTransferRunsRequest_RunAttempt_RUN_ATTEMPT_UNSPECIFIED = 0,
  ListTransferRunsRequest_RunAttempt_LATEST = 1,
  ListTransferRunsRequest_RunAttempt_ListTransferRunsRequest_RunAttempt_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ListTransferRunsRequest_RunAttempt_ListTransferRunsRequest_RunAttempt_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ListTransferRunsRequest_RunAttempt_IsValid(int value);
const ListTransferRunsRequest_RunAttempt ListTransferRunsRequest_RunAttempt_RunAttempt_MIN = ListTransferRunsRequest_RunAttempt_RUN_ATTEMPT_UNSPECIFIED;
const ListTransferRunsRequest_RunAttempt ListTransferRunsRequest_RunAttempt_RunAttempt_MAX = ListTransferRunsRequest_RunAttempt_LATEST;
const int ListTransferRunsRequest_RunAttempt_RunAttempt_ARRAYSIZE = ListTransferRunsRequest_RunAttempt_RunAttempt_MAX + 1;

const ::google::protobuf::EnumDescriptor* ListTransferRunsRequest_RunAttempt_descriptor();
inline const ::std::string& ListTransferRunsRequest_RunAttempt_Name(ListTransferRunsRequest_RunAttempt value) {
  return ::google::protobuf::internal::NameOfEnum(
    ListTransferRunsRequest_RunAttempt_descriptor(), value);
}
inline bool ListTransferRunsRequest_RunAttempt_Parse(
    const ::std::string& name, ListTransferRunsRequest_RunAttempt* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ListTransferRunsRequest_RunAttempt>(
    ListTransferRunsRequest_RunAttempt_descriptor(), name, value);
}
// ===================================================================

class DataSourceParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.DataSourceParameter) */ {
 public:
  DataSourceParameter();
  virtual ~DataSourceParameter();

  DataSourceParameter(const DataSourceParameter& from);

  inline DataSourceParameter& operator=(const DataSourceParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataSourceParameter(DataSourceParameter&& from) noexcept
    : DataSourceParameter() {
    *this = ::std::move(from);
  }

  inline DataSourceParameter& operator=(DataSourceParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataSourceParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataSourceParameter* internal_default_instance() {
    return reinterpret_cast<const DataSourceParameter*>(
               &_DataSourceParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DataSourceParameter* other);
  friend void swap(DataSourceParameter& a, DataSourceParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataSourceParameter* New() const final {
    return CreateMaybeMessage<DataSourceParameter>(NULL);
  }

  DataSourceParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataSourceParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataSourceParameter& from);
  void MergeFrom(const DataSourceParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataSourceParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DataSourceParameter_Type Type;
  static const Type TYPE_UNSPECIFIED =
    DataSourceParameter_Type_TYPE_UNSPECIFIED;
  static const Type STRING =
    DataSourceParameter_Type_STRING;
  static const Type INTEGER =
    DataSourceParameter_Type_INTEGER;
  static const Type DOUBLE =
    DataSourceParameter_Type_DOUBLE;
  static const Type BOOLEAN =
    DataSourceParameter_Type_BOOLEAN;
  static const Type RECORD =
    DataSourceParameter_Type_RECORD;
  static const Type PLUS_PAGE =
    DataSourceParameter_Type_PLUS_PAGE;
  static inline bool Type_IsValid(int value) {
    return DataSourceParameter_Type_IsValid(value);
  }
  static const Type Type_MIN =
    DataSourceParameter_Type_Type_MIN;
  static const Type Type_MAX =
    DataSourceParameter_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    DataSourceParameter_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return DataSourceParameter_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return DataSourceParameter_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return DataSourceParameter_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string allowed_values = 8;
  int allowed_values_size() const;
  void clear_allowed_values();
  static const int kAllowedValuesFieldNumber = 8;
  const ::std::string& allowed_values(int index) const;
  ::std::string* mutable_allowed_values(int index);
  void set_allowed_values(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_allowed_values(int index, ::std::string&& value);
  #endif
  void set_allowed_values(int index, const char* value);
  void set_allowed_values(int index, const char* value, size_t size);
  ::std::string* add_allowed_values();
  void add_allowed_values(const ::std::string& value);
  #if LANG_CXX11
  void add_allowed_values(::std::string&& value);
  #endif
  void add_allowed_values(const char* value);
  void add_allowed_values(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& allowed_values() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_allowed_values();

  // repeated .google.cloud.bigquery.datatransfer.v1.DataSourceParameter fields = 11;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 11;
  ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter* mutable_fields(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter >*
      mutable_fields();
  const ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter& fields(int index) const;
  ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter* add_fields();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter >&
      fields() const;

  // string param_id = 1;
  void clear_param_id();
  static const int kParamIdFieldNumber = 1;
  const ::std::string& param_id() const;
  void set_param_id(const ::std::string& value);
  #if LANG_CXX11
  void set_param_id(::std::string&& value);
  #endif
  void set_param_id(const char* value);
  void set_param_id(const char* value, size_t size);
  ::std::string* mutable_param_id();
  ::std::string* release_param_id();
  void set_allocated_param_id(::std::string* param_id);

  // string display_name = 2;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string validation_regex = 7;
  void clear_validation_regex();
  static const int kValidationRegexFieldNumber = 7;
  const ::std::string& validation_regex() const;
  void set_validation_regex(const ::std::string& value);
  #if LANG_CXX11
  void set_validation_regex(::std::string&& value);
  #endif
  void set_validation_regex(const char* value);
  void set_validation_regex(const char* value, size_t size);
  ::std::string* mutable_validation_regex();
  ::std::string* release_validation_regex();
  void set_allocated_validation_regex(::std::string* validation_regex);

  // string validation_description = 12;
  void clear_validation_description();
  static const int kValidationDescriptionFieldNumber = 12;
  const ::std::string& validation_description() const;
  void set_validation_description(const ::std::string& value);
  #if LANG_CXX11
  void set_validation_description(::std::string&& value);
  #endif
  void set_validation_description(const char* value);
  void set_validation_description(const char* value, size_t size);
  ::std::string* mutable_validation_description();
  ::std::string* release_validation_description();
  void set_allocated_validation_description(::std::string* validation_description);

  // string validation_help_url = 13;
  void clear_validation_help_url();
  static const int kValidationHelpUrlFieldNumber = 13;
  const ::std::string& validation_help_url() const;
  void set_validation_help_url(const ::std::string& value);
  #if LANG_CXX11
  void set_validation_help_url(::std::string&& value);
  #endif
  void set_validation_help_url(const char* value);
  void set_validation_help_url(const char* value, size_t size);
  ::std::string* mutable_validation_help_url();
  ::std::string* release_validation_help_url();
  void set_allocated_validation_help_url(::std::string* validation_help_url);

  // .google.protobuf.DoubleValue min_value = 9;
  bool has_min_value() const;
  void clear_min_value();
  static const int kMinValueFieldNumber = 9;
  private:
  const ::google::protobuf::DoubleValue& _internal_min_value() const;
  public:
  const ::google::protobuf::DoubleValue& min_value() const;
  ::google::protobuf::DoubleValue* release_min_value();
  ::google::protobuf::DoubleValue* mutable_min_value();
  void set_allocated_min_value(::google::protobuf::DoubleValue* min_value);

  // .google.protobuf.DoubleValue max_value = 10;
  bool has_max_value() const;
  void clear_max_value();
  static const int kMaxValueFieldNumber = 10;
  private:
  const ::google::protobuf::DoubleValue& _internal_max_value() const;
  public:
  const ::google::protobuf::DoubleValue& max_value() const;
  ::google::protobuf::DoubleValue* release_max_value();
  ::google::protobuf::DoubleValue* mutable_max_value();
  void set_allocated_max_value(::google::protobuf::DoubleValue* max_value);

  // .google.cloud.bigquery.datatransfer.v1.DataSourceParameter.Type type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter_Type type() const;
  void set_type(::google::cloud::bigquery::datatransfer::v1::DataSourceParameter_Type value);

  // bool required = 5;
  void clear_required();
  static const int kRequiredFieldNumber = 5;
  bool required() const;
  void set_required(bool value);

  // bool repeated = 6;
  void clear_repeated();
  static const int kRepeatedFieldNumber = 6;
  bool repeated() const;
  void set_repeated(bool value);

  // bool immutable = 14;
  void clear_immutable();
  static const int kImmutableFieldNumber = 14;
  bool immutable() const;
  void set_immutable(bool value);

  // bool recurse = 15;
  void clear_recurse();
  static const int kRecurseFieldNumber = 15;
  bool recurse() const;
  void set_recurse(bool value);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.DataSourceParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> allowed_values_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter > fields_;
  ::google::protobuf::internal::ArenaStringPtr param_id_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr validation_regex_;
  ::google::protobuf::internal::ArenaStringPtr validation_description_;
  ::google::protobuf::internal::ArenaStringPtr validation_help_url_;
  ::google::protobuf::DoubleValue* min_value_;
  ::google::protobuf::DoubleValue* max_value_;
  int type_;
  bool required_;
  bool repeated_;
  bool immutable_;
  bool recurse_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataSource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.DataSource) */ {
 public:
  DataSource();
  virtual ~DataSource();

  DataSource(const DataSource& from);

  inline DataSource& operator=(const DataSource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataSource(DataSource&& from) noexcept
    : DataSource() {
    *this = ::std::move(from);
  }

  inline DataSource& operator=(DataSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataSource* internal_default_instance() {
    return reinterpret_cast<const DataSource*>(
               &_DataSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DataSource* other);
  friend void swap(DataSource& a, DataSource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataSource* New() const final {
    return CreateMaybeMessage<DataSource>(NULL);
  }

  DataSource* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataSource>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataSource& from);
  void MergeFrom(const DataSource& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataSource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DataSource_AuthorizationType AuthorizationType;
  static const AuthorizationType AUTHORIZATION_TYPE_UNSPECIFIED =
    DataSource_AuthorizationType_AUTHORIZATION_TYPE_UNSPECIFIED;
  static const AuthorizationType AUTHORIZATION_CODE =
    DataSource_AuthorizationType_AUTHORIZATION_CODE;
  static const AuthorizationType GOOGLE_PLUS_AUTHORIZATION_CODE =
    DataSource_AuthorizationType_GOOGLE_PLUS_AUTHORIZATION_CODE;
  static inline bool AuthorizationType_IsValid(int value) {
    return DataSource_AuthorizationType_IsValid(value);
  }
  static const AuthorizationType AuthorizationType_MIN =
    DataSource_AuthorizationType_AuthorizationType_MIN;
  static const AuthorizationType AuthorizationType_MAX =
    DataSource_AuthorizationType_AuthorizationType_MAX;
  static const int AuthorizationType_ARRAYSIZE =
    DataSource_AuthorizationType_AuthorizationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AuthorizationType_descriptor() {
    return DataSource_AuthorizationType_descriptor();
  }
  static inline const ::std::string& AuthorizationType_Name(AuthorizationType value) {
    return DataSource_AuthorizationType_Name(value);
  }
  static inline bool AuthorizationType_Parse(const ::std::string& name,
      AuthorizationType* value) {
    return DataSource_AuthorizationType_Parse(name, value);
  }

  typedef DataSource_DataRefreshType DataRefreshType;
  static const DataRefreshType DATA_REFRESH_TYPE_UNSPECIFIED =
    DataSource_DataRefreshType_DATA_REFRESH_TYPE_UNSPECIFIED;
  static const DataRefreshType SLIDING_WINDOW =
    DataSource_DataRefreshType_SLIDING_WINDOW;
  static const DataRefreshType CUSTOM_SLIDING_WINDOW =
    DataSource_DataRefreshType_CUSTOM_SLIDING_WINDOW;
  static inline bool DataRefreshType_IsValid(int value) {
    return DataSource_DataRefreshType_IsValid(value);
  }
  static const DataRefreshType DataRefreshType_MIN =
    DataSource_DataRefreshType_DataRefreshType_MIN;
  static const DataRefreshType DataRefreshType_MAX =
    DataSource_DataRefreshType_DataRefreshType_MAX;
  static const int DataRefreshType_ARRAYSIZE =
    DataSource_DataRefreshType_DataRefreshType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataRefreshType_descriptor() {
    return DataSource_DataRefreshType_descriptor();
  }
  static inline const ::std::string& DataRefreshType_Name(DataRefreshType value) {
    return DataSource_DataRefreshType_Name(value);
  }
  static inline bool DataRefreshType_Parse(const ::std::string& name,
      DataRefreshType* value) {
    return DataSource_DataRefreshType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string scopes = 6;
  int scopes_size() const;
  void clear_scopes();
  static const int kScopesFieldNumber = 6;
  const ::std::string& scopes(int index) const;
  ::std::string* mutable_scopes(int index);
  void set_scopes(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_scopes(int index, ::std::string&& value);
  #endif
  void set_scopes(int index, const char* value);
  void set_scopes(int index, const char* value, size_t size);
  ::std::string* add_scopes();
  void add_scopes(const ::std::string& value);
  #if LANG_CXX11
  void add_scopes(::std::string&& value);
  #endif
  void add_scopes(const char* value);
  void add_scopes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& scopes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_scopes();

  // repeated .google.cloud.bigquery.datatransfer.v1.DataSourceParameter parameters = 12;
  int parameters_size() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 12;
  ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter* mutable_parameters(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter >*
      mutable_parameters();
  const ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter& parameters(int index) const;
  ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter* add_parameters();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter >&
      parameters() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string data_source_id = 2;
  void clear_data_source_id();
  static const int kDataSourceIdFieldNumber = 2;
  const ::std::string& data_source_id() const;
  void set_data_source_id(const ::std::string& value);
  #if LANG_CXX11
  void set_data_source_id(::std::string&& value);
  #endif
  void set_data_source_id(const char* value);
  void set_data_source_id(const char* value, size_t size);
  ::std::string* mutable_data_source_id();
  ::std::string* release_data_source_id();
  void set_allocated_data_source_id(::std::string* data_source_id);

  // string display_name = 3;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 3;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string description = 4;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string client_id = 5;
  void clear_client_id();
  static const int kClientIdFieldNumber = 5;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // string default_schedule = 10;
  void clear_default_schedule();
  static const int kDefaultScheduleFieldNumber = 10;
  const ::std::string& default_schedule() const;
  void set_default_schedule(const ::std::string& value);
  #if LANG_CXX11
  void set_default_schedule(::std::string&& value);
  #endif
  void set_default_schedule(const char* value);
  void set_default_schedule(const char* value, size_t size);
  ::std::string* mutable_default_schedule();
  ::std::string* release_default_schedule();
  void set_allocated_default_schedule(::std::string* default_schedule);

  // string help_url = 13;
  void clear_help_url();
  static const int kHelpUrlFieldNumber = 13;
  const ::std::string& help_url() const;
  void set_help_url(const ::std::string& value);
  #if LANG_CXX11
  void set_help_url(::std::string&& value);
  #endif
  void set_help_url(const char* value);
  void set_help_url(const char* value, size_t size);
  ::std::string* mutable_help_url();
  ::std::string* release_help_url();
  void set_allocated_help_url(::std::string* help_url);

  // .google.protobuf.Duration minimum_schedule_interval = 18;
  bool has_minimum_schedule_interval() const;
  void clear_minimum_schedule_interval();
  static const int kMinimumScheduleIntervalFieldNumber = 18;
  private:
  const ::google::protobuf::Duration& _internal_minimum_schedule_interval() const;
  public:
  const ::google::protobuf::Duration& minimum_schedule_interval() const;
  ::google::protobuf::Duration* release_minimum_schedule_interval();
  ::google::protobuf::Duration* mutable_minimum_schedule_interval();
  void set_allocated_minimum_schedule_interval(::google::protobuf::Duration* minimum_schedule_interval);

  // .google.cloud.bigquery.datatransfer.v1.TransferType transfer_type = 7;
  void clear_transfer_type();
  static const int kTransferTypeFieldNumber = 7;
  ::google::cloud::bigquery::datatransfer::v1::TransferType transfer_type() const;
  void set_transfer_type(::google::cloud::bigquery::datatransfer::v1::TransferType value);

  // int32 update_deadline_seconds = 9;
  void clear_update_deadline_seconds();
  static const int kUpdateDeadlineSecondsFieldNumber = 9;
  ::google::protobuf::int32 update_deadline_seconds() const;
  void set_update_deadline_seconds(::google::protobuf::int32 value);

  // bool supports_multiple_transfers = 8;
  void clear_supports_multiple_transfers();
  static const int kSupportsMultipleTransfersFieldNumber = 8;
  bool supports_multiple_transfers() const;
  void set_supports_multiple_transfers(bool value);

  // bool supports_custom_schedule = 11;
  void clear_supports_custom_schedule();
  static const int kSupportsCustomScheduleFieldNumber = 11;
  bool supports_custom_schedule() const;
  void set_supports_custom_schedule(bool value);

  // bool manual_runs_disabled = 17;
  void clear_manual_runs_disabled();
  static const int kManualRunsDisabledFieldNumber = 17;
  bool manual_runs_disabled() const;
  void set_manual_runs_disabled(bool value);

  // .google.cloud.bigquery.datatransfer.v1.DataSource.AuthorizationType authorization_type = 14;
  void clear_authorization_type();
  static const int kAuthorizationTypeFieldNumber = 14;
  ::google::cloud::bigquery::datatransfer::v1::DataSource_AuthorizationType authorization_type() const;
  void set_authorization_type(::google::cloud::bigquery::datatransfer::v1::DataSource_AuthorizationType value);

  // .google.cloud.bigquery.datatransfer.v1.DataSource.DataRefreshType data_refresh_type = 15;
  void clear_data_refresh_type();
  static const int kDataRefreshTypeFieldNumber = 15;
  ::google::cloud::bigquery::datatransfer::v1::DataSource_DataRefreshType data_refresh_type() const;
  void set_data_refresh_type(::google::cloud::bigquery::datatransfer::v1::DataSource_DataRefreshType value);

  // int32 default_data_refresh_window_days = 16;
  void clear_default_data_refresh_window_days();
  static const int kDefaultDataRefreshWindowDaysFieldNumber = 16;
  ::google::protobuf::int32 default_data_refresh_window_days() const;
  void set_default_data_refresh_window_days(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.DataSource)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> scopes_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter > parameters_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr data_source_id_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr default_schedule_;
  ::google::protobuf::internal::ArenaStringPtr help_url_;
  ::google::protobuf::Duration* minimum_schedule_interval_;
  int transfer_type_;
  ::google::protobuf::int32 update_deadline_seconds_;
  bool supports_multiple_transfers_;
  bool supports_custom_schedule_;
  bool manual_runs_disabled_;
  int authorization_type_;
  int data_refresh_type_;
  ::google::protobuf::int32 default_data_refresh_window_days_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetDataSourceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.GetDataSourceRequest) */ {
 public:
  GetDataSourceRequest();
  virtual ~GetDataSourceRequest();

  GetDataSourceRequest(const GetDataSourceRequest& from);

  inline GetDataSourceRequest& operator=(const GetDataSourceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDataSourceRequest(GetDataSourceRequest&& from) noexcept
    : GetDataSourceRequest() {
    *this = ::std::move(from);
  }

  inline GetDataSourceRequest& operator=(GetDataSourceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDataSourceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDataSourceRequest* internal_default_instance() {
    return reinterpret_cast<const GetDataSourceRequest*>(
               &_GetDataSourceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GetDataSourceRequest* other);
  friend void swap(GetDataSourceRequest& a, GetDataSourceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDataSourceRequest* New() const final {
    return CreateMaybeMessage<GetDataSourceRequest>(NULL);
  }

  GetDataSourceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetDataSourceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetDataSourceRequest& from);
  void MergeFrom(const GetDataSourceRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDataSourceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.GetDataSourceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListDataSourcesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest) */ {
 public:
  ListDataSourcesRequest();
  virtual ~ListDataSourcesRequest();

  ListDataSourcesRequest(const ListDataSourcesRequest& from);

  inline ListDataSourcesRequest& operator=(const ListDataSourcesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListDataSourcesRequest(ListDataSourcesRequest&& from) noexcept
    : ListDataSourcesRequest() {
    *this = ::std::move(from);
  }

  inline ListDataSourcesRequest& operator=(ListDataSourcesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListDataSourcesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListDataSourcesRequest* internal_default_instance() {
    return reinterpret_cast<const ListDataSourcesRequest*>(
               &_ListDataSourcesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ListDataSourcesRequest* other);
  friend void swap(ListDataSourcesRequest& a, ListDataSourcesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListDataSourcesRequest* New() const final {
    return CreateMaybeMessage<ListDataSourcesRequest>(NULL);
  }

  ListDataSourcesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListDataSourcesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListDataSourcesRequest& from);
  void MergeFrom(const ListDataSourcesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDataSourcesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int32 page_size = 4;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 4;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListDataSourcesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse) */ {
 public:
  ListDataSourcesResponse();
  virtual ~ListDataSourcesResponse();

  ListDataSourcesResponse(const ListDataSourcesResponse& from);

  inline ListDataSourcesResponse& operator=(const ListDataSourcesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListDataSourcesResponse(ListDataSourcesResponse&& from) noexcept
    : ListDataSourcesResponse() {
    *this = ::std::move(from);
  }

  inline ListDataSourcesResponse& operator=(ListDataSourcesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListDataSourcesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListDataSourcesResponse* internal_default_instance() {
    return reinterpret_cast<const ListDataSourcesResponse*>(
               &_ListDataSourcesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ListDataSourcesResponse* other);
  friend void swap(ListDataSourcesResponse& a, ListDataSourcesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListDataSourcesResponse* New() const final {
    return CreateMaybeMessage<ListDataSourcesResponse>(NULL);
  }

  ListDataSourcesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListDataSourcesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListDataSourcesResponse& from);
  void MergeFrom(const ListDataSourcesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDataSourcesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.bigquery.datatransfer.v1.DataSource data_sources = 1;
  int data_sources_size() const;
  void clear_data_sources();
  static const int kDataSourcesFieldNumber = 1;
  ::google::cloud::bigquery::datatransfer::v1::DataSource* mutable_data_sources(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSource >*
      mutable_data_sources();
  const ::google::cloud::bigquery::datatransfer::v1::DataSource& data_sources(int index) const;
  ::google::cloud::bigquery::datatransfer::v1::DataSource* add_data_sources();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSource >&
      data_sources() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSource > data_sources_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateTransferConfigRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest) */ {
 public:
  CreateTransferConfigRequest();
  virtual ~CreateTransferConfigRequest();

  CreateTransferConfigRequest(const CreateTransferConfigRequest& from);

  inline CreateTransferConfigRequest& operator=(const CreateTransferConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateTransferConfigRequest(CreateTransferConfigRequest&& from) noexcept
    : CreateTransferConfigRequest() {
    *this = ::std::move(from);
  }

  inline CreateTransferConfigRequest& operator=(CreateTransferConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateTransferConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTransferConfigRequest* internal_default_instance() {
    return reinterpret_cast<const CreateTransferConfigRequest*>(
               &_CreateTransferConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CreateTransferConfigRequest* other);
  friend void swap(CreateTransferConfigRequest& a, CreateTransferConfigRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateTransferConfigRequest* New() const final {
    return CreateMaybeMessage<CreateTransferConfigRequest>(NULL);
  }

  CreateTransferConfigRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateTransferConfigRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateTransferConfigRequest& from);
  void MergeFrom(const CreateTransferConfigRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTransferConfigRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string authorization_code = 3;
  void clear_authorization_code();
  static const int kAuthorizationCodeFieldNumber = 3;
  const ::std::string& authorization_code() const;
  void set_authorization_code(const ::std::string& value);
  #if LANG_CXX11
  void set_authorization_code(::std::string&& value);
  #endif
  void set_authorization_code(const char* value);
  void set_authorization_code(const char* value, size_t size);
  ::std::string* mutable_authorization_code();
  ::std::string* release_authorization_code();
  void set_allocated_authorization_code(::std::string* authorization_code);

  // .google.cloud.bigquery.datatransfer.v1.TransferConfig transfer_config = 2;
  bool has_transfer_config() const;
  void clear_transfer_config();
  static const int kTransferConfigFieldNumber = 2;
  private:
  const ::google::cloud::bigquery::datatransfer::v1::TransferConfig& _internal_transfer_config() const;
  public:
  const ::google::cloud::bigquery::datatransfer::v1::TransferConfig& transfer_config() const;
  ::google::cloud::bigquery::datatransfer::v1::TransferConfig* release_transfer_config();
  ::google::cloud::bigquery::datatransfer::v1::TransferConfig* mutable_transfer_config();
  void set_allocated_transfer_config(::google::cloud::bigquery::datatransfer::v1::TransferConfig* transfer_config);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr authorization_code_;
  ::google::cloud::bigquery::datatransfer::v1::TransferConfig* transfer_config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateTransferConfigRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest) */ {
 public:
  UpdateTransferConfigRequest();
  virtual ~UpdateTransferConfigRequest();

  UpdateTransferConfigRequest(const UpdateTransferConfigRequest& from);

  inline UpdateTransferConfigRequest& operator=(const UpdateTransferConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateTransferConfigRequest(UpdateTransferConfigRequest&& from) noexcept
    : UpdateTransferConfigRequest() {
    *this = ::std::move(from);
  }

  inline UpdateTransferConfigRequest& operator=(UpdateTransferConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateTransferConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateTransferConfigRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateTransferConfigRequest*>(
               &_UpdateTransferConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(UpdateTransferConfigRequest* other);
  friend void swap(UpdateTransferConfigRequest& a, UpdateTransferConfigRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateTransferConfigRequest* New() const final {
    return CreateMaybeMessage<UpdateTransferConfigRequest>(NULL);
  }

  UpdateTransferConfigRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateTransferConfigRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateTransferConfigRequest& from);
  void MergeFrom(const UpdateTransferConfigRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateTransferConfigRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string authorization_code = 3;
  void clear_authorization_code();
  static const int kAuthorizationCodeFieldNumber = 3;
  const ::std::string& authorization_code() const;
  void set_authorization_code(const ::std::string& value);
  #if LANG_CXX11
  void set_authorization_code(::std::string&& value);
  #endif
  void set_authorization_code(const char* value);
  void set_authorization_code(const char* value, size_t size);
  ::std::string* mutable_authorization_code();
  ::std::string* release_authorization_code();
  void set_allocated_authorization_code(::std::string* authorization_code);

  // .google.cloud.bigquery.datatransfer.v1.TransferConfig transfer_config = 1;
  bool has_transfer_config() const;
  void clear_transfer_config();
  static const int kTransferConfigFieldNumber = 1;
  private:
  const ::google::cloud::bigquery::datatransfer::v1::TransferConfig& _internal_transfer_config() const;
  public:
  const ::google::cloud::bigquery::datatransfer::v1::TransferConfig& transfer_config() const;
  ::google::cloud::bigquery::datatransfer::v1::TransferConfig* release_transfer_config();
  ::google::cloud::bigquery::datatransfer::v1::TransferConfig* mutable_transfer_config();
  void set_allocated_transfer_config(::google::cloud::bigquery::datatransfer::v1::TransferConfig* transfer_config);

  // .google.protobuf.FieldMask update_mask = 4;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 4;
  private:
  const ::google::protobuf::FieldMask& _internal_update_mask() const;
  public:
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr authorization_code_;
  ::google::cloud::bigquery::datatransfer::v1::TransferConfig* transfer_config_;
  ::google::protobuf::FieldMask* update_mask_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetTransferConfigRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.GetTransferConfigRequest) */ {
 public:
  GetTransferConfigRequest();
  virtual ~GetTransferConfigRequest();

  GetTransferConfigRequest(const GetTransferConfigRequest& from);

  inline GetTransferConfigRequest& operator=(const GetTransferConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTransferConfigRequest(GetTransferConfigRequest&& from) noexcept
    : GetTransferConfigRequest() {
    *this = ::std::move(from);
  }

  inline GetTransferConfigRequest& operator=(GetTransferConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTransferConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTransferConfigRequest* internal_default_instance() {
    return reinterpret_cast<const GetTransferConfigRequest*>(
               &_GetTransferConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GetTransferConfigRequest* other);
  friend void swap(GetTransferConfigRequest& a, GetTransferConfigRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTransferConfigRequest* New() const final {
    return CreateMaybeMessage<GetTransferConfigRequest>(NULL);
  }

  GetTransferConfigRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTransferConfigRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTransferConfigRequest& from);
  void MergeFrom(const GetTransferConfigRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTransferConfigRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.GetTransferConfigRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteTransferConfigRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.DeleteTransferConfigRequest) */ {
 public:
  DeleteTransferConfigRequest();
  virtual ~DeleteTransferConfigRequest();

  DeleteTransferConfigRequest(const DeleteTransferConfigRequest& from);

  inline DeleteTransferConfigRequest& operator=(const DeleteTransferConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteTransferConfigRequest(DeleteTransferConfigRequest&& from) noexcept
    : DeleteTransferConfigRequest() {
    *this = ::std::move(from);
  }

  inline DeleteTransferConfigRequest& operator=(DeleteTransferConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteTransferConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteTransferConfigRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteTransferConfigRequest*>(
               &_DeleteTransferConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(DeleteTransferConfigRequest* other);
  friend void swap(DeleteTransferConfigRequest& a, DeleteTransferConfigRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteTransferConfigRequest* New() const final {
    return CreateMaybeMessage<DeleteTransferConfigRequest>(NULL);
  }

  DeleteTransferConfigRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteTransferConfigRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteTransferConfigRequest& from);
  void MergeFrom(const DeleteTransferConfigRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTransferConfigRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.DeleteTransferConfigRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetTransferRunRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.GetTransferRunRequest) */ {
 public:
  GetTransferRunRequest();
  virtual ~GetTransferRunRequest();

  GetTransferRunRequest(const GetTransferRunRequest& from);

  inline GetTransferRunRequest& operator=(const GetTransferRunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTransferRunRequest(GetTransferRunRequest&& from) noexcept
    : GetTransferRunRequest() {
    *this = ::std::move(from);
  }

  inline GetTransferRunRequest& operator=(GetTransferRunRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTransferRunRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTransferRunRequest* internal_default_instance() {
    return reinterpret_cast<const GetTransferRunRequest*>(
               &_GetTransferRunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GetTransferRunRequest* other);
  friend void swap(GetTransferRunRequest& a, GetTransferRunRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTransferRunRequest* New() const final {
    return CreateMaybeMessage<GetTransferRunRequest>(NULL);
  }

  GetTransferRunRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTransferRunRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTransferRunRequest& from);
  void MergeFrom(const GetTransferRunRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTransferRunRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.GetTransferRunRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteTransferRunRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.DeleteTransferRunRequest) */ {
 public:
  DeleteTransferRunRequest();
  virtual ~DeleteTransferRunRequest();

  DeleteTransferRunRequest(const DeleteTransferRunRequest& from);

  inline DeleteTransferRunRequest& operator=(const DeleteTransferRunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteTransferRunRequest(DeleteTransferRunRequest&& from) noexcept
    : DeleteTransferRunRequest() {
    *this = ::std::move(from);
  }

  inline DeleteTransferRunRequest& operator=(DeleteTransferRunRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteTransferRunRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteTransferRunRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteTransferRunRequest*>(
               &_DeleteTransferRunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(DeleteTransferRunRequest* other);
  friend void swap(DeleteTransferRunRequest& a, DeleteTransferRunRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteTransferRunRequest* New() const final {
    return CreateMaybeMessage<DeleteTransferRunRequest>(NULL);
  }

  DeleteTransferRunRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteTransferRunRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteTransferRunRequest& from);
  void MergeFrom(const DeleteTransferRunRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTransferRunRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.DeleteTransferRunRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListTransferConfigsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest) */ {
 public:
  ListTransferConfigsRequest();
  virtual ~ListTransferConfigsRequest();

  ListTransferConfigsRequest(const ListTransferConfigsRequest& from);

  inline ListTransferConfigsRequest& operator=(const ListTransferConfigsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListTransferConfigsRequest(ListTransferConfigsRequest&& from) noexcept
    : ListTransferConfigsRequest() {
    *this = ::std::move(from);
  }

  inline ListTransferConfigsRequest& operator=(ListTransferConfigsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListTransferConfigsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTransferConfigsRequest* internal_default_instance() {
    return reinterpret_cast<const ListTransferConfigsRequest*>(
               &_ListTransferConfigsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ListTransferConfigsRequest* other);
  friend void swap(ListTransferConfigsRequest& a, ListTransferConfigsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListTransferConfigsRequest* New() const final {
    return CreateMaybeMessage<ListTransferConfigsRequest>(NULL);
  }

  ListTransferConfigsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListTransferConfigsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListTransferConfigsRequest& from);
  void MergeFrom(const ListTransferConfigsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTransferConfigsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string data_source_ids = 2;
  int data_source_ids_size() const;
  void clear_data_source_ids();
  static const int kDataSourceIdsFieldNumber = 2;
  const ::std::string& data_source_ids(int index) const;
  ::std::string* mutable_data_source_ids(int index);
  void set_data_source_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_data_source_ids(int index, ::std::string&& value);
  #endif
  void set_data_source_ids(int index, const char* value);
  void set_data_source_ids(int index, const char* value, size_t size);
  ::std::string* add_data_source_ids();
  void add_data_source_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_data_source_ids(::std::string&& value);
  #endif
  void add_data_source_ids(const char* value);
  void add_data_source_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& data_source_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_data_source_ids();

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int32 page_size = 4;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 4;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> data_source_ids_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListTransferConfigsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse) */ {
 public:
  ListTransferConfigsResponse();
  virtual ~ListTransferConfigsResponse();

  ListTransferConfigsResponse(const ListTransferConfigsResponse& from);

  inline ListTransferConfigsResponse& operator=(const ListTransferConfigsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListTransferConfigsResponse(ListTransferConfigsResponse&& from) noexcept
    : ListTransferConfigsResponse() {
    *this = ::std::move(from);
  }

  inline ListTransferConfigsResponse& operator=(ListTransferConfigsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListTransferConfigsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTransferConfigsResponse* internal_default_instance() {
    return reinterpret_cast<const ListTransferConfigsResponse*>(
               &_ListTransferConfigsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(ListTransferConfigsResponse* other);
  friend void swap(ListTransferConfigsResponse& a, ListTransferConfigsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListTransferConfigsResponse* New() const final {
    return CreateMaybeMessage<ListTransferConfigsResponse>(NULL);
  }

  ListTransferConfigsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListTransferConfigsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListTransferConfigsResponse& from);
  void MergeFrom(const ListTransferConfigsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTransferConfigsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.bigquery.datatransfer.v1.TransferConfig transfer_configs = 1;
  int transfer_configs_size() const;
  void clear_transfer_configs();
  static const int kTransferConfigsFieldNumber = 1;
  ::google::cloud::bigquery::datatransfer::v1::TransferConfig* mutable_transfer_configs(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferConfig >*
      mutable_transfer_configs();
  const ::google::cloud::bigquery::datatransfer::v1::TransferConfig& transfer_configs(int index) const;
  ::google::cloud::bigquery::datatransfer::v1::TransferConfig* add_transfer_configs();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferConfig >&
      transfer_configs() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferConfig > transfer_configs_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListTransferRunsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest) */ {
 public:
  ListTransferRunsRequest();
  virtual ~ListTransferRunsRequest();

  ListTransferRunsRequest(const ListTransferRunsRequest& from);

  inline ListTransferRunsRequest& operator=(const ListTransferRunsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListTransferRunsRequest(ListTransferRunsRequest&& from) noexcept
    : ListTransferRunsRequest() {
    *this = ::std::move(from);
  }

  inline ListTransferRunsRequest& operator=(ListTransferRunsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListTransferRunsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTransferRunsRequest* internal_default_instance() {
    return reinterpret_cast<const ListTransferRunsRequest*>(
               &_ListTransferRunsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(ListTransferRunsRequest* other);
  friend void swap(ListTransferRunsRequest& a, ListTransferRunsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListTransferRunsRequest* New() const final {
    return CreateMaybeMessage<ListTransferRunsRequest>(NULL);
  }

  ListTransferRunsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListTransferRunsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListTransferRunsRequest& from);
  void MergeFrom(const ListTransferRunsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTransferRunsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ListTransferRunsRequest_RunAttempt RunAttempt;
  static const RunAttempt RUN_ATTEMPT_UNSPECIFIED =
    ListTransferRunsRequest_RunAttempt_RUN_ATTEMPT_UNSPECIFIED;
  static const RunAttempt LATEST =
    ListTransferRunsRequest_RunAttempt_LATEST;
  static inline bool RunAttempt_IsValid(int value) {
    return ListTransferRunsRequest_RunAttempt_IsValid(value);
  }
  static const RunAttempt RunAttempt_MIN =
    ListTransferRunsRequest_RunAttempt_RunAttempt_MIN;
  static const RunAttempt RunAttempt_MAX =
    ListTransferRunsRequest_RunAttempt_RunAttempt_MAX;
  static const int RunAttempt_ARRAYSIZE =
    ListTransferRunsRequest_RunAttempt_RunAttempt_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RunAttempt_descriptor() {
    return ListTransferRunsRequest_RunAttempt_descriptor();
  }
  static inline const ::std::string& RunAttempt_Name(RunAttempt value) {
    return ListTransferRunsRequest_RunAttempt_Name(value);
  }
  static inline bool RunAttempt_Parse(const ::std::string& name,
      RunAttempt* value) {
    return ListTransferRunsRequest_RunAttempt_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.cloud.bigquery.datatransfer.v1.TransferState states = 2;
  int states_size() const;
  void clear_states();
  static const int kStatesFieldNumber = 2;
  ::google::cloud::bigquery::datatransfer::v1::TransferState states(int index) const;
  void set_states(int index, ::google::cloud::bigquery::datatransfer::v1::TransferState value);
  void add_states(::google::cloud::bigquery::datatransfer::v1::TransferState value);
  const ::google::protobuf::RepeatedField<int>& states() const;
  ::google::protobuf::RepeatedField<int>* mutable_states();

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int32 page_size = 4;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 4;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // .google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.RunAttempt run_attempt = 5;
  void clear_run_attempt();
  static const int kRunAttemptFieldNumber = 5;
  ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest_RunAttempt run_attempt() const;
  void set_run_attempt(::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest_RunAttempt value);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> states_;
  mutable int _states_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  int run_attempt_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListTransferRunsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse) */ {
 public:
  ListTransferRunsResponse();
  virtual ~ListTransferRunsResponse();

  ListTransferRunsResponse(const ListTransferRunsResponse& from);

  inline ListTransferRunsResponse& operator=(const ListTransferRunsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListTransferRunsResponse(ListTransferRunsResponse&& from) noexcept
    : ListTransferRunsResponse() {
    *this = ::std::move(from);
  }

  inline ListTransferRunsResponse& operator=(ListTransferRunsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListTransferRunsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTransferRunsResponse* internal_default_instance() {
    return reinterpret_cast<const ListTransferRunsResponse*>(
               &_ListTransferRunsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(ListTransferRunsResponse* other);
  friend void swap(ListTransferRunsResponse& a, ListTransferRunsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListTransferRunsResponse* New() const final {
    return CreateMaybeMessage<ListTransferRunsResponse>(NULL);
  }

  ListTransferRunsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListTransferRunsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListTransferRunsResponse& from);
  void MergeFrom(const ListTransferRunsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTransferRunsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.bigquery.datatransfer.v1.TransferRun transfer_runs = 1;
  int transfer_runs_size() const;
  void clear_transfer_runs();
  static const int kTransferRunsFieldNumber = 1;
  ::google::cloud::bigquery::datatransfer::v1::TransferRun* mutable_transfer_runs(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferRun >*
      mutable_transfer_runs();
  const ::google::cloud::bigquery::datatransfer::v1::TransferRun& transfer_runs(int index) const;
  ::google::cloud::bigquery::datatransfer::v1::TransferRun* add_transfer_runs();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferRun >&
      transfer_runs() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferRun > transfer_runs_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListTransferLogsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest) */ {
 public:
  ListTransferLogsRequest();
  virtual ~ListTransferLogsRequest();

  ListTransferLogsRequest(const ListTransferLogsRequest& from);

  inline ListTransferLogsRequest& operator=(const ListTransferLogsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListTransferLogsRequest(ListTransferLogsRequest&& from) noexcept
    : ListTransferLogsRequest() {
    *this = ::std::move(from);
  }

  inline ListTransferLogsRequest& operator=(ListTransferLogsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListTransferLogsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTransferLogsRequest* internal_default_instance() {
    return reinterpret_cast<const ListTransferLogsRequest*>(
               &_ListTransferLogsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(ListTransferLogsRequest* other);
  friend void swap(ListTransferLogsRequest& a, ListTransferLogsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListTransferLogsRequest* New() const final {
    return CreateMaybeMessage<ListTransferLogsRequest>(NULL);
  }

  ListTransferLogsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListTransferLogsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListTransferLogsRequest& from);
  void MergeFrom(const ListTransferLogsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTransferLogsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.bigquery.datatransfer.v1.TransferMessage.MessageSeverity message_types = 6;
  int message_types_size() const;
  void clear_message_types();
  static const int kMessageTypesFieldNumber = 6;
  ::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity message_types(int index) const;
  void set_message_types(int index, ::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity value);
  void add_message_types(::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity value);
  const ::google::protobuf::RepeatedField<int>& message_types() const;
  ::google::protobuf::RepeatedField<int>* mutable_message_types();

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string page_token = 4;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 4;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int32 page_size = 5;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 5;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> message_types_;
  mutable int _message_types_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListTransferLogsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse) */ {
 public:
  ListTransferLogsResponse();
  virtual ~ListTransferLogsResponse();

  ListTransferLogsResponse(const ListTransferLogsResponse& from);

  inline ListTransferLogsResponse& operator=(const ListTransferLogsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListTransferLogsResponse(ListTransferLogsResponse&& from) noexcept
    : ListTransferLogsResponse() {
    *this = ::std::move(from);
  }

  inline ListTransferLogsResponse& operator=(ListTransferLogsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListTransferLogsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTransferLogsResponse* internal_default_instance() {
    return reinterpret_cast<const ListTransferLogsResponse*>(
               &_ListTransferLogsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(ListTransferLogsResponse* other);
  friend void swap(ListTransferLogsResponse& a, ListTransferLogsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListTransferLogsResponse* New() const final {
    return CreateMaybeMessage<ListTransferLogsResponse>(NULL);
  }

  ListTransferLogsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListTransferLogsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListTransferLogsResponse& from);
  void MergeFrom(const ListTransferLogsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTransferLogsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.bigquery.datatransfer.v1.TransferMessage transfer_messages = 1;
  int transfer_messages_size() const;
  void clear_transfer_messages();
  static const int kTransferMessagesFieldNumber = 1;
  ::google::cloud::bigquery::datatransfer::v1::TransferMessage* mutable_transfer_messages(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferMessage >*
      mutable_transfer_messages();
  const ::google::cloud::bigquery::datatransfer::v1::TransferMessage& transfer_messages(int index) const;
  ::google::cloud::bigquery::datatransfer::v1::TransferMessage* add_transfer_messages();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferMessage >&
      transfer_messages() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferMessage > transfer_messages_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckValidCredsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.CheckValidCredsRequest) */ {
 public:
  CheckValidCredsRequest();
  virtual ~CheckValidCredsRequest();

  CheckValidCredsRequest(const CheckValidCredsRequest& from);

  inline CheckValidCredsRequest& operator=(const CheckValidCredsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckValidCredsRequest(CheckValidCredsRequest&& from) noexcept
    : CheckValidCredsRequest() {
    *this = ::std::move(from);
  }

  inline CheckValidCredsRequest& operator=(CheckValidCredsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckValidCredsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckValidCredsRequest* internal_default_instance() {
    return reinterpret_cast<const CheckValidCredsRequest*>(
               &_CheckValidCredsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(CheckValidCredsRequest* other);
  friend void swap(CheckValidCredsRequest& a, CheckValidCredsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckValidCredsRequest* New() const final {
    return CreateMaybeMessage<CheckValidCredsRequest>(NULL);
  }

  CheckValidCredsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckValidCredsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckValidCredsRequest& from);
  void MergeFrom(const CheckValidCredsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckValidCredsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.CheckValidCredsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckValidCredsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.CheckValidCredsResponse) */ {
 public:
  CheckValidCredsResponse();
  virtual ~CheckValidCredsResponse();

  CheckValidCredsResponse(const CheckValidCredsResponse& from);

  inline CheckValidCredsResponse& operator=(const CheckValidCredsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckValidCredsResponse(CheckValidCredsResponse&& from) noexcept
    : CheckValidCredsResponse() {
    *this = ::std::move(from);
  }

  inline CheckValidCredsResponse& operator=(CheckValidCredsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckValidCredsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckValidCredsResponse* internal_default_instance() {
    return reinterpret_cast<const CheckValidCredsResponse*>(
               &_CheckValidCredsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(CheckValidCredsResponse* other);
  friend void swap(CheckValidCredsResponse& a, CheckValidCredsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckValidCredsResponse* New() const final {
    return CreateMaybeMessage<CheckValidCredsResponse>(NULL);
  }

  CheckValidCredsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckValidCredsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckValidCredsResponse& from);
  void MergeFrom(const CheckValidCredsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckValidCredsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool has_valid_creds = 1;
  void clear_has_valid_creds();
  static const int kHasValidCredsFieldNumber = 1;
  bool has_valid_creds() const;
  void set_has_valid_creds(bool value);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.CheckValidCredsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool has_valid_creds_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScheduleTransferRunsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest) */ {
 public:
  ScheduleTransferRunsRequest();
  virtual ~ScheduleTransferRunsRequest();

  ScheduleTransferRunsRequest(const ScheduleTransferRunsRequest& from);

  inline ScheduleTransferRunsRequest& operator=(const ScheduleTransferRunsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScheduleTransferRunsRequest(ScheduleTransferRunsRequest&& from) noexcept
    : ScheduleTransferRunsRequest() {
    *this = ::std::move(from);
  }

  inline ScheduleTransferRunsRequest& operator=(ScheduleTransferRunsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScheduleTransferRunsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScheduleTransferRunsRequest* internal_default_instance() {
    return reinterpret_cast<const ScheduleTransferRunsRequest*>(
               &_ScheduleTransferRunsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(ScheduleTransferRunsRequest* other);
  friend void swap(ScheduleTransferRunsRequest& a, ScheduleTransferRunsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScheduleTransferRunsRequest* New() const final {
    return CreateMaybeMessage<ScheduleTransferRunsRequest>(NULL);
  }

  ScheduleTransferRunsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScheduleTransferRunsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScheduleTransferRunsRequest& from);
  void MergeFrom(const ScheduleTransferRunsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScheduleTransferRunsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // .google.protobuf.Timestamp start_time = 2;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 2;
  private:
  const ::google::protobuf::Timestamp& _internal_start_time() const;
  public:
  const ::google::protobuf::Timestamp& start_time() const;
  ::google::protobuf::Timestamp* release_start_time();
  ::google::protobuf::Timestamp* mutable_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* start_time);

  // .google.protobuf.Timestamp end_time = 3;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 3;
  private:
  const ::google::protobuf::Timestamp& _internal_end_time() const;
  public:
  const ::google::protobuf::Timestamp& end_time() const;
  ::google::protobuf::Timestamp* release_end_time();
  ::google::protobuf::Timestamp* mutable_end_time();
  void set_allocated_end_time(::google::protobuf::Timestamp* end_time);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::Timestamp* start_time_;
  ::google::protobuf::Timestamp* end_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScheduleTransferRunsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsResponse) */ {
 public:
  ScheduleTransferRunsResponse();
  virtual ~ScheduleTransferRunsResponse();

  ScheduleTransferRunsResponse(const ScheduleTransferRunsResponse& from);

  inline ScheduleTransferRunsResponse& operator=(const ScheduleTransferRunsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScheduleTransferRunsResponse(ScheduleTransferRunsResponse&& from) noexcept
    : ScheduleTransferRunsResponse() {
    *this = ::std::move(from);
  }

  inline ScheduleTransferRunsResponse& operator=(ScheduleTransferRunsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScheduleTransferRunsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScheduleTransferRunsResponse* internal_default_instance() {
    return reinterpret_cast<const ScheduleTransferRunsResponse*>(
               &_ScheduleTransferRunsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(ScheduleTransferRunsResponse* other);
  friend void swap(ScheduleTransferRunsResponse& a, ScheduleTransferRunsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScheduleTransferRunsResponse* New() const final {
    return CreateMaybeMessage<ScheduleTransferRunsResponse>(NULL);
  }

  ScheduleTransferRunsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScheduleTransferRunsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScheduleTransferRunsResponse& from);
  void MergeFrom(const ScheduleTransferRunsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScheduleTransferRunsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.bigquery.datatransfer.v1.TransferRun runs = 1;
  int runs_size() const;
  void clear_runs();
  static const int kRunsFieldNumber = 1;
  ::google::cloud::bigquery::datatransfer::v1::TransferRun* mutable_runs(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferRun >*
      mutable_runs();
  const ::google::cloud::bigquery::datatransfer::v1::TransferRun& runs(int index) const;
  ::google::cloud::bigquery::datatransfer::v1::TransferRun* add_runs();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferRun >&
      runs() const;

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferRun > runs_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataSourceParameter

// string param_id = 1;
inline void DataSourceParameter::clear_param_id() {
  param_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataSourceParameter::param_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.param_id)
  return param_id_.GetNoArena();
}
inline void DataSourceParameter::set_param_id(const ::std::string& value) {
  
  param_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.param_id)
}
#if LANG_CXX11
inline void DataSourceParameter::set_param_id(::std::string&& value) {
  
  param_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.param_id)
}
#endif
inline void DataSourceParameter::set_param_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  param_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.param_id)
}
inline void DataSourceParameter::set_param_id(const char* value, size_t size) {
  
  param_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.param_id)
}
inline ::std::string* DataSourceParameter::mutable_param_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.param_id)
  return param_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSourceParameter::release_param_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.param_id)
  
  return param_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSourceParameter::set_allocated_param_id(::std::string* param_id) {
  if (param_id != NULL) {
    
  } else {
    
  }
  param_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.param_id)
}

// string display_name = 2;
inline void DataSourceParameter::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataSourceParameter::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.display_name)
  return display_name_.GetNoArena();
}
inline void DataSourceParameter::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.display_name)
}
#if LANG_CXX11
inline void DataSourceParameter::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.display_name)
}
#endif
inline void DataSourceParameter::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.display_name)
}
inline void DataSourceParameter::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.display_name)
}
inline ::std::string* DataSourceParameter::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSourceParameter::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSourceParameter::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.display_name)
}

// string description = 3;
inline void DataSourceParameter::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataSourceParameter::description() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.description)
  return description_.GetNoArena();
}
inline void DataSourceParameter::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.description)
}
#if LANG_CXX11
inline void DataSourceParameter::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.description)
}
#endif
inline void DataSourceParameter::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.description)
}
inline void DataSourceParameter::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.description)
}
inline ::std::string* DataSourceParameter::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSourceParameter::release_description() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSourceParameter::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.description)
}

// .google.cloud.bigquery.datatransfer.v1.DataSourceParameter.Type type = 4;
inline void DataSourceParameter::clear_type() {
  type_ = 0;
}
inline ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter_Type DataSourceParameter::type() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.type)
  return static_cast< ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter_Type >(type_);
}
inline void DataSourceParameter::set_type(::google::cloud::bigquery::datatransfer::v1::DataSourceParameter_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.type)
}

// bool required = 5;
inline void DataSourceParameter::clear_required() {
  required_ = false;
}
inline bool DataSourceParameter::required() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.required)
  return required_;
}
inline void DataSourceParameter::set_required(bool value) {
  
  required_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.required)
}

// bool repeated = 6;
inline void DataSourceParameter::clear_repeated() {
  repeated_ = false;
}
inline bool DataSourceParameter::repeated() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.repeated)
  return repeated_;
}
inline void DataSourceParameter::set_repeated(bool value) {
  
  repeated_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.repeated)
}

// string validation_regex = 7;
inline void DataSourceParameter::clear_validation_regex() {
  validation_regex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataSourceParameter::validation_regex() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_regex)
  return validation_regex_.GetNoArena();
}
inline void DataSourceParameter::set_validation_regex(const ::std::string& value) {
  
  validation_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_regex)
}
#if LANG_CXX11
inline void DataSourceParameter::set_validation_regex(::std::string&& value) {
  
  validation_regex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_regex)
}
#endif
inline void DataSourceParameter::set_validation_regex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  validation_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_regex)
}
inline void DataSourceParameter::set_validation_regex(const char* value, size_t size) {
  
  validation_regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_regex)
}
inline ::std::string* DataSourceParameter::mutable_validation_regex() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_regex)
  return validation_regex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSourceParameter::release_validation_regex() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_regex)
  
  return validation_regex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSourceParameter::set_allocated_validation_regex(::std::string* validation_regex) {
  if (validation_regex != NULL) {
    
  } else {
    
  }
  validation_regex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), validation_regex);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_regex)
}

// repeated string allowed_values = 8;
inline int DataSourceParameter::allowed_values_size() const {
  return allowed_values_.size();
}
inline void DataSourceParameter::clear_allowed_values() {
  allowed_values_.Clear();
}
inline const ::std::string& DataSourceParameter::allowed_values(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.allowed_values)
  return allowed_values_.Get(index);
}
inline ::std::string* DataSourceParameter::mutable_allowed_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.allowed_values)
  return allowed_values_.Mutable(index);
}
inline void DataSourceParameter::set_allowed_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.allowed_values)
  allowed_values_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DataSourceParameter::set_allowed_values(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.allowed_values)
  allowed_values_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DataSourceParameter::set_allowed_values(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  allowed_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.allowed_values)
}
inline void DataSourceParameter::set_allowed_values(int index, const char* value, size_t size) {
  allowed_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.allowed_values)
}
inline ::std::string* DataSourceParameter::add_allowed_values() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.allowed_values)
  return allowed_values_.Add();
}
inline void DataSourceParameter::add_allowed_values(const ::std::string& value) {
  allowed_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.allowed_values)
}
#if LANG_CXX11
inline void DataSourceParameter::add_allowed_values(::std::string&& value) {
  allowed_values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.allowed_values)
}
#endif
inline void DataSourceParameter::add_allowed_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  allowed_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.allowed_values)
}
inline void DataSourceParameter::add_allowed_values(const char* value, size_t size) {
  allowed_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.allowed_values)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DataSourceParameter::allowed_values() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.allowed_values)
  return allowed_values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DataSourceParameter::mutable_allowed_values() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.allowed_values)
  return &allowed_values_;
}

// .google.protobuf.DoubleValue min_value = 9;
inline bool DataSourceParameter::has_min_value() const {
  return this != internal_default_instance() && min_value_ != NULL;
}
inline const ::google::protobuf::DoubleValue& DataSourceParameter::_internal_min_value() const {
  return *min_value_;
}
inline const ::google::protobuf::DoubleValue& DataSourceParameter::min_value() const {
  const ::google::protobuf::DoubleValue* p = min_value_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.min_value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::DoubleValue*>(
      &::google::protobuf::_DoubleValue_default_instance_);
}
inline ::google::protobuf::DoubleValue* DataSourceParameter::release_min_value() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.min_value)
  
  ::google::protobuf::DoubleValue* temp = min_value_;
  min_value_ = NULL;
  return temp;
}
inline ::google::protobuf::DoubleValue* DataSourceParameter::mutable_min_value() {
  
  if (min_value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::DoubleValue>(GetArenaNoVirtual());
    min_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.min_value)
  return min_value_;
}
inline void DataSourceParameter::set_allocated_min_value(::google::protobuf::DoubleValue* min_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(min_value_);
  }
  if (min_value) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(min_value)->GetArena();
    if (message_arena != submessage_arena) {
      min_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, min_value, submessage_arena);
    }
    
  } else {
    
  }
  min_value_ = min_value;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.min_value)
}

// .google.protobuf.DoubleValue max_value = 10;
inline bool DataSourceParameter::has_max_value() const {
  return this != internal_default_instance() && max_value_ != NULL;
}
inline const ::google::protobuf::DoubleValue& DataSourceParameter::_internal_max_value() const {
  return *max_value_;
}
inline const ::google::protobuf::DoubleValue& DataSourceParameter::max_value() const {
  const ::google::protobuf::DoubleValue* p = max_value_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.max_value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::DoubleValue*>(
      &::google::protobuf::_DoubleValue_default_instance_);
}
inline ::google::protobuf::DoubleValue* DataSourceParameter::release_max_value() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.max_value)
  
  ::google::protobuf::DoubleValue* temp = max_value_;
  max_value_ = NULL;
  return temp;
}
inline ::google::protobuf::DoubleValue* DataSourceParameter::mutable_max_value() {
  
  if (max_value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::DoubleValue>(GetArenaNoVirtual());
    max_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.max_value)
  return max_value_;
}
inline void DataSourceParameter::set_allocated_max_value(::google::protobuf::DoubleValue* max_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(max_value_);
  }
  if (max_value) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(max_value)->GetArena();
    if (message_arena != submessage_arena) {
      max_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_value, submessage_arena);
    }
    
  } else {
    
  }
  max_value_ = max_value;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.max_value)
}

// repeated .google.cloud.bigquery.datatransfer.v1.DataSourceParameter fields = 11;
inline int DataSourceParameter::fields_size() const {
  return fields_.size();
}
inline void DataSourceParameter::clear_fields() {
  fields_.Clear();
}
inline ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter* DataSourceParameter::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.fields)
  return fields_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter >*
DataSourceParameter::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.fields)
  return &fields_;
}
inline const ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter& DataSourceParameter::fields(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.fields)
  return fields_.Get(index);
}
inline ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter* DataSourceParameter::add_fields() {
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.fields)
  return fields_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter >&
DataSourceParameter::fields() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.fields)
  return fields_;
}

// string validation_description = 12;
inline void DataSourceParameter::clear_validation_description() {
  validation_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataSourceParameter::validation_description() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_description)
  return validation_description_.GetNoArena();
}
inline void DataSourceParameter::set_validation_description(const ::std::string& value) {
  
  validation_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_description)
}
#if LANG_CXX11
inline void DataSourceParameter::set_validation_description(::std::string&& value) {
  
  validation_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_description)
}
#endif
inline void DataSourceParameter::set_validation_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  validation_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_description)
}
inline void DataSourceParameter::set_validation_description(const char* value, size_t size) {
  
  validation_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_description)
}
inline ::std::string* DataSourceParameter::mutable_validation_description() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_description)
  return validation_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSourceParameter::release_validation_description() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_description)
  
  return validation_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSourceParameter::set_allocated_validation_description(::std::string* validation_description) {
  if (validation_description != NULL) {
    
  } else {
    
  }
  validation_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), validation_description);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_description)
}

// string validation_help_url = 13;
inline void DataSourceParameter::clear_validation_help_url() {
  validation_help_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataSourceParameter::validation_help_url() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_help_url)
  return validation_help_url_.GetNoArena();
}
inline void DataSourceParameter::set_validation_help_url(const ::std::string& value) {
  
  validation_help_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_help_url)
}
#if LANG_CXX11
inline void DataSourceParameter::set_validation_help_url(::std::string&& value) {
  
  validation_help_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_help_url)
}
#endif
inline void DataSourceParameter::set_validation_help_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  validation_help_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_help_url)
}
inline void DataSourceParameter::set_validation_help_url(const char* value, size_t size) {
  
  validation_help_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_help_url)
}
inline ::std::string* DataSourceParameter::mutable_validation_help_url() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_help_url)
  return validation_help_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSourceParameter::release_validation_help_url() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_help_url)
  
  return validation_help_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSourceParameter::set_allocated_validation_help_url(::std::string* validation_help_url) {
  if (validation_help_url != NULL) {
    
  } else {
    
  }
  validation_help_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), validation_help_url);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_help_url)
}

// bool immutable = 14;
inline void DataSourceParameter::clear_immutable() {
  immutable_ = false;
}
inline bool DataSourceParameter::immutable() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.immutable)
  return immutable_;
}
inline void DataSourceParameter::set_immutable(bool value) {
  
  immutable_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.immutable)
}

// bool recurse = 15;
inline void DataSourceParameter::clear_recurse() {
  recurse_ = false;
}
inline bool DataSourceParameter::recurse() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.recurse)
  return recurse_;
}
inline void DataSourceParameter::set_recurse(bool value) {
  
  recurse_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSourceParameter.recurse)
}

// -------------------------------------------------------------------

// DataSource

// string name = 1;
inline void DataSource::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataSource::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.name)
  return name_.GetNoArena();
}
inline void DataSource::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.name)
}
#if LANG_CXX11
inline void DataSource::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.DataSource.name)
}
#endif
inline void DataSource::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.DataSource.name)
}
inline void DataSource::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.DataSource.name)
}
inline ::std::string* DataSource::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSource.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSource::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSource.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSource::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSource.name)
}

// string data_source_id = 2;
inline void DataSource::clear_data_source_id() {
  data_source_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataSource::data_source_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.data_source_id)
  return data_source_id_.GetNoArena();
}
inline void DataSource::set_data_source_id(const ::std::string& value) {
  
  data_source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.data_source_id)
}
#if LANG_CXX11
inline void DataSource::set_data_source_id(::std::string&& value) {
  
  data_source_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.DataSource.data_source_id)
}
#endif
inline void DataSource::set_data_source_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.DataSource.data_source_id)
}
inline void DataSource::set_data_source_id(const char* value, size_t size) {
  
  data_source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.DataSource.data_source_id)
}
inline ::std::string* DataSource::mutable_data_source_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSource.data_source_id)
  return data_source_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSource::release_data_source_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSource.data_source_id)
  
  return data_source_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSource::set_allocated_data_source_id(::std::string* data_source_id) {
  if (data_source_id != NULL) {
    
  } else {
    
  }
  data_source_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_source_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSource.data_source_id)
}

// string display_name = 3;
inline void DataSource::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataSource::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.display_name)
  return display_name_.GetNoArena();
}
inline void DataSource::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.display_name)
}
#if LANG_CXX11
inline void DataSource::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.DataSource.display_name)
}
#endif
inline void DataSource::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.DataSource.display_name)
}
inline void DataSource::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.DataSource.display_name)
}
inline ::std::string* DataSource::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSource.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSource::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSource.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSource::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSource.display_name)
}

// string description = 4;
inline void DataSource::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataSource::description() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.description)
  return description_.GetNoArena();
}
inline void DataSource::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.description)
}
#if LANG_CXX11
inline void DataSource::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.DataSource.description)
}
#endif
inline void DataSource::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.DataSource.description)
}
inline void DataSource::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.DataSource.description)
}
inline ::std::string* DataSource::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSource.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSource::release_description() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSource.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSource::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSource.description)
}

// string client_id = 5;
inline void DataSource::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataSource::client_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.client_id)
  return client_id_.GetNoArena();
}
inline void DataSource::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.client_id)
}
#if LANG_CXX11
inline void DataSource::set_client_id(::std::string&& value) {
  
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.DataSource.client_id)
}
#endif
inline void DataSource::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.DataSource.client_id)
}
inline void DataSource::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.DataSource.client_id)
}
inline ::std::string* DataSource::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSource.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSource::release_client_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSource.client_id)
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSource::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSource.client_id)
}

// repeated string scopes = 6;
inline int DataSource::scopes_size() const {
  return scopes_.size();
}
inline void DataSource::clear_scopes() {
  scopes_.Clear();
}
inline const ::std::string& DataSource::scopes(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.scopes)
  return scopes_.Get(index);
}
inline ::std::string* DataSource::mutable_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSource.scopes)
  return scopes_.Mutable(index);
}
inline void DataSource::set_scopes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.scopes)
  scopes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DataSource::set_scopes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.scopes)
  scopes_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DataSource::set_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.DataSource.scopes)
}
inline void DataSource::set_scopes(int index, const char* value, size_t size) {
  scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.DataSource.scopes)
}
inline ::std::string* DataSource::add_scopes() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.bigquery.datatransfer.v1.DataSource.scopes)
  return scopes_.Add();
}
inline void DataSource::add_scopes(const ::std::string& value) {
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.DataSource.scopes)
}
#if LANG_CXX11
inline void DataSource::add_scopes(::std::string&& value) {
  scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.DataSource.scopes)
}
#endif
inline void DataSource::add_scopes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.bigquery.datatransfer.v1.DataSource.scopes)
}
inline void DataSource::add_scopes(const char* value, size_t size) {
  scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.bigquery.datatransfer.v1.DataSource.scopes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DataSource::scopes() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.datatransfer.v1.DataSource.scopes)
  return scopes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DataSource::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.datatransfer.v1.DataSource.scopes)
  return &scopes_;
}

// .google.cloud.bigquery.datatransfer.v1.TransferType transfer_type = 7;
inline void DataSource::clear_transfer_type() {
  transfer_type_ = 0;
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferType DataSource::transfer_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.transfer_type)
  return static_cast< ::google::cloud::bigquery::datatransfer::v1::TransferType >(transfer_type_);
}
inline void DataSource::set_transfer_type(::google::cloud::bigquery::datatransfer::v1::TransferType value) {
  
  transfer_type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.transfer_type)
}

// bool supports_multiple_transfers = 8;
inline void DataSource::clear_supports_multiple_transfers() {
  supports_multiple_transfers_ = false;
}
inline bool DataSource::supports_multiple_transfers() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.supports_multiple_transfers)
  return supports_multiple_transfers_;
}
inline void DataSource::set_supports_multiple_transfers(bool value) {
  
  supports_multiple_transfers_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.supports_multiple_transfers)
}

// int32 update_deadline_seconds = 9;
inline void DataSource::clear_update_deadline_seconds() {
  update_deadline_seconds_ = 0;
}
inline ::google::protobuf::int32 DataSource::update_deadline_seconds() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.update_deadline_seconds)
  return update_deadline_seconds_;
}
inline void DataSource::set_update_deadline_seconds(::google::protobuf::int32 value) {
  
  update_deadline_seconds_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.update_deadline_seconds)
}

// string default_schedule = 10;
inline void DataSource::clear_default_schedule() {
  default_schedule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataSource::default_schedule() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.default_schedule)
  return default_schedule_.GetNoArena();
}
inline void DataSource::set_default_schedule(const ::std::string& value) {
  
  default_schedule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.default_schedule)
}
#if LANG_CXX11
inline void DataSource::set_default_schedule(::std::string&& value) {
  
  default_schedule_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.DataSource.default_schedule)
}
#endif
inline void DataSource::set_default_schedule(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  default_schedule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.DataSource.default_schedule)
}
inline void DataSource::set_default_schedule(const char* value, size_t size) {
  
  default_schedule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.DataSource.default_schedule)
}
inline ::std::string* DataSource::mutable_default_schedule() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSource.default_schedule)
  return default_schedule_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSource::release_default_schedule() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSource.default_schedule)
  
  return default_schedule_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSource::set_allocated_default_schedule(::std::string* default_schedule) {
  if (default_schedule != NULL) {
    
  } else {
    
  }
  default_schedule_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_schedule);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSource.default_schedule)
}

// bool supports_custom_schedule = 11;
inline void DataSource::clear_supports_custom_schedule() {
  supports_custom_schedule_ = false;
}
inline bool DataSource::supports_custom_schedule() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.supports_custom_schedule)
  return supports_custom_schedule_;
}
inline void DataSource::set_supports_custom_schedule(bool value) {
  
  supports_custom_schedule_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.supports_custom_schedule)
}

// repeated .google.cloud.bigquery.datatransfer.v1.DataSourceParameter parameters = 12;
inline int DataSource::parameters_size() const {
  return parameters_.size();
}
inline void DataSource::clear_parameters() {
  parameters_.Clear();
}
inline ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter* DataSource::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSource.parameters)
  return parameters_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter >*
DataSource::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.datatransfer.v1.DataSource.parameters)
  return &parameters_;
}
inline const ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter& DataSource::parameters(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.parameters)
  return parameters_.Get(index);
}
inline ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter* DataSource::add_parameters() {
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.DataSource.parameters)
  return parameters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter >&
DataSource::parameters() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.datatransfer.v1.DataSource.parameters)
  return parameters_;
}

// string help_url = 13;
inline void DataSource::clear_help_url() {
  help_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataSource::help_url() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.help_url)
  return help_url_.GetNoArena();
}
inline void DataSource::set_help_url(const ::std::string& value) {
  
  help_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.help_url)
}
#if LANG_CXX11
inline void DataSource::set_help_url(::std::string&& value) {
  
  help_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.DataSource.help_url)
}
#endif
inline void DataSource::set_help_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  help_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.DataSource.help_url)
}
inline void DataSource::set_help_url(const char* value, size_t size) {
  
  help_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.DataSource.help_url)
}
inline ::std::string* DataSource::mutable_help_url() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSource.help_url)
  return help_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSource::release_help_url() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSource.help_url)
  
  return help_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSource::set_allocated_help_url(::std::string* help_url) {
  if (help_url != NULL) {
    
  } else {
    
  }
  help_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), help_url);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSource.help_url)
}

// .google.cloud.bigquery.datatransfer.v1.DataSource.AuthorizationType authorization_type = 14;
inline void DataSource::clear_authorization_type() {
  authorization_type_ = 0;
}
inline ::google::cloud::bigquery::datatransfer::v1::DataSource_AuthorizationType DataSource::authorization_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.authorization_type)
  return static_cast< ::google::cloud::bigquery::datatransfer::v1::DataSource_AuthorizationType >(authorization_type_);
}
inline void DataSource::set_authorization_type(::google::cloud::bigquery::datatransfer::v1::DataSource_AuthorizationType value) {
  
  authorization_type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.authorization_type)
}

// .google.cloud.bigquery.datatransfer.v1.DataSource.DataRefreshType data_refresh_type = 15;
inline void DataSource::clear_data_refresh_type() {
  data_refresh_type_ = 0;
}
inline ::google::cloud::bigquery::datatransfer::v1::DataSource_DataRefreshType DataSource::data_refresh_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.data_refresh_type)
  return static_cast< ::google::cloud::bigquery::datatransfer::v1::DataSource_DataRefreshType >(data_refresh_type_);
}
inline void DataSource::set_data_refresh_type(::google::cloud::bigquery::datatransfer::v1::DataSource_DataRefreshType value) {
  
  data_refresh_type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.data_refresh_type)
}

// int32 default_data_refresh_window_days = 16;
inline void DataSource::clear_default_data_refresh_window_days() {
  default_data_refresh_window_days_ = 0;
}
inline ::google::protobuf::int32 DataSource::default_data_refresh_window_days() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.default_data_refresh_window_days)
  return default_data_refresh_window_days_;
}
inline void DataSource::set_default_data_refresh_window_days(::google::protobuf::int32 value) {
  
  default_data_refresh_window_days_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.default_data_refresh_window_days)
}

// bool manual_runs_disabled = 17;
inline void DataSource::clear_manual_runs_disabled() {
  manual_runs_disabled_ = false;
}
inline bool DataSource::manual_runs_disabled() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.manual_runs_disabled)
  return manual_runs_disabled_;
}
inline void DataSource::set_manual_runs_disabled(bool value) {
  
  manual_runs_disabled_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DataSource.manual_runs_disabled)
}

// .google.protobuf.Duration minimum_schedule_interval = 18;
inline bool DataSource::has_minimum_schedule_interval() const {
  return this != internal_default_instance() && minimum_schedule_interval_ != NULL;
}
inline const ::google::protobuf::Duration& DataSource::_internal_minimum_schedule_interval() const {
  return *minimum_schedule_interval_;
}
inline const ::google::protobuf::Duration& DataSource::minimum_schedule_interval() const {
  const ::google::protobuf::Duration* p = minimum_schedule_interval_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DataSource.minimum_schedule_interval)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* DataSource::release_minimum_schedule_interval() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DataSource.minimum_schedule_interval)
  
  ::google::protobuf::Duration* temp = minimum_schedule_interval_;
  minimum_schedule_interval_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* DataSource::mutable_minimum_schedule_interval() {
  
  if (minimum_schedule_interval_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    minimum_schedule_interval_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DataSource.minimum_schedule_interval)
  return minimum_schedule_interval_;
}
inline void DataSource::set_allocated_minimum_schedule_interval(::google::protobuf::Duration* minimum_schedule_interval) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(minimum_schedule_interval_);
  }
  if (minimum_schedule_interval) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(minimum_schedule_interval)->GetArena();
    if (message_arena != submessage_arena) {
      minimum_schedule_interval = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, minimum_schedule_interval, submessage_arena);
    }
    
  } else {
    
  }
  minimum_schedule_interval_ = minimum_schedule_interval;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DataSource.minimum_schedule_interval)
}

// -------------------------------------------------------------------

// GetDataSourceRequest

// string name = 1;
inline void GetDataSourceRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetDataSourceRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.GetDataSourceRequest.name)
  return name_.GetNoArena();
}
inline void GetDataSourceRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.GetDataSourceRequest.name)
}
#if LANG_CXX11
inline void GetDataSourceRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.GetDataSourceRequest.name)
}
#endif
inline void GetDataSourceRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.GetDataSourceRequest.name)
}
inline void GetDataSourceRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.GetDataSourceRequest.name)
}
inline ::std::string* GetDataSourceRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.GetDataSourceRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetDataSourceRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.GetDataSourceRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetDataSourceRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.GetDataSourceRequest.name)
}

// -------------------------------------------------------------------

// ListDataSourcesRequest

// string parent = 1;
inline void ListDataSourcesRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListDataSourcesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.parent)
  return parent_.GetNoArena();
}
inline void ListDataSourcesRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.parent)
}
#if LANG_CXX11
inline void ListDataSourcesRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.parent)
}
#endif
inline void ListDataSourcesRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.parent)
}
inline void ListDataSourcesRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.parent)
}
inline ::std::string* ListDataSourcesRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListDataSourcesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListDataSourcesRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.parent)
}

// string page_token = 3;
inline void ListDataSourcesRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListDataSourcesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListDataSourcesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.page_token)
}
#if LANG_CXX11
inline void ListDataSourcesRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.page_token)
}
#endif
inline void ListDataSourcesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.page_token)
}
inline void ListDataSourcesRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.page_token)
}
inline ::std::string* ListDataSourcesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListDataSourcesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListDataSourcesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.page_token)
}

// int32 page_size = 4;
inline void ListDataSourcesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListDataSourcesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.page_size)
  return page_size_;
}
inline void ListDataSourcesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.page_size)
}

// -------------------------------------------------------------------

// ListDataSourcesResponse

// repeated .google.cloud.bigquery.datatransfer.v1.DataSource data_sources = 1;
inline int ListDataSourcesResponse::data_sources_size() const {
  return data_sources_.size();
}
inline void ListDataSourcesResponse::clear_data_sources() {
  data_sources_.Clear();
}
inline ::google::cloud::bigquery::datatransfer::v1::DataSource* ListDataSourcesResponse::mutable_data_sources(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse.data_sources)
  return data_sources_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSource >*
ListDataSourcesResponse::mutable_data_sources() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse.data_sources)
  return &data_sources_;
}
inline const ::google::cloud::bigquery::datatransfer::v1::DataSource& ListDataSourcesResponse::data_sources(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse.data_sources)
  return data_sources_.Get(index);
}
inline ::google::cloud::bigquery::datatransfer::v1::DataSource* ListDataSourcesResponse::add_data_sources() {
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse.data_sources)
  return data_sources_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::DataSource >&
ListDataSourcesResponse::data_sources() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse.data_sources)
  return data_sources_;
}

// string next_page_token = 2;
inline void ListDataSourcesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListDataSourcesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListDataSourcesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse.next_page_token)
}
#if LANG_CXX11
inline void ListDataSourcesResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse.next_page_token)
}
#endif
inline void ListDataSourcesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse.next_page_token)
}
inline void ListDataSourcesResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse.next_page_token)
}
inline ::std::string* ListDataSourcesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListDataSourcesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListDataSourcesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse.next_page_token)
}

// -------------------------------------------------------------------

// CreateTransferConfigRequest

// string parent = 1;
inline void CreateTransferConfigRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateTransferConfigRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.parent)
  return parent_.GetNoArena();
}
inline void CreateTransferConfigRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.parent)
}
#if LANG_CXX11
inline void CreateTransferConfigRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.parent)
}
#endif
inline void CreateTransferConfigRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.parent)
}
inline void CreateTransferConfigRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.parent)
}
inline ::std::string* CreateTransferConfigRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateTransferConfigRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTransferConfigRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.parent)
}

// .google.cloud.bigquery.datatransfer.v1.TransferConfig transfer_config = 2;
inline bool CreateTransferConfigRequest::has_transfer_config() const {
  return this != internal_default_instance() && transfer_config_ != NULL;
}
inline const ::google::cloud::bigquery::datatransfer::v1::TransferConfig& CreateTransferConfigRequest::_internal_transfer_config() const {
  return *transfer_config_;
}
inline const ::google::cloud::bigquery::datatransfer::v1::TransferConfig& CreateTransferConfigRequest::transfer_config() const {
  const ::google::cloud::bigquery::datatransfer::v1::TransferConfig* p = transfer_config_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.transfer_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::datatransfer::v1::TransferConfig*>(
      &::google::cloud::bigquery::datatransfer::v1::_TransferConfig_default_instance_);
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferConfig* CreateTransferConfigRequest::release_transfer_config() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.transfer_config)
  
  ::google::cloud::bigquery::datatransfer::v1::TransferConfig* temp = transfer_config_;
  transfer_config_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferConfig* CreateTransferConfigRequest::mutable_transfer_config() {
  
  if (transfer_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::TransferConfig>(GetArenaNoVirtual());
    transfer_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.transfer_config)
  return transfer_config_;
}
inline void CreateTransferConfigRequest::set_allocated_transfer_config(::google::cloud::bigquery::datatransfer::v1::TransferConfig* transfer_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(transfer_config_);
  }
  if (transfer_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transfer_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transfer_config, submessage_arena);
    }
    
  } else {
    
  }
  transfer_config_ = transfer_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.transfer_config)
}

// string authorization_code = 3;
inline void CreateTransferConfigRequest::clear_authorization_code() {
  authorization_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateTransferConfigRequest::authorization_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.authorization_code)
  return authorization_code_.GetNoArena();
}
inline void CreateTransferConfigRequest::set_authorization_code(const ::std::string& value) {
  
  authorization_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.authorization_code)
}
#if LANG_CXX11
inline void CreateTransferConfigRequest::set_authorization_code(::std::string&& value) {
  
  authorization_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.authorization_code)
}
#endif
inline void CreateTransferConfigRequest::set_authorization_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  authorization_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.authorization_code)
}
inline void CreateTransferConfigRequest::set_authorization_code(const char* value, size_t size) {
  
  authorization_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.authorization_code)
}
inline ::std::string* CreateTransferConfigRequest::mutable_authorization_code() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.authorization_code)
  return authorization_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateTransferConfigRequest::release_authorization_code() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.authorization_code)
  
  return authorization_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTransferConfigRequest::set_allocated_authorization_code(::std::string* authorization_code) {
  if (authorization_code != NULL) {
    
  } else {
    
  }
  authorization_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authorization_code);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.authorization_code)
}

// -------------------------------------------------------------------

// UpdateTransferConfigRequest

// .google.cloud.bigquery.datatransfer.v1.TransferConfig transfer_config = 1;
inline bool UpdateTransferConfigRequest::has_transfer_config() const {
  return this != internal_default_instance() && transfer_config_ != NULL;
}
inline const ::google::cloud::bigquery::datatransfer::v1::TransferConfig& UpdateTransferConfigRequest::_internal_transfer_config() const {
  return *transfer_config_;
}
inline const ::google::cloud::bigquery::datatransfer::v1::TransferConfig& UpdateTransferConfigRequest::transfer_config() const {
  const ::google::cloud::bigquery::datatransfer::v1::TransferConfig* p = transfer_config_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.transfer_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::datatransfer::v1::TransferConfig*>(
      &::google::cloud::bigquery::datatransfer::v1::_TransferConfig_default_instance_);
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferConfig* UpdateTransferConfigRequest::release_transfer_config() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.transfer_config)
  
  ::google::cloud::bigquery::datatransfer::v1::TransferConfig* temp = transfer_config_;
  transfer_config_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferConfig* UpdateTransferConfigRequest::mutable_transfer_config() {
  
  if (transfer_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::TransferConfig>(GetArenaNoVirtual());
    transfer_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.transfer_config)
  return transfer_config_;
}
inline void UpdateTransferConfigRequest::set_allocated_transfer_config(::google::cloud::bigquery::datatransfer::v1::TransferConfig* transfer_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(transfer_config_);
  }
  if (transfer_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transfer_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transfer_config, submessage_arena);
    }
    
  } else {
    
  }
  transfer_config_ = transfer_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.transfer_config)
}

// string authorization_code = 3;
inline void UpdateTransferConfigRequest::clear_authorization_code() {
  authorization_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateTransferConfigRequest::authorization_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.authorization_code)
  return authorization_code_.GetNoArena();
}
inline void UpdateTransferConfigRequest::set_authorization_code(const ::std::string& value) {
  
  authorization_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.authorization_code)
}
#if LANG_CXX11
inline void UpdateTransferConfigRequest::set_authorization_code(::std::string&& value) {
  
  authorization_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.authorization_code)
}
#endif
inline void UpdateTransferConfigRequest::set_authorization_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  authorization_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.authorization_code)
}
inline void UpdateTransferConfigRequest::set_authorization_code(const char* value, size_t size) {
  
  authorization_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.authorization_code)
}
inline ::std::string* UpdateTransferConfigRequest::mutable_authorization_code() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.authorization_code)
  return authorization_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateTransferConfigRequest::release_authorization_code() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.authorization_code)
  
  return authorization_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateTransferConfigRequest::set_allocated_authorization_code(::std::string* authorization_code) {
  if (authorization_code != NULL) {
    
  } else {
    
  }
  authorization_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authorization_code);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.authorization_code)
}

// .google.protobuf.FieldMask update_mask = 4;
inline bool UpdateTransferConfigRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline const ::google::protobuf::FieldMask& UpdateTransferConfigRequest::_internal_update_mask() const {
  return *update_mask_;
}
inline const ::google::protobuf::FieldMask& UpdateTransferConfigRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.update_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateTransferConfigRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateTransferConfigRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::FieldMask>(GetArenaNoVirtual());
    update_mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.update_mask)
  return update_mask_;
}
inline void UpdateTransferConfigRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.update_mask)
}

// -------------------------------------------------------------------

// GetTransferConfigRequest

// string name = 1;
inline void GetTransferConfigRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetTransferConfigRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.GetTransferConfigRequest.name)
  return name_.GetNoArena();
}
inline void GetTransferConfigRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.GetTransferConfigRequest.name)
}
#if LANG_CXX11
inline void GetTransferConfigRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.GetTransferConfigRequest.name)
}
#endif
inline void GetTransferConfigRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.GetTransferConfigRequest.name)
}
inline void GetTransferConfigRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.GetTransferConfigRequest.name)
}
inline ::std::string* GetTransferConfigRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.GetTransferConfigRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTransferConfigRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.GetTransferConfigRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTransferConfigRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.GetTransferConfigRequest.name)
}

// -------------------------------------------------------------------

// DeleteTransferConfigRequest

// string name = 1;
inline void DeleteTransferConfigRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteTransferConfigRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DeleteTransferConfigRequest.name)
  return name_.GetNoArena();
}
inline void DeleteTransferConfigRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DeleteTransferConfigRequest.name)
}
#if LANG_CXX11
inline void DeleteTransferConfigRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.DeleteTransferConfigRequest.name)
}
#endif
inline void DeleteTransferConfigRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.DeleteTransferConfigRequest.name)
}
inline void DeleteTransferConfigRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.DeleteTransferConfigRequest.name)
}
inline ::std::string* DeleteTransferConfigRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DeleteTransferConfigRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteTransferConfigRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DeleteTransferConfigRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteTransferConfigRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DeleteTransferConfigRequest.name)
}

// -------------------------------------------------------------------

// GetTransferRunRequest

// string name = 1;
inline void GetTransferRunRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetTransferRunRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.GetTransferRunRequest.name)
  return name_.GetNoArena();
}
inline void GetTransferRunRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.GetTransferRunRequest.name)
}
#if LANG_CXX11
inline void GetTransferRunRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.GetTransferRunRequest.name)
}
#endif
inline void GetTransferRunRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.GetTransferRunRequest.name)
}
inline void GetTransferRunRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.GetTransferRunRequest.name)
}
inline ::std::string* GetTransferRunRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.GetTransferRunRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTransferRunRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.GetTransferRunRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTransferRunRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.GetTransferRunRequest.name)
}

// -------------------------------------------------------------------

// DeleteTransferRunRequest

// string name = 1;
inline void DeleteTransferRunRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteTransferRunRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.DeleteTransferRunRequest.name)
  return name_.GetNoArena();
}
inline void DeleteTransferRunRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.DeleteTransferRunRequest.name)
}
#if LANG_CXX11
inline void DeleteTransferRunRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.DeleteTransferRunRequest.name)
}
#endif
inline void DeleteTransferRunRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.DeleteTransferRunRequest.name)
}
inline void DeleteTransferRunRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.DeleteTransferRunRequest.name)
}
inline ::std::string* DeleteTransferRunRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.DeleteTransferRunRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteTransferRunRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.DeleteTransferRunRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteTransferRunRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.DeleteTransferRunRequest.name)
}

// -------------------------------------------------------------------

// ListTransferConfigsRequest

// string parent = 1;
inline void ListTransferConfigsRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListTransferConfigsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.parent)
  return parent_.GetNoArena();
}
inline void ListTransferConfigsRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.parent)
}
#if LANG_CXX11
inline void ListTransferConfigsRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.parent)
}
#endif
inline void ListTransferConfigsRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.parent)
}
inline void ListTransferConfigsRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.parent)
}
inline ::std::string* ListTransferConfigsRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListTransferConfigsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListTransferConfigsRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.parent)
}

// repeated string data_source_ids = 2;
inline int ListTransferConfigsRequest::data_source_ids_size() const {
  return data_source_ids_.size();
}
inline void ListTransferConfigsRequest::clear_data_source_ids() {
  data_source_ids_.Clear();
}
inline const ::std::string& ListTransferConfigsRequest::data_source_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.data_source_ids)
  return data_source_ids_.Get(index);
}
inline ::std::string* ListTransferConfigsRequest::mutable_data_source_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.data_source_ids)
  return data_source_ids_.Mutable(index);
}
inline void ListTransferConfigsRequest::set_data_source_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.data_source_ids)
  data_source_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ListTransferConfigsRequest::set_data_source_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.data_source_ids)
  data_source_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ListTransferConfigsRequest::set_data_source_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  data_source_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.data_source_ids)
}
inline void ListTransferConfigsRequest::set_data_source_ids(int index, const char* value, size_t size) {
  data_source_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.data_source_ids)
}
inline ::std::string* ListTransferConfigsRequest::add_data_source_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.data_source_ids)
  return data_source_ids_.Add();
}
inline void ListTransferConfigsRequest::add_data_source_ids(const ::std::string& value) {
  data_source_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.data_source_ids)
}
#if LANG_CXX11
inline void ListTransferConfigsRequest::add_data_source_ids(::std::string&& value) {
  data_source_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.data_source_ids)
}
#endif
inline void ListTransferConfigsRequest::add_data_source_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  data_source_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.data_source_ids)
}
inline void ListTransferConfigsRequest::add_data_source_ids(const char* value, size_t size) {
  data_source_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.data_source_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListTransferConfigsRequest::data_source_ids() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.data_source_ids)
  return data_source_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ListTransferConfigsRequest::mutable_data_source_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.data_source_ids)
  return &data_source_ids_;
}

// string page_token = 3;
inline void ListTransferConfigsRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListTransferConfigsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListTransferConfigsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.page_token)
}
#if LANG_CXX11
inline void ListTransferConfigsRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.page_token)
}
#endif
inline void ListTransferConfigsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.page_token)
}
inline void ListTransferConfigsRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.page_token)
}
inline ::std::string* ListTransferConfigsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListTransferConfigsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListTransferConfigsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.page_token)
}

// int32 page_size = 4;
inline void ListTransferConfigsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListTransferConfigsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.page_size)
  return page_size_;
}
inline void ListTransferConfigsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.page_size)
}

// -------------------------------------------------------------------

// ListTransferConfigsResponse

// repeated .google.cloud.bigquery.datatransfer.v1.TransferConfig transfer_configs = 1;
inline int ListTransferConfigsResponse::transfer_configs_size() const {
  return transfer_configs_.size();
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferConfig* ListTransferConfigsResponse::mutable_transfer_configs(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse.transfer_configs)
  return transfer_configs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferConfig >*
ListTransferConfigsResponse::mutable_transfer_configs() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse.transfer_configs)
  return &transfer_configs_;
}
inline const ::google::cloud::bigquery::datatransfer::v1::TransferConfig& ListTransferConfigsResponse::transfer_configs(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse.transfer_configs)
  return transfer_configs_.Get(index);
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferConfig* ListTransferConfigsResponse::add_transfer_configs() {
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse.transfer_configs)
  return transfer_configs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferConfig >&
ListTransferConfigsResponse::transfer_configs() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse.transfer_configs)
  return transfer_configs_;
}

// string next_page_token = 2;
inline void ListTransferConfigsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListTransferConfigsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListTransferConfigsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListTransferConfigsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse.next_page_token)
}
#endif
inline void ListTransferConfigsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse.next_page_token)
}
inline void ListTransferConfigsResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse.next_page_token)
}
inline ::std::string* ListTransferConfigsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListTransferConfigsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListTransferConfigsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse.next_page_token)
}

// -------------------------------------------------------------------

// ListTransferRunsRequest

// string parent = 1;
inline void ListTransferRunsRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListTransferRunsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.parent)
  return parent_.GetNoArena();
}
inline void ListTransferRunsRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.parent)
}
#if LANG_CXX11
inline void ListTransferRunsRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.parent)
}
#endif
inline void ListTransferRunsRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.parent)
}
inline void ListTransferRunsRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.parent)
}
inline ::std::string* ListTransferRunsRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListTransferRunsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListTransferRunsRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.parent)
}

// repeated .google.cloud.bigquery.datatransfer.v1.TransferState states = 2;
inline int ListTransferRunsRequest::states_size() const {
  return states_.size();
}
inline void ListTransferRunsRequest::clear_states() {
  states_.Clear();
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferState ListTransferRunsRequest::states(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.states)
  return static_cast< ::google::cloud::bigquery::datatransfer::v1::TransferState >(states_.Get(index));
}
inline void ListTransferRunsRequest::set_states(int index, ::google::cloud::bigquery::datatransfer::v1::TransferState value) {
  states_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.states)
}
inline void ListTransferRunsRequest::add_states(::google::cloud::bigquery::datatransfer::v1::TransferState value) {
  states_.Add(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.states)
}
inline const ::google::protobuf::RepeatedField<int>&
ListTransferRunsRequest::states() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.states)
  return states_;
}
inline ::google::protobuf::RepeatedField<int>*
ListTransferRunsRequest::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.states)
  return &states_;
}

// string page_token = 3;
inline void ListTransferRunsRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListTransferRunsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListTransferRunsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.page_token)
}
#if LANG_CXX11
inline void ListTransferRunsRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.page_token)
}
#endif
inline void ListTransferRunsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.page_token)
}
inline void ListTransferRunsRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.page_token)
}
inline ::std::string* ListTransferRunsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListTransferRunsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListTransferRunsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.page_token)
}

// int32 page_size = 4;
inline void ListTransferRunsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListTransferRunsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.page_size)
  return page_size_;
}
inline void ListTransferRunsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.page_size)
}

// .google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.RunAttempt run_attempt = 5;
inline void ListTransferRunsRequest::clear_run_attempt() {
  run_attempt_ = 0;
}
inline ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest_RunAttempt ListTransferRunsRequest::run_attempt() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.run_attempt)
  return static_cast< ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest_RunAttempt >(run_attempt_);
}
inline void ListTransferRunsRequest::set_run_attempt(::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest_RunAttempt value) {
  
  run_attempt_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.run_attempt)
}

// -------------------------------------------------------------------

// ListTransferRunsResponse

// repeated .google.cloud.bigquery.datatransfer.v1.TransferRun transfer_runs = 1;
inline int ListTransferRunsResponse::transfer_runs_size() const {
  return transfer_runs_.size();
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferRun* ListTransferRunsResponse::mutable_transfer_runs(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse.transfer_runs)
  return transfer_runs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferRun >*
ListTransferRunsResponse::mutable_transfer_runs() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse.transfer_runs)
  return &transfer_runs_;
}
inline const ::google::cloud::bigquery::datatransfer::v1::TransferRun& ListTransferRunsResponse::transfer_runs(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse.transfer_runs)
  return transfer_runs_.Get(index);
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferRun* ListTransferRunsResponse::add_transfer_runs() {
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse.transfer_runs)
  return transfer_runs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferRun >&
ListTransferRunsResponse::transfer_runs() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse.transfer_runs)
  return transfer_runs_;
}

// string next_page_token = 2;
inline void ListTransferRunsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListTransferRunsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListTransferRunsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListTransferRunsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse.next_page_token)
}
#endif
inline void ListTransferRunsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse.next_page_token)
}
inline void ListTransferRunsResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse.next_page_token)
}
inline ::std::string* ListTransferRunsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListTransferRunsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListTransferRunsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse.next_page_token)
}

// -------------------------------------------------------------------

// ListTransferLogsRequest

// string parent = 1;
inline void ListTransferLogsRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListTransferLogsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.parent)
  return parent_.GetNoArena();
}
inline void ListTransferLogsRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.parent)
}
#if LANG_CXX11
inline void ListTransferLogsRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.parent)
}
#endif
inline void ListTransferLogsRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.parent)
}
inline void ListTransferLogsRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.parent)
}
inline ::std::string* ListTransferLogsRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListTransferLogsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListTransferLogsRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.parent)
}

// string page_token = 4;
inline void ListTransferLogsRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListTransferLogsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListTransferLogsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.page_token)
}
#if LANG_CXX11
inline void ListTransferLogsRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.page_token)
}
#endif
inline void ListTransferLogsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.page_token)
}
inline void ListTransferLogsRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.page_token)
}
inline ::std::string* ListTransferLogsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListTransferLogsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListTransferLogsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.page_token)
}

// int32 page_size = 5;
inline void ListTransferLogsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListTransferLogsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.page_size)
  return page_size_;
}
inline void ListTransferLogsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.page_size)
}

// repeated .google.cloud.bigquery.datatransfer.v1.TransferMessage.MessageSeverity message_types = 6;
inline int ListTransferLogsRequest::message_types_size() const {
  return message_types_.size();
}
inline void ListTransferLogsRequest::clear_message_types() {
  message_types_.Clear();
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity ListTransferLogsRequest::message_types(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.message_types)
  return static_cast< ::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity >(message_types_.Get(index));
}
inline void ListTransferLogsRequest::set_message_types(int index, ::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity value) {
  message_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.message_types)
}
inline void ListTransferLogsRequest::add_message_types(::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity value) {
  message_types_.Add(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.message_types)
}
inline const ::google::protobuf::RepeatedField<int>&
ListTransferLogsRequest::message_types() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.message_types)
  return message_types_;
}
inline ::google::protobuf::RepeatedField<int>*
ListTransferLogsRequest::mutable_message_types() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.message_types)
  return &message_types_;
}

// -------------------------------------------------------------------

// ListTransferLogsResponse

// repeated .google.cloud.bigquery.datatransfer.v1.TransferMessage transfer_messages = 1;
inline int ListTransferLogsResponse::transfer_messages_size() const {
  return transfer_messages_.size();
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferMessage* ListTransferLogsResponse::mutable_transfer_messages(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse.transfer_messages)
  return transfer_messages_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferMessage >*
ListTransferLogsResponse::mutable_transfer_messages() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse.transfer_messages)
  return &transfer_messages_;
}
inline const ::google::cloud::bigquery::datatransfer::v1::TransferMessage& ListTransferLogsResponse::transfer_messages(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse.transfer_messages)
  return transfer_messages_.Get(index);
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferMessage* ListTransferLogsResponse::add_transfer_messages() {
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse.transfer_messages)
  return transfer_messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferMessage >&
ListTransferLogsResponse::transfer_messages() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse.transfer_messages)
  return transfer_messages_;
}

// string next_page_token = 2;
inline void ListTransferLogsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListTransferLogsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListTransferLogsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListTransferLogsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse.next_page_token)
}
#endif
inline void ListTransferLogsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse.next_page_token)
}
inline void ListTransferLogsResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse.next_page_token)
}
inline ::std::string* ListTransferLogsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListTransferLogsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListTransferLogsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse.next_page_token)
}

// -------------------------------------------------------------------

// CheckValidCredsRequest

// string name = 1;
inline void CheckValidCredsRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckValidCredsRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.CheckValidCredsRequest.name)
  return name_.GetNoArena();
}
inline void CheckValidCredsRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.CheckValidCredsRequest.name)
}
#if LANG_CXX11
inline void CheckValidCredsRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.CheckValidCredsRequest.name)
}
#endif
inline void CheckValidCredsRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.CheckValidCredsRequest.name)
}
inline void CheckValidCredsRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.CheckValidCredsRequest.name)
}
inline ::std::string* CheckValidCredsRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.CheckValidCredsRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckValidCredsRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.CheckValidCredsRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckValidCredsRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.CheckValidCredsRequest.name)
}

// -------------------------------------------------------------------

// CheckValidCredsResponse

// bool has_valid_creds = 1;
inline void CheckValidCredsResponse::clear_has_valid_creds() {
  has_valid_creds_ = false;
}
inline bool CheckValidCredsResponse::has_valid_creds() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.CheckValidCredsResponse.has_valid_creds)
  return has_valid_creds_;
}
inline void CheckValidCredsResponse::set_has_valid_creds(bool value) {
  
  has_valid_creds_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.CheckValidCredsResponse.has_valid_creds)
}

// -------------------------------------------------------------------

// ScheduleTransferRunsRequest

// string parent = 1;
inline void ScheduleTransferRunsRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScheduleTransferRunsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.parent)
  return parent_.GetNoArena();
}
inline void ScheduleTransferRunsRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.parent)
}
#if LANG_CXX11
inline void ScheduleTransferRunsRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.parent)
}
#endif
inline void ScheduleTransferRunsRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.parent)
}
inline void ScheduleTransferRunsRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.parent)
}
inline ::std::string* ScheduleTransferRunsRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScheduleTransferRunsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScheduleTransferRunsRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.parent)
}

// .google.protobuf.Timestamp start_time = 2;
inline bool ScheduleTransferRunsRequest::has_start_time() const {
  return this != internal_default_instance() && start_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& ScheduleTransferRunsRequest::_internal_start_time() const {
  return *start_time_;
}
inline const ::google::protobuf::Timestamp& ScheduleTransferRunsRequest::start_time() const {
  const ::google::protobuf::Timestamp* p = start_time_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.start_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ScheduleTransferRunsRequest::release_start_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.start_time)
  
  ::google::protobuf::Timestamp* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* ScheduleTransferRunsRequest::mutable_start_time() {
  
  if (start_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    start_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.start_time)
  return start_time_;
}
inline void ScheduleTransferRunsRequest::set_allocated_start_time(::google::protobuf::Timestamp* start_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.start_time)
}

// .google.protobuf.Timestamp end_time = 3;
inline bool ScheduleTransferRunsRequest::has_end_time() const {
  return this != internal_default_instance() && end_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& ScheduleTransferRunsRequest::_internal_end_time() const {
  return *end_time_;
}
inline const ::google::protobuf::Timestamp& ScheduleTransferRunsRequest::end_time() const {
  const ::google::protobuf::Timestamp* p = end_time_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.end_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ScheduleTransferRunsRequest::release_end_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.end_time)
  
  ::google::protobuf::Timestamp* temp = end_time_;
  end_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* ScheduleTransferRunsRequest::mutable_end_time() {
  
  if (end_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    end_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.end_time)
  return end_time_;
}
inline void ScheduleTransferRunsRequest::set_allocated_end_time(::google::protobuf::Timestamp* end_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.end_time)
}

// -------------------------------------------------------------------

// ScheduleTransferRunsResponse

// repeated .google.cloud.bigquery.datatransfer.v1.TransferRun runs = 1;
inline int ScheduleTransferRunsResponse::runs_size() const {
  return runs_.size();
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferRun* ScheduleTransferRunsResponse::mutable_runs(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsResponse.runs)
  return runs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferRun >*
ScheduleTransferRunsResponse::mutable_runs() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsResponse.runs)
  return &runs_;
}
inline const ::google::cloud::bigquery::datatransfer::v1::TransferRun& ScheduleTransferRunsResponse::runs(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsResponse.runs)
  return runs_.Get(index);
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferRun* ScheduleTransferRunsResponse::add_runs() {
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsResponse.runs)
  return runs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::datatransfer::v1::TransferRun >&
ScheduleTransferRunsResponse::runs() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsResponse.runs)
  return runs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace datatransfer
}  // namespace bigquery
}  // namespace cloud
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter_Type>() {
  return ::google::cloud::bigquery::datatransfer::v1::DataSourceParameter_Type_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::bigquery::datatransfer::v1::DataSource_AuthorizationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::datatransfer::v1::DataSource_AuthorizationType>() {
  return ::google::cloud::bigquery::datatransfer::v1::DataSource_AuthorizationType_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::bigquery::datatransfer::v1::DataSource_DataRefreshType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::datatransfer::v1::DataSource_DataRefreshType>() {
  return ::google::cloud::bigquery::datatransfer::v1::DataSource_DataRefreshType_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest_RunAttempt> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest_RunAttempt>() {
  return ::google::cloud::bigquery::datatransfer::v1::ListTransferRunsRequest_RunAttempt_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2fdatatransfer_2eproto
