// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/datatransfer/v1/transfer.proto

#ifndef PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto
#define PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto 

namespace protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto
namespace google {
namespace cloud {
namespace bigquery {
namespace datatransfer {
namespace v1 {
class TransferConfig;
class TransferConfigDefaultTypeInternal;
extern TransferConfigDefaultTypeInternal _TransferConfig_default_instance_;
class TransferMessage;
class TransferMessageDefaultTypeInternal;
extern TransferMessageDefaultTypeInternal _TransferMessage_default_instance_;
class TransferRun;
class TransferRunDefaultTypeInternal;
extern TransferRunDefaultTypeInternal _TransferRun_default_instance_;
}  // namespace v1
}  // namespace datatransfer
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::cloud::bigquery::datatransfer::v1::TransferConfig* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::TransferConfig>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::TransferMessage* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::TransferMessage>(Arena*);
template<> ::google::cloud::bigquery::datatransfer::v1::TransferRun* Arena::CreateMaybeMessage<::google::cloud::bigquery::datatransfer::v1::TransferRun>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace cloud {
namespace bigquery {
namespace datatransfer {
namespace v1 {

enum TransferMessage_MessageSeverity {
  TransferMessage_MessageSeverity_MESSAGE_SEVERITY_UNSPECIFIED = 0,
  TransferMessage_MessageSeverity_INFO = 1,
  TransferMessage_MessageSeverity_WARNING = 2,
  TransferMessage_MessageSeverity_ERROR = 3,
  TransferMessage_MessageSeverity_TransferMessage_MessageSeverity_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TransferMessage_MessageSeverity_TransferMessage_MessageSeverity_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TransferMessage_MessageSeverity_IsValid(int value);
const TransferMessage_MessageSeverity TransferMessage_MessageSeverity_MessageSeverity_MIN = TransferMessage_MessageSeverity_MESSAGE_SEVERITY_UNSPECIFIED;
const TransferMessage_MessageSeverity TransferMessage_MessageSeverity_MessageSeverity_MAX = TransferMessage_MessageSeverity_ERROR;
const int TransferMessage_MessageSeverity_MessageSeverity_ARRAYSIZE = TransferMessage_MessageSeverity_MessageSeverity_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransferMessage_MessageSeverity_descriptor();
inline const ::std::string& TransferMessage_MessageSeverity_Name(TransferMessage_MessageSeverity value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransferMessage_MessageSeverity_descriptor(), value);
}
inline bool TransferMessage_MessageSeverity_Parse(
    const ::std::string& name, TransferMessage_MessageSeverity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransferMessage_MessageSeverity>(
    TransferMessage_MessageSeverity_descriptor(), name, value);
}
enum TransferType {
  TRANSFER_TYPE_UNSPECIFIED = 0,
  BATCH = 1,
  STREAMING = 2,
  TransferType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TransferType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TransferType_IsValid(int value);
const TransferType TransferType_MIN = TRANSFER_TYPE_UNSPECIFIED;
const TransferType TransferType_MAX = STREAMING;
const int TransferType_ARRAYSIZE = TransferType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransferType_descriptor();
inline const ::std::string& TransferType_Name(TransferType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransferType_descriptor(), value);
}
inline bool TransferType_Parse(
    const ::std::string& name, TransferType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransferType>(
    TransferType_descriptor(), name, value);
}
enum TransferState {
  TRANSFER_STATE_UNSPECIFIED = 0,
  PENDING = 2,
  RUNNING = 3,
  SUCCEEDED = 4,
  FAILED = 5,
  CANCELLED = 6,
  TransferState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TransferState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TransferState_IsValid(int value);
const TransferState TransferState_MIN = TRANSFER_STATE_UNSPECIFIED;
const TransferState TransferState_MAX = CANCELLED;
const int TransferState_ARRAYSIZE = TransferState_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransferState_descriptor();
inline const ::std::string& TransferState_Name(TransferState value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransferState_descriptor(), value);
}
inline bool TransferState_Parse(
    const ::std::string& name, TransferState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransferState>(
    TransferState_descriptor(), name, value);
}
// ===================================================================

class TransferConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.TransferConfig) */ {
 public:
  TransferConfig();
  virtual ~TransferConfig();

  TransferConfig(const TransferConfig& from);

  inline TransferConfig& operator=(const TransferConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransferConfig(TransferConfig&& from) noexcept
    : TransferConfig() {
    *this = ::std::move(from);
  }

  inline TransferConfig& operator=(TransferConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferConfig* internal_default_instance() {
    return reinterpret_cast<const TransferConfig*>(
               &_TransferConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TransferConfig* other);
  friend void swap(TransferConfig& a, TransferConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferConfig* New() const final {
    return CreateMaybeMessage<TransferConfig>(NULL);
  }

  TransferConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransferConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransferConfig& from);
  void MergeFrom(const TransferConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string destination_dataset_id = 2;
  void clear_destination_dataset_id();
  static const int kDestinationDatasetIdFieldNumber = 2;
  const ::std::string& destination_dataset_id() const;
  void set_destination_dataset_id(const ::std::string& value);
  #if LANG_CXX11
  void set_destination_dataset_id(::std::string&& value);
  #endif
  void set_destination_dataset_id(const char* value);
  void set_destination_dataset_id(const char* value, size_t size);
  ::std::string* mutable_destination_dataset_id();
  ::std::string* release_destination_dataset_id();
  void set_allocated_destination_dataset_id(::std::string* destination_dataset_id);

  // string display_name = 3;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 3;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string data_source_id = 5;
  void clear_data_source_id();
  static const int kDataSourceIdFieldNumber = 5;
  const ::std::string& data_source_id() const;
  void set_data_source_id(const ::std::string& value);
  #if LANG_CXX11
  void set_data_source_id(::std::string&& value);
  #endif
  void set_data_source_id(const char* value);
  void set_data_source_id(const char* value, size_t size);
  ::std::string* mutable_data_source_id();
  ::std::string* release_data_source_id();
  void set_allocated_data_source_id(::std::string* data_source_id);

  // string schedule = 7;
  void clear_schedule();
  static const int kScheduleFieldNumber = 7;
  const ::std::string& schedule() const;
  void set_schedule(const ::std::string& value);
  #if LANG_CXX11
  void set_schedule(::std::string&& value);
  #endif
  void set_schedule(const char* value);
  void set_schedule(const char* value, size_t size);
  ::std::string* mutable_schedule();
  ::std::string* release_schedule();
  void set_allocated_schedule(::std::string* schedule);

  // string dataset_region = 14;
  void clear_dataset_region();
  static const int kDatasetRegionFieldNumber = 14;
  const ::std::string& dataset_region() const;
  void set_dataset_region(const ::std::string& value);
  #if LANG_CXX11
  void set_dataset_region(::std::string&& value);
  #endif
  void set_dataset_region(const char* value);
  void set_dataset_region(const char* value, size_t size);
  ::std::string* mutable_dataset_region();
  ::std::string* release_dataset_region();
  void set_allocated_dataset_region(::std::string* dataset_region);

  // .google.protobuf.Timestamp update_time = 4;
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 4;
  private:
  const ::google::protobuf::Timestamp& _internal_update_time() const;
  public:
  const ::google::protobuf::Timestamp& update_time() const;
  ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* update_time);

  // .google.protobuf.Timestamp next_run_time = 8;
  bool has_next_run_time() const;
  void clear_next_run_time();
  static const int kNextRunTimeFieldNumber = 8;
  private:
  const ::google::protobuf::Timestamp& _internal_next_run_time() const;
  public:
  const ::google::protobuf::Timestamp& next_run_time() const;
  ::google::protobuf::Timestamp* release_next_run_time();
  ::google::protobuf::Timestamp* mutable_next_run_time();
  void set_allocated_next_run_time(::google::protobuf::Timestamp* next_run_time);

  // .google.protobuf.Struct params = 9;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 9;
  private:
  const ::google::protobuf::Struct& _internal_params() const;
  public:
  const ::google::protobuf::Struct& params() const;
  ::google::protobuf::Struct* release_params();
  ::google::protobuf::Struct* mutable_params();
  void set_allocated_params(::google::protobuf::Struct* params);

  // int64 user_id = 11;
  void clear_user_id();
  static const int kUserIdFieldNumber = 11;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // .google.cloud.bigquery.datatransfer.v1.TransferState state = 10;
  void clear_state();
  static const int kStateFieldNumber = 10;
  ::google::cloud::bigquery::datatransfer::v1::TransferState state() const;
  void set_state(::google::cloud::bigquery::datatransfer::v1::TransferState value);

  // int32 data_refresh_window_days = 12;
  void clear_data_refresh_window_days();
  static const int kDataRefreshWindowDaysFieldNumber = 12;
  ::google::protobuf::int32 data_refresh_window_days() const;
  void set_data_refresh_window_days(::google::protobuf::int32 value);

  // bool disabled = 13;
  void clear_disabled();
  static const int kDisabledFieldNumber = 13;
  bool disabled() const;
  void set_disabled(bool value);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.TransferConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr destination_dataset_id_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr data_source_id_;
  ::google::protobuf::internal::ArenaStringPtr schedule_;
  ::google::protobuf::internal::ArenaStringPtr dataset_region_;
  ::google::protobuf::Timestamp* update_time_;
  ::google::protobuf::Timestamp* next_run_time_;
  ::google::protobuf::Struct* params_;
  ::google::protobuf::int64 user_id_;
  int state_;
  ::google::protobuf::int32 data_refresh_window_days_;
  bool disabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransferRun : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.TransferRun) */ {
 public:
  TransferRun();
  virtual ~TransferRun();

  TransferRun(const TransferRun& from);

  inline TransferRun& operator=(const TransferRun& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransferRun(TransferRun&& from) noexcept
    : TransferRun() {
    *this = ::std::move(from);
  }

  inline TransferRun& operator=(TransferRun&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferRun& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferRun* internal_default_instance() {
    return reinterpret_cast<const TransferRun*>(
               &_TransferRun_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TransferRun* other);
  friend void swap(TransferRun& a, TransferRun& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferRun* New() const final {
    return CreateMaybeMessage<TransferRun>(NULL);
  }

  TransferRun* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransferRun>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransferRun& from);
  void MergeFrom(const TransferRun& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferRun* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string destination_dataset_id = 2;
  void clear_destination_dataset_id();
  static const int kDestinationDatasetIdFieldNumber = 2;
  const ::std::string& destination_dataset_id() const;
  void set_destination_dataset_id(const ::std::string& value);
  #if LANG_CXX11
  void set_destination_dataset_id(::std::string&& value);
  #endif
  void set_destination_dataset_id(const char* value);
  void set_destination_dataset_id(const char* value, size_t size);
  ::std::string* mutable_destination_dataset_id();
  ::std::string* release_destination_dataset_id();
  void set_allocated_destination_dataset_id(::std::string* destination_dataset_id);

  // string data_source_id = 7;
  void clear_data_source_id();
  static const int kDataSourceIdFieldNumber = 7;
  const ::std::string& data_source_id() const;
  void set_data_source_id(const ::std::string& value);
  #if LANG_CXX11
  void set_data_source_id(::std::string&& value);
  #endif
  void set_data_source_id(const char* value);
  void set_data_source_id(const char* value, size_t size);
  ::std::string* mutable_data_source_id();
  ::std::string* release_data_source_id();
  void set_allocated_data_source_id(::std::string* data_source_id);

  // string schedule = 12;
  void clear_schedule();
  static const int kScheduleFieldNumber = 12;
  const ::std::string& schedule() const;
  void set_schedule(const ::std::string& value);
  #if LANG_CXX11
  void set_schedule(::std::string&& value);
  #endif
  void set_schedule(const char* value);
  void set_schedule(const char* value, size_t size);
  ::std::string* mutable_schedule();
  ::std::string* release_schedule();
  void set_allocated_schedule(::std::string* schedule);

  // .google.protobuf.Timestamp schedule_time = 3;
  bool has_schedule_time() const;
  void clear_schedule_time();
  static const int kScheduleTimeFieldNumber = 3;
  private:
  const ::google::protobuf::Timestamp& _internal_schedule_time() const;
  public:
  const ::google::protobuf::Timestamp& schedule_time() const;
  ::google::protobuf::Timestamp* release_schedule_time();
  ::google::protobuf::Timestamp* mutable_schedule_time();
  void set_allocated_schedule_time(::google::protobuf::Timestamp* schedule_time);

  // .google.protobuf.Timestamp start_time = 4;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 4;
  private:
  const ::google::protobuf::Timestamp& _internal_start_time() const;
  public:
  const ::google::protobuf::Timestamp& start_time() const;
  ::google::protobuf::Timestamp* release_start_time();
  ::google::protobuf::Timestamp* mutable_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* start_time);

  // .google.protobuf.Timestamp end_time = 5;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 5;
  private:
  const ::google::protobuf::Timestamp& _internal_end_time() const;
  public:
  const ::google::protobuf::Timestamp& end_time() const;
  ::google::protobuf::Timestamp* release_end_time();
  ::google::protobuf::Timestamp* mutable_end_time();
  void set_allocated_end_time(::google::protobuf::Timestamp* end_time);

  // .google.protobuf.Timestamp update_time = 6;
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 6;
  private:
  const ::google::protobuf::Timestamp& _internal_update_time() const;
  public:
  const ::google::protobuf::Timestamp& update_time() const;
  ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* update_time);

  // .google.protobuf.Struct params = 9;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 9;
  private:
  const ::google::protobuf::Struct& _internal_params() const;
  public:
  const ::google::protobuf::Struct& params() const;
  ::google::protobuf::Struct* release_params();
  ::google::protobuf::Struct* mutable_params();
  void set_allocated_params(::google::protobuf::Struct* params);

  // .google.protobuf.Timestamp run_time = 10;
  bool has_run_time() const;
  void clear_run_time();
  static const int kRunTimeFieldNumber = 10;
  private:
  const ::google::protobuf::Timestamp& _internal_run_time() const;
  public:
  const ::google::protobuf::Timestamp& run_time() const;
  ::google::protobuf::Timestamp* release_run_time();
  ::google::protobuf::Timestamp* mutable_run_time();
  void set_allocated_run_time(::google::protobuf::Timestamp* run_time);

  // .google.rpc.Status error_status = 21;
  bool has_error_status() const;
  void clear_error_status();
  static const int kErrorStatusFieldNumber = 21;
  private:
  const ::google::rpc::Status& _internal_error_status() const;
  public:
  const ::google::rpc::Status& error_status() const;
  ::google::rpc::Status* release_error_status();
  ::google::rpc::Status* mutable_error_status();
  void set_allocated_error_status(::google::rpc::Status* error_status);

  // int64 user_id = 11;
  void clear_user_id();
  static const int kUserIdFieldNumber = 11;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // .google.cloud.bigquery.datatransfer.v1.TransferState state = 8;
  void clear_state();
  static const int kStateFieldNumber = 8;
  ::google::cloud::bigquery::datatransfer::v1::TransferState state() const;
  void set_state(::google::cloud::bigquery::datatransfer::v1::TransferState value);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.TransferRun)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr destination_dataset_id_;
  ::google::protobuf::internal::ArenaStringPtr data_source_id_;
  ::google::protobuf::internal::ArenaStringPtr schedule_;
  ::google::protobuf::Timestamp* schedule_time_;
  ::google::protobuf::Timestamp* start_time_;
  ::google::protobuf::Timestamp* end_time_;
  ::google::protobuf::Timestamp* update_time_;
  ::google::protobuf::Struct* params_;
  ::google::protobuf::Timestamp* run_time_;
  ::google::rpc::Status* error_status_;
  ::google::protobuf::int64 user_id_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransferMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.datatransfer.v1.TransferMessage) */ {
 public:
  TransferMessage();
  virtual ~TransferMessage();

  TransferMessage(const TransferMessage& from);

  inline TransferMessage& operator=(const TransferMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransferMessage(TransferMessage&& from) noexcept
    : TransferMessage() {
    *this = ::std::move(from);
  }

  inline TransferMessage& operator=(TransferMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferMessage* internal_default_instance() {
    return reinterpret_cast<const TransferMessage*>(
               &_TransferMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TransferMessage* other);
  friend void swap(TransferMessage& a, TransferMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferMessage* New() const final {
    return CreateMaybeMessage<TransferMessage>(NULL);
  }

  TransferMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransferMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransferMessage& from);
  void MergeFrom(const TransferMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TransferMessage_MessageSeverity MessageSeverity;
  static const MessageSeverity MESSAGE_SEVERITY_UNSPECIFIED =
    TransferMessage_MessageSeverity_MESSAGE_SEVERITY_UNSPECIFIED;
  static const MessageSeverity INFO =
    TransferMessage_MessageSeverity_INFO;
  static const MessageSeverity WARNING =
    TransferMessage_MessageSeverity_WARNING;
  static const MessageSeverity ERROR =
    TransferMessage_MessageSeverity_ERROR;
  static inline bool MessageSeverity_IsValid(int value) {
    return TransferMessage_MessageSeverity_IsValid(value);
  }
  static const MessageSeverity MessageSeverity_MIN =
    TransferMessage_MessageSeverity_MessageSeverity_MIN;
  static const MessageSeverity MessageSeverity_MAX =
    TransferMessage_MessageSeverity_MessageSeverity_MAX;
  static const int MessageSeverity_ARRAYSIZE =
    TransferMessage_MessageSeverity_MessageSeverity_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageSeverity_descriptor() {
    return TransferMessage_MessageSeverity_descriptor();
  }
  static inline const ::std::string& MessageSeverity_Name(MessageSeverity value) {
    return TransferMessage_MessageSeverity_Name(value);
  }
  static inline bool MessageSeverity_Parse(const ::std::string& name,
      MessageSeverity* value) {
    return TransferMessage_MessageSeverity_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string message_text = 3;
  void clear_message_text();
  static const int kMessageTextFieldNumber = 3;
  const ::std::string& message_text() const;
  void set_message_text(const ::std::string& value);
  #if LANG_CXX11
  void set_message_text(::std::string&& value);
  #endif
  void set_message_text(const char* value);
  void set_message_text(const char* value, size_t size);
  ::std::string* mutable_message_text();
  ::std::string* release_message_text();
  void set_allocated_message_text(::std::string* message_text);

  // .google.protobuf.Timestamp message_time = 1;
  bool has_message_time() const;
  void clear_message_time();
  static const int kMessageTimeFieldNumber = 1;
  private:
  const ::google::protobuf::Timestamp& _internal_message_time() const;
  public:
  const ::google::protobuf::Timestamp& message_time() const;
  ::google::protobuf::Timestamp* release_message_time();
  ::google::protobuf::Timestamp* mutable_message_time();
  void set_allocated_message_time(::google::protobuf::Timestamp* message_time);

  // .google.cloud.bigquery.datatransfer.v1.TransferMessage.MessageSeverity severity = 2;
  void clear_severity();
  static const int kSeverityFieldNumber = 2;
  ::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity severity() const;
  void set_severity(::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity value);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.TransferMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_text_;
  ::google::protobuf::Timestamp* message_time_;
  int severity_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransferConfig

// string name = 1;
inline void TransferConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferConfig::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.name)
  return name_.GetNoArena();
}
inline void TransferConfig::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferConfig.name)
}
#if LANG_CXX11
inline void TransferConfig::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.TransferConfig.name)
}
#endif
inline void TransferConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.TransferConfig.name)
}
inline void TransferConfig::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.TransferConfig.name)
}
inline ::std::string* TransferConfig::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferConfig::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferConfig.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferConfig.name)
}

// string destination_dataset_id = 2;
inline void TransferConfig::clear_destination_dataset_id() {
  destination_dataset_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferConfig::destination_dataset_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.destination_dataset_id)
  return destination_dataset_id_.GetNoArena();
}
inline void TransferConfig::set_destination_dataset_id(const ::std::string& value) {
  
  destination_dataset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferConfig.destination_dataset_id)
}
#if LANG_CXX11
inline void TransferConfig::set_destination_dataset_id(::std::string&& value) {
  
  destination_dataset_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.TransferConfig.destination_dataset_id)
}
#endif
inline void TransferConfig::set_destination_dataset_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  destination_dataset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.TransferConfig.destination_dataset_id)
}
inline void TransferConfig::set_destination_dataset_id(const char* value, size_t size) {
  
  destination_dataset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.TransferConfig.destination_dataset_id)
}
inline ::std::string* TransferConfig::mutable_destination_dataset_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferConfig.destination_dataset_id)
  return destination_dataset_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferConfig::release_destination_dataset_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferConfig.destination_dataset_id)
  
  return destination_dataset_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferConfig::set_allocated_destination_dataset_id(::std::string* destination_dataset_id) {
  if (destination_dataset_id != NULL) {
    
  } else {
    
  }
  destination_dataset_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination_dataset_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferConfig.destination_dataset_id)
}

// string display_name = 3;
inline void TransferConfig::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferConfig::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.display_name)
  return display_name_.GetNoArena();
}
inline void TransferConfig::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferConfig.display_name)
}
#if LANG_CXX11
inline void TransferConfig::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.TransferConfig.display_name)
}
#endif
inline void TransferConfig::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.TransferConfig.display_name)
}
inline void TransferConfig::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.TransferConfig.display_name)
}
inline ::std::string* TransferConfig::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferConfig.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferConfig::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferConfig.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferConfig::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferConfig.display_name)
}

// string data_source_id = 5;
inline void TransferConfig::clear_data_source_id() {
  data_source_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferConfig::data_source_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.data_source_id)
  return data_source_id_.GetNoArena();
}
inline void TransferConfig::set_data_source_id(const ::std::string& value) {
  
  data_source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferConfig.data_source_id)
}
#if LANG_CXX11
inline void TransferConfig::set_data_source_id(::std::string&& value) {
  
  data_source_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.TransferConfig.data_source_id)
}
#endif
inline void TransferConfig::set_data_source_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.TransferConfig.data_source_id)
}
inline void TransferConfig::set_data_source_id(const char* value, size_t size) {
  
  data_source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.TransferConfig.data_source_id)
}
inline ::std::string* TransferConfig::mutable_data_source_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferConfig.data_source_id)
  return data_source_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferConfig::release_data_source_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferConfig.data_source_id)
  
  return data_source_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferConfig::set_allocated_data_source_id(::std::string* data_source_id) {
  if (data_source_id != NULL) {
    
  } else {
    
  }
  data_source_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_source_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferConfig.data_source_id)
}

// .google.protobuf.Struct params = 9;
inline bool TransferConfig::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline const ::google::protobuf::Struct& TransferConfig::_internal_params() const {
  return *params_;
}
inline const ::google::protobuf::Struct& TransferConfig::params() const {
  const ::google::protobuf::Struct* p = params_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.params)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* TransferConfig::release_params() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferConfig.params)
  
  ::google::protobuf::Struct* temp = params_;
  params_ = NULL;
  return temp;
}
inline ::google::protobuf::Struct* TransferConfig::mutable_params() {
  
  if (params_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArenaNoVirtual());
    params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferConfig.params)
  return params_;
}
inline void TransferConfig::set_allocated_params(::google::protobuf::Struct* params) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(params_);
  }
  if (params) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(params)->GetArena();
    if (message_arena != submessage_arena) {
      params = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferConfig.params)
}

// string schedule = 7;
inline void TransferConfig::clear_schedule() {
  schedule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferConfig::schedule() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.schedule)
  return schedule_.GetNoArena();
}
inline void TransferConfig::set_schedule(const ::std::string& value) {
  
  schedule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferConfig.schedule)
}
#if LANG_CXX11
inline void TransferConfig::set_schedule(::std::string&& value) {
  
  schedule_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.TransferConfig.schedule)
}
#endif
inline void TransferConfig::set_schedule(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  schedule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.TransferConfig.schedule)
}
inline void TransferConfig::set_schedule(const char* value, size_t size) {
  
  schedule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.TransferConfig.schedule)
}
inline ::std::string* TransferConfig::mutable_schedule() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferConfig.schedule)
  return schedule_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferConfig::release_schedule() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferConfig.schedule)
  
  return schedule_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferConfig::set_allocated_schedule(::std::string* schedule) {
  if (schedule != NULL) {
    
  } else {
    
  }
  schedule_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), schedule);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferConfig.schedule)
}

// int32 data_refresh_window_days = 12;
inline void TransferConfig::clear_data_refresh_window_days() {
  data_refresh_window_days_ = 0;
}
inline ::google::protobuf::int32 TransferConfig::data_refresh_window_days() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.data_refresh_window_days)
  return data_refresh_window_days_;
}
inline void TransferConfig::set_data_refresh_window_days(::google::protobuf::int32 value) {
  
  data_refresh_window_days_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferConfig.data_refresh_window_days)
}

// bool disabled = 13;
inline void TransferConfig::clear_disabled() {
  disabled_ = false;
}
inline bool TransferConfig::disabled() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.disabled)
  return disabled_;
}
inline void TransferConfig::set_disabled(bool value) {
  
  disabled_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferConfig.disabled)
}

// .google.protobuf.Timestamp update_time = 4;
inline bool TransferConfig::has_update_time() const {
  return this != internal_default_instance() && update_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& TransferConfig::_internal_update_time() const {
  return *update_time_;
}
inline const ::google::protobuf::Timestamp& TransferConfig::update_time() const {
  const ::google::protobuf::Timestamp* p = update_time_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.update_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TransferConfig::release_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferConfig.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TransferConfig::mutable_update_time() {
  
  if (update_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    update_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferConfig.update_time)
  return update_time_;
}
inline void TransferConfig::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferConfig.update_time)
}

// .google.protobuf.Timestamp next_run_time = 8;
inline bool TransferConfig::has_next_run_time() const {
  return this != internal_default_instance() && next_run_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& TransferConfig::_internal_next_run_time() const {
  return *next_run_time_;
}
inline const ::google::protobuf::Timestamp& TransferConfig::next_run_time() const {
  const ::google::protobuf::Timestamp* p = next_run_time_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.next_run_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TransferConfig::release_next_run_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferConfig.next_run_time)
  
  ::google::protobuf::Timestamp* temp = next_run_time_;
  next_run_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TransferConfig::mutable_next_run_time() {
  
  if (next_run_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    next_run_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferConfig.next_run_time)
  return next_run_time_;
}
inline void TransferConfig::set_allocated_next_run_time(::google::protobuf::Timestamp* next_run_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(next_run_time_);
  }
  if (next_run_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(next_run_time)->GetArena();
    if (message_arena != submessage_arena) {
      next_run_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, next_run_time, submessage_arena);
    }
    
  } else {
    
  }
  next_run_time_ = next_run_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferConfig.next_run_time)
}

// .google.cloud.bigquery.datatransfer.v1.TransferState state = 10;
inline void TransferConfig::clear_state() {
  state_ = 0;
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferState TransferConfig::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.state)
  return static_cast< ::google::cloud::bigquery::datatransfer::v1::TransferState >(state_);
}
inline void TransferConfig::set_state(::google::cloud::bigquery::datatransfer::v1::TransferState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferConfig.state)
}

// int64 user_id = 11;
inline void TransferConfig::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TransferConfig::user_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.user_id)
  return user_id_;
}
inline void TransferConfig::set_user_id(::google::protobuf::int64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferConfig.user_id)
}

// string dataset_region = 14;
inline void TransferConfig::clear_dataset_region() {
  dataset_region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferConfig::dataset_region() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferConfig.dataset_region)
  return dataset_region_.GetNoArena();
}
inline void TransferConfig::set_dataset_region(const ::std::string& value) {
  
  dataset_region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferConfig.dataset_region)
}
#if LANG_CXX11
inline void TransferConfig::set_dataset_region(::std::string&& value) {
  
  dataset_region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.TransferConfig.dataset_region)
}
#endif
inline void TransferConfig::set_dataset_region(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dataset_region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.TransferConfig.dataset_region)
}
inline void TransferConfig::set_dataset_region(const char* value, size_t size) {
  
  dataset_region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.TransferConfig.dataset_region)
}
inline ::std::string* TransferConfig::mutable_dataset_region() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferConfig.dataset_region)
  return dataset_region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferConfig::release_dataset_region() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferConfig.dataset_region)
  
  return dataset_region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferConfig::set_allocated_dataset_region(::std::string* dataset_region) {
  if (dataset_region != NULL) {
    
  } else {
    
  }
  dataset_region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataset_region);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferConfig.dataset_region)
}

// -------------------------------------------------------------------

// TransferRun

// string name = 1;
inline void TransferRun::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferRun::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferRun.name)
  return name_.GetNoArena();
}
inline void TransferRun::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferRun.name)
}
#if LANG_CXX11
inline void TransferRun::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.TransferRun.name)
}
#endif
inline void TransferRun::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.TransferRun.name)
}
inline void TransferRun::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.TransferRun.name)
}
inline ::std::string* TransferRun::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferRun.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferRun::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferRun.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferRun::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.name)
}

// .google.protobuf.Timestamp schedule_time = 3;
inline bool TransferRun::has_schedule_time() const {
  return this != internal_default_instance() && schedule_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& TransferRun::_internal_schedule_time() const {
  return *schedule_time_;
}
inline const ::google::protobuf::Timestamp& TransferRun::schedule_time() const {
  const ::google::protobuf::Timestamp* p = schedule_time_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferRun.schedule_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TransferRun::release_schedule_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferRun.schedule_time)
  
  ::google::protobuf::Timestamp* temp = schedule_time_;
  schedule_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TransferRun::mutable_schedule_time() {
  
  if (schedule_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    schedule_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferRun.schedule_time)
  return schedule_time_;
}
inline void TransferRun::set_allocated_schedule_time(::google::protobuf::Timestamp* schedule_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(schedule_time_);
  }
  if (schedule_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(schedule_time)->GetArena();
    if (message_arena != submessage_arena) {
      schedule_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, schedule_time, submessage_arena);
    }
    
  } else {
    
  }
  schedule_time_ = schedule_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.schedule_time)
}

// .google.protobuf.Timestamp run_time = 10;
inline bool TransferRun::has_run_time() const {
  return this != internal_default_instance() && run_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& TransferRun::_internal_run_time() const {
  return *run_time_;
}
inline const ::google::protobuf::Timestamp& TransferRun::run_time() const {
  const ::google::protobuf::Timestamp* p = run_time_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferRun.run_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TransferRun::release_run_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferRun.run_time)
  
  ::google::protobuf::Timestamp* temp = run_time_;
  run_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TransferRun::mutable_run_time() {
  
  if (run_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    run_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferRun.run_time)
  return run_time_;
}
inline void TransferRun::set_allocated_run_time(::google::protobuf::Timestamp* run_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(run_time_);
  }
  if (run_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(run_time)->GetArena();
    if (message_arena != submessage_arena) {
      run_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, run_time, submessage_arena);
    }
    
  } else {
    
  }
  run_time_ = run_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.run_time)
}

// .google.rpc.Status error_status = 21;
inline bool TransferRun::has_error_status() const {
  return this != internal_default_instance() && error_status_ != NULL;
}
inline const ::google::rpc::Status& TransferRun::_internal_error_status() const {
  return *error_status_;
}
inline const ::google::rpc::Status& TransferRun::error_status() const {
  const ::google::rpc::Status* p = error_status_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferRun.error_status)
  return p != NULL ? *p : *reinterpret_cast<const ::google::rpc::Status*>(
      &::google::rpc::_Status_default_instance_);
}
inline ::google::rpc::Status* TransferRun::release_error_status() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferRun.error_status)
  
  ::google::rpc::Status* temp = error_status_;
  error_status_ = NULL;
  return temp;
}
inline ::google::rpc::Status* TransferRun::mutable_error_status() {
  
  if (error_status_ == NULL) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaNoVirtual());
    error_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferRun.error_status)
  return error_status_;
}
inline void TransferRun::set_allocated_error_status(::google::rpc::Status* error_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_status_);
  }
  if (error_status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error_status, submessage_arena);
    }
    
  } else {
    
  }
  error_status_ = error_status;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.error_status)
}

// .google.protobuf.Timestamp start_time = 4;
inline bool TransferRun::has_start_time() const {
  return this != internal_default_instance() && start_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& TransferRun::_internal_start_time() const {
  return *start_time_;
}
inline const ::google::protobuf::Timestamp& TransferRun::start_time() const {
  const ::google::protobuf::Timestamp* p = start_time_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferRun.start_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TransferRun::release_start_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferRun.start_time)
  
  ::google::protobuf::Timestamp* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TransferRun::mutable_start_time() {
  
  if (start_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    start_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferRun.start_time)
  return start_time_;
}
inline void TransferRun::set_allocated_start_time(::google::protobuf::Timestamp* start_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.start_time)
}

// .google.protobuf.Timestamp end_time = 5;
inline bool TransferRun::has_end_time() const {
  return this != internal_default_instance() && end_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& TransferRun::_internal_end_time() const {
  return *end_time_;
}
inline const ::google::protobuf::Timestamp& TransferRun::end_time() const {
  const ::google::protobuf::Timestamp* p = end_time_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferRun.end_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TransferRun::release_end_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferRun.end_time)
  
  ::google::protobuf::Timestamp* temp = end_time_;
  end_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TransferRun::mutable_end_time() {
  
  if (end_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    end_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferRun.end_time)
  return end_time_;
}
inline void TransferRun::set_allocated_end_time(::google::protobuf::Timestamp* end_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.end_time)
}

// .google.protobuf.Timestamp update_time = 6;
inline bool TransferRun::has_update_time() const {
  return this != internal_default_instance() && update_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& TransferRun::_internal_update_time() const {
  return *update_time_;
}
inline const ::google::protobuf::Timestamp& TransferRun::update_time() const {
  const ::google::protobuf::Timestamp* p = update_time_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferRun.update_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TransferRun::release_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferRun.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TransferRun::mutable_update_time() {
  
  if (update_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    update_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferRun.update_time)
  return update_time_;
}
inline void TransferRun::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.update_time)
}

// .google.protobuf.Struct params = 9;
inline bool TransferRun::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline const ::google::protobuf::Struct& TransferRun::_internal_params() const {
  return *params_;
}
inline const ::google::protobuf::Struct& TransferRun::params() const {
  const ::google::protobuf::Struct* p = params_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferRun.params)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* TransferRun::release_params() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferRun.params)
  
  ::google::protobuf::Struct* temp = params_;
  params_ = NULL;
  return temp;
}
inline ::google::protobuf::Struct* TransferRun::mutable_params() {
  
  if (params_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArenaNoVirtual());
    params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferRun.params)
  return params_;
}
inline void TransferRun::set_allocated_params(::google::protobuf::Struct* params) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(params_);
  }
  if (params) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(params)->GetArena();
    if (message_arena != submessage_arena) {
      params = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.params)
}

// string destination_dataset_id = 2;
inline void TransferRun::clear_destination_dataset_id() {
  destination_dataset_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferRun::destination_dataset_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferRun.destination_dataset_id)
  return destination_dataset_id_.GetNoArena();
}
inline void TransferRun::set_destination_dataset_id(const ::std::string& value) {
  
  destination_dataset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferRun.destination_dataset_id)
}
#if LANG_CXX11
inline void TransferRun::set_destination_dataset_id(::std::string&& value) {
  
  destination_dataset_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.TransferRun.destination_dataset_id)
}
#endif
inline void TransferRun::set_destination_dataset_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  destination_dataset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.TransferRun.destination_dataset_id)
}
inline void TransferRun::set_destination_dataset_id(const char* value, size_t size) {
  
  destination_dataset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.TransferRun.destination_dataset_id)
}
inline ::std::string* TransferRun::mutable_destination_dataset_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferRun.destination_dataset_id)
  return destination_dataset_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferRun::release_destination_dataset_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferRun.destination_dataset_id)
  
  return destination_dataset_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferRun::set_allocated_destination_dataset_id(::std::string* destination_dataset_id) {
  if (destination_dataset_id != NULL) {
    
  } else {
    
  }
  destination_dataset_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination_dataset_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.destination_dataset_id)
}

// string data_source_id = 7;
inline void TransferRun::clear_data_source_id() {
  data_source_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferRun::data_source_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferRun.data_source_id)
  return data_source_id_.GetNoArena();
}
inline void TransferRun::set_data_source_id(const ::std::string& value) {
  
  data_source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferRun.data_source_id)
}
#if LANG_CXX11
inline void TransferRun::set_data_source_id(::std::string&& value) {
  
  data_source_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.TransferRun.data_source_id)
}
#endif
inline void TransferRun::set_data_source_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.TransferRun.data_source_id)
}
inline void TransferRun::set_data_source_id(const char* value, size_t size) {
  
  data_source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.TransferRun.data_source_id)
}
inline ::std::string* TransferRun::mutable_data_source_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferRun.data_source_id)
  return data_source_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferRun::release_data_source_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferRun.data_source_id)
  
  return data_source_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferRun::set_allocated_data_source_id(::std::string* data_source_id) {
  if (data_source_id != NULL) {
    
  } else {
    
  }
  data_source_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_source_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.data_source_id)
}

// .google.cloud.bigquery.datatransfer.v1.TransferState state = 8;
inline void TransferRun::clear_state() {
  state_ = 0;
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferState TransferRun::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferRun.state)
  return static_cast< ::google::cloud::bigquery::datatransfer::v1::TransferState >(state_);
}
inline void TransferRun::set_state(::google::cloud::bigquery::datatransfer::v1::TransferState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferRun.state)
}

// int64 user_id = 11;
inline void TransferRun::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TransferRun::user_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferRun.user_id)
  return user_id_;
}
inline void TransferRun::set_user_id(::google::protobuf::int64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferRun.user_id)
}

// string schedule = 12;
inline void TransferRun::clear_schedule() {
  schedule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferRun::schedule() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferRun.schedule)
  return schedule_.GetNoArena();
}
inline void TransferRun::set_schedule(const ::std::string& value) {
  
  schedule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferRun.schedule)
}
#if LANG_CXX11
inline void TransferRun::set_schedule(::std::string&& value) {
  
  schedule_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.TransferRun.schedule)
}
#endif
inline void TransferRun::set_schedule(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  schedule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.TransferRun.schedule)
}
inline void TransferRun::set_schedule(const char* value, size_t size) {
  
  schedule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.TransferRun.schedule)
}
inline ::std::string* TransferRun::mutable_schedule() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferRun.schedule)
  return schedule_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferRun::release_schedule() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferRun.schedule)
  
  return schedule_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferRun::set_allocated_schedule(::std::string* schedule) {
  if (schedule != NULL) {
    
  } else {
    
  }
  schedule_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), schedule);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferRun.schedule)
}

// -------------------------------------------------------------------

// TransferMessage

// .google.protobuf.Timestamp message_time = 1;
inline bool TransferMessage::has_message_time() const {
  return this != internal_default_instance() && message_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& TransferMessage::_internal_message_time() const {
  return *message_time_;
}
inline const ::google::protobuf::Timestamp& TransferMessage::message_time() const {
  const ::google::protobuf::Timestamp* p = message_time_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferMessage.message_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TransferMessage::release_message_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferMessage.message_time)
  
  ::google::protobuf::Timestamp* temp = message_time_;
  message_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TransferMessage::mutable_message_time() {
  
  if (message_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    message_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferMessage.message_time)
  return message_time_;
}
inline void TransferMessage::set_allocated_message_time(::google::protobuf::Timestamp* message_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(message_time_);
  }
  if (message_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(message_time)->GetArena();
    if (message_arena != submessage_arena) {
      message_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message_time, submessage_arena);
    }
    
  } else {
    
  }
  message_time_ = message_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferMessage.message_time)
}

// .google.cloud.bigquery.datatransfer.v1.TransferMessage.MessageSeverity severity = 2;
inline void TransferMessage::clear_severity() {
  severity_ = 0;
}
inline ::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity TransferMessage::severity() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferMessage.severity)
  return static_cast< ::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity >(severity_);
}
inline void TransferMessage::set_severity(::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity value) {
  
  severity_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferMessage.severity)
}

// string message_text = 3;
inline void TransferMessage::clear_message_text() {
  message_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferMessage::message_text() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.datatransfer.v1.TransferMessage.message_text)
  return message_text_.GetNoArena();
}
inline void TransferMessage::set_message_text(const ::std::string& value) {
  
  message_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.datatransfer.v1.TransferMessage.message_text)
}
#if LANG_CXX11
inline void TransferMessage::set_message_text(::std::string&& value) {
  
  message_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.datatransfer.v1.TransferMessage.message_text)
}
#endif
inline void TransferMessage::set_message_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.datatransfer.v1.TransferMessage.message_text)
}
inline void TransferMessage::set_message_text(const char* value, size_t size) {
  
  message_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.datatransfer.v1.TransferMessage.message_text)
}
inline ::std::string* TransferMessage::mutable_message_text() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.datatransfer.v1.TransferMessage.message_text)
  return message_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferMessage::release_message_text() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.datatransfer.v1.TransferMessage.message_text)
  
  return message_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferMessage::set_allocated_message_text(::std::string* message_text) {
  if (message_text != NULL) {
    
  } else {
    
  }
  message_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_text);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.datatransfer.v1.TransferMessage.message_text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace datatransfer
}  // namespace bigquery
}  // namespace cloud
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity>() {
  return ::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::bigquery::datatransfer::v1::TransferType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::datatransfer::v1::TransferType>() {
  return ::google::cloud::bigquery::datatransfer::v1::TransferType_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::bigquery::datatransfer::v1::TransferState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::bigquery::datatransfer::v1::TransferState>() {
  return ::google::cloud::bigquery::datatransfer::v1::TransferState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto
