// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/datatransfer/v1/transfer.proto

#include "google/cloud/bigquery/datatransfer/v1/transfer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2fstruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fstruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ListValue;
}  // namespace protobuf_google_2fprotobuf_2fstruct_2eproto
namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto
namespace protobuf_google_2frpc_2fstatus_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2frpc_2fstatus_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Status;
}  // namespace protobuf_google_2frpc_2fstatus_2eproto
namespace google {
namespace cloud {
namespace bigquery {
namespace datatransfer {
namespace v1 {
class TransferConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransferConfig>
      _instance;
} _TransferConfig_default_instance_;
class TransferRunDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransferRun>
      _instance;
} _TransferRun_default_instance_;
class TransferMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransferMessage>
      _instance;
} _TransferMessage_default_instance_;
}  // namespace v1
}  // namespace datatransfer
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
namespace protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto {
static void InitDefaultsTransferConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::datatransfer::v1::_TransferConfig_default_instance_;
    new (ptr) ::google::cloud::bigquery::datatransfer::v1::TransferConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::datatransfer::v1::TransferConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TransferConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTransferConfig}, {
      &protobuf_google_2fprotobuf_2fstruct_2eproto::scc_info_ListValue.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsTransferRun() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::datatransfer::v1::_TransferRun_default_instance_;
    new (ptr) ::google::cloud::bigquery::datatransfer::v1::TransferRun();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::datatransfer::v1::TransferRun::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_TransferRun =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTransferRun}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_google_2frpc_2fstatus_2eproto::scc_info_Status.base,
      &protobuf_google_2fprotobuf_2fstruct_2eproto::scc_info_ListValue.base,}};

static void InitDefaultsTransferMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::bigquery::datatransfer::v1::_TransferMessage_default_instance_;
    new (ptr) ::google::cloud::bigquery::datatransfer::v1::TransferMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::bigquery::datatransfer::v1::TransferMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TransferMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTransferMessage}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TransferConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransferRun.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransferMessage.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferConfig, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferConfig, destination_dataset_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferConfig, display_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferConfig, data_source_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferConfig, params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferConfig, schedule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferConfig, data_refresh_window_days_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferConfig, disabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferConfig, update_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferConfig, next_run_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferConfig, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferConfig, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferConfig, dataset_region_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferRun, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferRun, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferRun, schedule_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferRun, run_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferRun, error_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferRun, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferRun, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferRun, update_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferRun, params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferRun, destination_dataset_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferRun, data_source_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferRun, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferRun, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferRun, schedule_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferMessage, message_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferMessage, severity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::bigquery::datatransfer::v1::TransferMessage, message_text_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::cloud::bigquery::datatransfer::v1::TransferConfig)},
  { 18, -1, sizeof(::google::cloud::bigquery::datatransfer::v1::TransferRun)},
  { 36, -1, sizeof(::google::cloud::bigquery::datatransfer::v1::TransferMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::bigquery::datatransfer::v1::_TransferConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::bigquery::datatransfer::v1::_TransferRun_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::bigquery::datatransfer::v1::_TransferMessage_default_instance_),
};

static void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "google/cloud/bigquery/datatransfer/v1/transfer.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

static void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

static void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n4google/cloud/bigquery/datatransfer/v1/"
      "transfer.proto\022%google.cloud.bigquery.da"
      "tatransfer.v1\032\034google/api/annotations.pr"
      "oto\032\034google/protobuf/struct.proto\032\037googl"
      "e/protobuf/timestamp.proto\032\027google/rpc/s"
      "tatus.proto\"\255\003\n\016TransferConfig\022\014\n\004name\030\001"
      " \001(\t\022\036\n\026destination_dataset_id\030\002 \001(\t\022\024\n\014"
      "display_name\030\003 \001(\t\022\026\n\016data_source_id\030\005 \001"
      "(\t\022\'\n\006params\030\t \001(\0132\027.google.protobuf.Str"
      "uct\022\020\n\010schedule\030\007 \001(\t\022 \n\030data_refresh_wi"
      "ndow_days\030\014 \001(\005\022\020\n\010disabled\030\r \001(\010\022/\n\013upd"
      "ate_time\030\004 \001(\0132\032.google.protobuf.Timesta"
      "mp\0221\n\rnext_run_time\030\010 \001(\0132\032.google.proto"
      "buf.Timestamp\022C\n\005state\030\n \001(\01624.google.cl"
      "oud.bigquery.datatransfer.v1.TransferSta"
      "te\022\017\n\007user_id\030\013 \001(\003\022\026\n\016dataset_region\030\016 "
      "\001(\t\"\376\003\n\013TransferRun\022\014\n\004name\030\001 \001(\t\0221\n\rsch"
      "edule_time\030\003 \001(\0132\032.google.protobuf.Times"
      "tamp\022,\n\010run_time\030\n \001(\0132\032.google.protobuf"
      ".Timestamp\022(\n\014error_status\030\025 \001(\0132\022.googl"
      "e.rpc.Status\022.\n\nstart_time\030\004 \001(\0132\032.googl"
      "e.protobuf.Timestamp\022,\n\010end_time\030\005 \001(\0132\032"
      ".google.protobuf.Timestamp\022/\n\013update_tim"
      "e\030\006 \001(\0132\032.google.protobuf.Timestamp\022\'\n\006p"
      "arams\030\t \001(\0132\027.google.protobuf.Struct\022\036\n\026"
      "destination_dataset_id\030\002 \001(\t\022\026\n\016data_sou"
      "rce_id\030\007 \001(\t\022C\n\005state\030\010 \001(\01624.google.clo"
      "ud.bigquery.datatransfer.v1.TransferStat"
      "e\022\017\n\007user_id\030\013 \001(\003\022\020\n\010schedule\030\014 \001(\t\"\212\002\n"
      "\017TransferMessage\0220\n\014message_time\030\001 \001(\0132\032"
      ".google.protobuf.Timestamp\022X\n\010severity\030\002"
      " \001(\0162F.google.cloud.bigquery.datatransfe"
      "r.v1.TransferMessage.MessageSeverity\022\024\n\014"
      "message_text\030\003 \001(\t\"U\n\017MessageSeverity\022 \n"
      "\034MESSAGE_SEVERITY_UNSPECIFIED\020\000\022\010\n\004INFO\020"
      "\001\022\013\n\007WARNING\020\002\022\t\n\005ERROR\020\003*G\n\014TransferTyp"
      "e\022\035\n\031TRANSFER_TYPE_UNSPECIFIED\020\000\022\t\n\005BATC"
      "H\020\001\022\r\n\tSTREAMING\020\002*s\n\rTransferState\022\036\n\032T"
      "RANSFER_STATE_UNSPECIFIED\020\000\022\013\n\007PENDING\020\002"
      "\022\013\n\007RUNNING\020\003\022\r\n\tSUCCEEDED\020\004\022\n\n\006FAILED\020\005"
      "\022\r\n\tCANCELLED\020\006B\347\001\n)com.google.cloud.big"
      "query.datatransfer.v1B\rTransferProtoP\001ZQ"
      "google.golang.org/genproto/googleapis/cl"
      "oud/bigquery/datatransfer/v1;datatransfe"
      "r\242\002\005GCBDT\252\002%Google.Cloud.BigQuery.DataTr"
      "ansfer.V1\312\002%Google\\Cloud\\BigQuery\\DataTr"
      "ansfer\\V1b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1857);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/cloud/bigquery/datatransfer/v1/transfer.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fstruct_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::protobuf_google_2frpc_2fstatus_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto
namespace google {
namespace cloud {
namespace bigquery {
namespace datatransfer {
namespace v1 {
const ::google::protobuf::EnumDescriptor* TransferMessage_MessageSeverity_descriptor() {
  protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto::file_level_enum_descriptors[0];
}
bool TransferMessage_MessageSeverity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TransferMessage_MessageSeverity TransferMessage::MESSAGE_SEVERITY_UNSPECIFIED;
const TransferMessage_MessageSeverity TransferMessage::INFO;
const TransferMessage_MessageSeverity TransferMessage::WARNING;
const TransferMessage_MessageSeverity TransferMessage::ERROR;
const TransferMessage_MessageSeverity TransferMessage::MessageSeverity_MIN;
const TransferMessage_MessageSeverity TransferMessage::MessageSeverity_MAX;
const int TransferMessage::MessageSeverity_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TransferType_descriptor() {
  protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto::file_level_enum_descriptors[1];
}
bool TransferType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TransferState_descriptor() {
  protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto::file_level_enum_descriptors[2];
}
bool TransferState_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TransferConfig::InitAsDefaultInstance() {
  ::google::cloud::bigquery::datatransfer::v1::_TransferConfig_default_instance_._instance.get_mutable()->params_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
  ::google::cloud::bigquery::datatransfer::v1::_TransferConfig_default_instance_._instance.get_mutable()->update_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::cloud::bigquery::datatransfer::v1::_TransferConfig_default_instance_._instance.get_mutable()->next_run_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void TransferConfig::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) {
    delete params_;
  }
  params_ = NULL;
}
void TransferConfig::clear_update_time() {
  if (GetArenaNoVirtual() == NULL && update_time_ != NULL) {
    delete update_time_;
  }
  update_time_ = NULL;
}
void TransferConfig::clear_next_run_time() {
  if (GetArenaNoVirtual() == NULL && next_run_time_ != NULL) {
    delete next_run_time_;
  }
  next_run_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferConfig::kNameFieldNumber;
const int TransferConfig::kDestinationDatasetIdFieldNumber;
const int TransferConfig::kDisplayNameFieldNumber;
const int TransferConfig::kDataSourceIdFieldNumber;
const int TransferConfig::kParamsFieldNumber;
const int TransferConfig::kScheduleFieldNumber;
const int TransferConfig::kDataRefreshWindowDaysFieldNumber;
const int TransferConfig::kDisabledFieldNumber;
const int TransferConfig::kUpdateTimeFieldNumber;
const int TransferConfig::kNextRunTimeFieldNumber;
const int TransferConfig::kStateFieldNumber;
const int TransferConfig::kUserIdFieldNumber;
const int TransferConfig::kDatasetRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferConfig::TransferConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto::scc_info_TransferConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.datatransfer.v1.TransferConfig)
}
TransferConfig::TransferConfig(const TransferConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  destination_dataset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.destination_dataset_id().size() > 0) {
    destination_dataset_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_dataset_id_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  data_source_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data_source_id().size() > 0) {
    data_source_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_source_id_);
  }
  schedule_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.schedule().size() > 0) {
    schedule_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schedule_);
  }
  dataset_region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dataset_region().size() > 0) {
    dataset_region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataset_region_);
  }
  if (from.has_update_time()) {
    update_time_ = new ::google::protobuf::Timestamp(*from.update_time_);
  } else {
    update_time_ = NULL;
  }
  if (from.has_next_run_time()) {
    next_run_time_ = new ::google::protobuf::Timestamp(*from.next_run_time_);
  } else {
    next_run_time_ = NULL;
  }
  if (from.has_params()) {
    params_ = new ::google::protobuf::Struct(*from.params_);
  } else {
    params_ = NULL;
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&disabled_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(disabled_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.datatransfer.v1.TransferConfig)
}

void TransferConfig::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_dataset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_source_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schedule_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&update_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disabled_) -
      reinterpret_cast<char*>(&update_time_)) + sizeof(disabled_));
}

TransferConfig::~TransferConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.datatransfer.v1.TransferConfig)
  SharedDtor();
}

void TransferConfig::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_dataset_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_source_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schedule_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_region_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete update_time_;
  if (this != internal_default_instance()) delete next_run_time_;
  if (this != internal_default_instance()) delete params_;
}

void TransferConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TransferConfig::descriptor() {
  ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransferConfig& TransferConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto::scc_info_TransferConfig.base);
  return *internal_default_instance();
}


void TransferConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.datatransfer.v1.TransferConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_dataset_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_source_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schedule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && update_time_ != NULL) {
    delete update_time_;
  }
  update_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && next_run_time_ != NULL) {
    delete next_run_time_;
  }
  next_run_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && params_ != NULL) {
    delete params_;
  }
  params_ = NULL;
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disabled_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(disabled_));
  _internal_metadata_.Clear();
}

bool TransferConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.datatransfer.v1.TransferConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.datatransfer.v1.TransferConfig.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string destination_dataset_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination_dataset_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destination_dataset_id().data(), static_cast<int>(this->destination_dataset_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.datatransfer.v1.TransferConfig.destination_dataset_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), static_cast<int>(this->display_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.datatransfer.v1.TransferConfig.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp update_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data_source_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_source_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data_source_id().data(), static_cast<int>(this->data_source_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.datatransfer.v1.TransferConfig.data_source_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string schedule = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schedule()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->schedule().data(), static_cast<int>(this->schedule().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.datatransfer.v1.TransferConfig.schedule"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp next_run_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_next_run_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct params = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.datatransfer.v1.TransferState state = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::google::cloud::bigquery::datatransfer::v1::TransferState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 user_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 data_refresh_window_days = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_refresh_window_days_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool disabled = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dataset_region = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset_region()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dataset_region().data(), static_cast<int>(this->dataset_region().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.datatransfer.v1.TransferConfig.dataset_region"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.datatransfer.v1.TransferConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.datatransfer.v1.TransferConfig)
  return false;
#undef DO_
}

void TransferConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.datatransfer.v1.TransferConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.datatransfer.v1.TransferConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string destination_dataset_id = 2;
  if (this->destination_dataset_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination_dataset_id().data(), static_cast<int>(this->destination_dataset_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.datatransfer.v1.TransferConfig.destination_dataset_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->destination_dataset_id(), output);
  }

  // string display_name = 3;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.datatransfer.v1.TransferConfig.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->display_name(), output);
  }

  // .google.protobuf.Timestamp update_time = 4;
  if (this->has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_update_time(), output);
  }

  // string data_source_id = 5;
  if (this->data_source_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_source_id().data(), static_cast<int>(this->data_source_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.datatransfer.v1.TransferConfig.data_source_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->data_source_id(), output);
  }

  // string schedule = 7;
  if (this->schedule().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->schedule().data(), static_cast<int>(this->schedule().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.datatransfer.v1.TransferConfig.schedule");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->schedule(), output);
  }

  // .google.protobuf.Timestamp next_run_time = 8;
  if (this->has_next_run_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_next_run_time(), output);
  }

  // .google.protobuf.Struct params = 9;
  if (this->has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_params(), output);
  }

  // .google.cloud.bigquery.datatransfer.v1.TransferState state = 10;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->state(), output);
  }

  // int64 user_id = 11;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->user_id(), output);
  }

  // int32 data_refresh_window_days = 12;
  if (this->data_refresh_window_days() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->data_refresh_window_days(), output);
  }

  // bool disabled = 13;
  if (this->disabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->disabled(), output);
  }

  // string dataset_region = 14;
  if (this->dataset_region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_region().data(), static_cast<int>(this->dataset_region().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.datatransfer.v1.TransferConfig.dataset_region");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->dataset_region(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.datatransfer.v1.TransferConfig)
}

::google::protobuf::uint8* TransferConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.datatransfer.v1.TransferConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.datatransfer.v1.TransferConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string destination_dataset_id = 2;
  if (this->destination_dataset_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination_dataset_id().data(), static_cast<int>(this->destination_dataset_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.datatransfer.v1.TransferConfig.destination_dataset_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->destination_dataset_id(), target);
  }

  // string display_name = 3;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.datatransfer.v1.TransferConfig.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->display_name(), target);
  }

  // .google.protobuf.Timestamp update_time = 4;
  if (this->has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_update_time(), deterministic, target);
  }

  // string data_source_id = 5;
  if (this->data_source_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_source_id().data(), static_cast<int>(this->data_source_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.datatransfer.v1.TransferConfig.data_source_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->data_source_id(), target);
  }

  // string schedule = 7;
  if (this->schedule().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->schedule().data(), static_cast<int>(this->schedule().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.datatransfer.v1.TransferConfig.schedule");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->schedule(), target);
  }

  // .google.protobuf.Timestamp next_run_time = 8;
  if (this->has_next_run_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_next_run_time(), deterministic, target);
  }

  // .google.protobuf.Struct params = 9;
  if (this->has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_params(), deterministic, target);
  }

  // .google.cloud.bigquery.datatransfer.v1.TransferState state = 10;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->state(), target);
  }

  // int64 user_id = 11;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->user_id(), target);
  }

  // int32 data_refresh_window_days = 12;
  if (this->data_refresh_window_days() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->data_refresh_window_days(), target);
  }

  // bool disabled = 13;
  if (this->disabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->disabled(), target);
  }

  // string dataset_region = 14;
  if (this->dataset_region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_region().data(), static_cast<int>(this->dataset_region().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.datatransfer.v1.TransferConfig.dataset_region");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->dataset_region(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.datatransfer.v1.TransferConfig)
  return target;
}

size_t TransferConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.datatransfer.v1.TransferConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string destination_dataset_id = 2;
  if (this->destination_dataset_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destination_dataset_id());
  }

  // string display_name = 3;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // string data_source_id = 5;
  if (this->data_source_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data_source_id());
  }

  // string schedule = 7;
  if (this->schedule().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->schedule());
  }

  // string dataset_region = 14;
  if (this->dataset_region().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dataset_region());
  }

  // .google.protobuf.Timestamp update_time = 4;
  if (this->has_update_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *update_time_);
  }

  // .google.protobuf.Timestamp next_run_time = 8;
  if (this->has_next_run_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *next_run_time_);
  }

  // .google.protobuf.Struct params = 9;
  if (this->has_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *params_);
  }

  // int64 user_id = 11;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_id());
  }

  // .google.cloud.bigquery.datatransfer.v1.TransferState state = 10;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // int32 data_refresh_window_days = 12;
  if (this->data_refresh_window_days() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->data_refresh_window_days());
  }

  // bool disabled = 13;
  if (this->disabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.datatransfer.v1.TransferConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.datatransfer.v1.TransferConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.datatransfer.v1.TransferConfig)
    MergeFrom(*source);
  }
}

void TransferConfig::MergeFrom(const TransferConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.datatransfer.v1.TransferConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.destination_dataset_id().size() > 0) {

    destination_dataset_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_dataset_id_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.data_source_id().size() > 0) {

    data_source_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_source_id_);
  }
  if (from.schedule().size() > 0) {

    schedule_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schedule_);
  }
  if (from.dataset_region().size() > 0) {

    dataset_region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataset_region_);
  }
  if (from.has_update_time()) {
    mutable_update_time()->::google::protobuf::Timestamp::MergeFrom(from.update_time());
  }
  if (from.has_next_run_time()) {
    mutable_next_run_time()->::google::protobuf::Timestamp::MergeFrom(from.next_run_time());
  }
  if (from.has_params()) {
    mutable_params()->::google::protobuf::Struct::MergeFrom(from.params());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.data_refresh_window_days() != 0) {
    set_data_refresh_window_days(from.data_refresh_window_days());
  }
  if (from.disabled() != 0) {
    set_disabled(from.disabled());
  }
}

void TransferConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.datatransfer.v1.TransferConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferConfig::CopyFrom(const TransferConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.datatransfer.v1.TransferConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferConfig::IsInitialized() const {
  return true;
}

void TransferConfig::Swap(TransferConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferConfig::InternalSwap(TransferConfig* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  destination_dataset_id_.Swap(&other->destination_dataset_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  display_name_.Swap(&other->display_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_source_id_.Swap(&other->data_source_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  schedule_.Swap(&other->schedule_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dataset_region_.Swap(&other->dataset_region_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(update_time_, other->update_time_);
  swap(next_run_time_, other->next_run_time_);
  swap(params_, other->params_);
  swap(user_id_, other->user_id_);
  swap(state_, other->state_);
  swap(data_refresh_window_days_, other->data_refresh_window_days_);
  swap(disabled_, other->disabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TransferConfig::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TransferRun::InitAsDefaultInstance() {
  ::google::cloud::bigquery::datatransfer::v1::_TransferRun_default_instance_._instance.get_mutable()->schedule_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::cloud::bigquery::datatransfer::v1::_TransferRun_default_instance_._instance.get_mutable()->run_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::cloud::bigquery::datatransfer::v1::_TransferRun_default_instance_._instance.get_mutable()->error_status_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
  ::google::cloud::bigquery::datatransfer::v1::_TransferRun_default_instance_._instance.get_mutable()->start_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::cloud::bigquery::datatransfer::v1::_TransferRun_default_instance_._instance.get_mutable()->end_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::cloud::bigquery::datatransfer::v1::_TransferRun_default_instance_._instance.get_mutable()->update_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::cloud::bigquery::datatransfer::v1::_TransferRun_default_instance_._instance.get_mutable()->params_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
}
void TransferRun::clear_schedule_time() {
  if (GetArenaNoVirtual() == NULL && schedule_time_ != NULL) {
    delete schedule_time_;
  }
  schedule_time_ = NULL;
}
void TransferRun::clear_run_time() {
  if (GetArenaNoVirtual() == NULL && run_time_ != NULL) {
    delete run_time_;
  }
  run_time_ = NULL;
}
void TransferRun::clear_error_status() {
  if (GetArenaNoVirtual() == NULL && error_status_ != NULL) {
    delete error_status_;
  }
  error_status_ = NULL;
}
void TransferRun::clear_start_time() {
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
}
void TransferRun::clear_end_time() {
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) {
    delete end_time_;
  }
  end_time_ = NULL;
}
void TransferRun::clear_update_time() {
  if (GetArenaNoVirtual() == NULL && update_time_ != NULL) {
    delete update_time_;
  }
  update_time_ = NULL;
}
void TransferRun::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) {
    delete params_;
  }
  params_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferRun::kNameFieldNumber;
const int TransferRun::kScheduleTimeFieldNumber;
const int TransferRun::kRunTimeFieldNumber;
const int TransferRun::kErrorStatusFieldNumber;
const int TransferRun::kStartTimeFieldNumber;
const int TransferRun::kEndTimeFieldNumber;
const int TransferRun::kUpdateTimeFieldNumber;
const int TransferRun::kParamsFieldNumber;
const int TransferRun::kDestinationDatasetIdFieldNumber;
const int TransferRun::kDataSourceIdFieldNumber;
const int TransferRun::kStateFieldNumber;
const int TransferRun::kUserIdFieldNumber;
const int TransferRun::kScheduleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferRun::TransferRun()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto::scc_info_TransferRun.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.datatransfer.v1.TransferRun)
}
TransferRun::TransferRun(const TransferRun& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  destination_dataset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.destination_dataset_id().size() > 0) {
    destination_dataset_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_dataset_id_);
  }
  data_source_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data_source_id().size() > 0) {
    data_source_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_source_id_);
  }
  schedule_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.schedule().size() > 0) {
    schedule_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schedule_);
  }
  if (from.has_schedule_time()) {
    schedule_time_ = new ::google::protobuf::Timestamp(*from.schedule_time_);
  } else {
    schedule_time_ = NULL;
  }
  if (from.has_start_time()) {
    start_time_ = new ::google::protobuf::Timestamp(*from.start_time_);
  } else {
    start_time_ = NULL;
  }
  if (from.has_end_time()) {
    end_time_ = new ::google::protobuf::Timestamp(*from.end_time_);
  } else {
    end_time_ = NULL;
  }
  if (from.has_update_time()) {
    update_time_ = new ::google::protobuf::Timestamp(*from.update_time_);
  } else {
    update_time_ = NULL;
  }
  if (from.has_params()) {
    params_ = new ::google::protobuf::Struct(*from.params_);
  } else {
    params_ = NULL;
  }
  if (from.has_run_time()) {
    run_time_ = new ::google::protobuf::Timestamp(*from.run_time_);
  } else {
    run_time_ = NULL;
  }
  if (from.has_error_status()) {
    error_status_ = new ::google::rpc::Status(*from.error_status_);
  } else {
    error_status_ = NULL;
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.datatransfer.v1.TransferRun)
}

void TransferRun::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_dataset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_source_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schedule_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&schedule_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&schedule_time_)) + sizeof(state_));
}

TransferRun::~TransferRun() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.datatransfer.v1.TransferRun)
  SharedDtor();
}

void TransferRun::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_dataset_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_source_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schedule_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete schedule_time_;
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
  if (this != internal_default_instance()) delete update_time_;
  if (this != internal_default_instance()) delete params_;
  if (this != internal_default_instance()) delete run_time_;
  if (this != internal_default_instance()) delete error_status_;
}

void TransferRun::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TransferRun::descriptor() {
  ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransferRun& TransferRun::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto::scc_info_TransferRun.base);
  return *internal_default_instance();
}


void TransferRun::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.datatransfer.v1.TransferRun)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_dataset_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_source_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schedule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && schedule_time_ != NULL) {
    delete schedule_time_;
  }
  schedule_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) {
    delete end_time_;
  }
  end_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_time_ != NULL) {
    delete update_time_;
  }
  update_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && params_ != NULL) {
    delete params_;
  }
  params_ = NULL;
  if (GetArenaNoVirtual() == NULL && run_time_ != NULL) {
    delete run_time_;
  }
  run_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_status_ != NULL) {
    delete error_status_;
  }
  error_status_ = NULL;
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

bool TransferRun::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.datatransfer.v1.TransferRun)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.datatransfer.v1.TransferRun.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string destination_dataset_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination_dataset_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destination_dataset_id().data(), static_cast<int>(this->destination_dataset_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.datatransfer.v1.TransferRun.destination_dataset_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp schedule_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_schedule_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp start_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp end_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp update_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data_source_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_source_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data_source_id().data(), static_cast<int>(this->data_source_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.datatransfer.v1.TransferRun.data_source_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.datatransfer.v1.TransferState state = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::google::cloud::bigquery::datatransfer::v1::TransferState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct params = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp run_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_run_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 user_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string schedule = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schedule()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->schedule().data(), static_cast<int>(this->schedule().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.datatransfer.v1.TransferRun.schedule"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.rpc.Status error_status = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.datatransfer.v1.TransferRun)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.datatransfer.v1.TransferRun)
  return false;
#undef DO_
}

void TransferRun::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.datatransfer.v1.TransferRun)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.datatransfer.v1.TransferRun.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string destination_dataset_id = 2;
  if (this->destination_dataset_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination_dataset_id().data(), static_cast<int>(this->destination_dataset_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.datatransfer.v1.TransferRun.destination_dataset_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->destination_dataset_id(), output);
  }

  // .google.protobuf.Timestamp schedule_time = 3;
  if (this->has_schedule_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_schedule_time(), output);
  }

  // .google.protobuf.Timestamp start_time = 4;
  if (this->has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_start_time(), output);
  }

  // .google.protobuf.Timestamp end_time = 5;
  if (this->has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_end_time(), output);
  }

  // .google.protobuf.Timestamp update_time = 6;
  if (this->has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_update_time(), output);
  }

  // string data_source_id = 7;
  if (this->data_source_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_source_id().data(), static_cast<int>(this->data_source_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.datatransfer.v1.TransferRun.data_source_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->data_source_id(), output);
  }

  // .google.cloud.bigquery.datatransfer.v1.TransferState state = 8;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->state(), output);
  }

  // .google.protobuf.Struct params = 9;
  if (this->has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_params(), output);
  }

  // .google.protobuf.Timestamp run_time = 10;
  if (this->has_run_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_run_time(), output);
  }

  // int64 user_id = 11;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->user_id(), output);
  }

  // string schedule = 12;
  if (this->schedule().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->schedule().data(), static_cast<int>(this->schedule().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.datatransfer.v1.TransferRun.schedule");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->schedule(), output);
  }

  // .google.rpc.Status error_status = 21;
  if (this->has_error_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_internal_error_status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.datatransfer.v1.TransferRun)
}

::google::protobuf::uint8* TransferRun::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.datatransfer.v1.TransferRun)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.datatransfer.v1.TransferRun.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string destination_dataset_id = 2;
  if (this->destination_dataset_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination_dataset_id().data(), static_cast<int>(this->destination_dataset_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.datatransfer.v1.TransferRun.destination_dataset_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->destination_dataset_id(), target);
  }

  // .google.protobuf.Timestamp schedule_time = 3;
  if (this->has_schedule_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_schedule_time(), deterministic, target);
  }

  // .google.protobuf.Timestamp start_time = 4;
  if (this->has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_start_time(), deterministic, target);
  }

  // .google.protobuf.Timestamp end_time = 5;
  if (this->has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_end_time(), deterministic, target);
  }

  // .google.protobuf.Timestamp update_time = 6;
  if (this->has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_update_time(), deterministic, target);
  }

  // string data_source_id = 7;
  if (this->data_source_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_source_id().data(), static_cast<int>(this->data_source_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.datatransfer.v1.TransferRun.data_source_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->data_source_id(), target);
  }

  // .google.cloud.bigquery.datatransfer.v1.TransferState state = 8;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->state(), target);
  }

  // .google.protobuf.Struct params = 9;
  if (this->has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_params(), deterministic, target);
  }

  // .google.protobuf.Timestamp run_time = 10;
  if (this->has_run_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_run_time(), deterministic, target);
  }

  // int64 user_id = 11;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->user_id(), target);
  }

  // string schedule = 12;
  if (this->schedule().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->schedule().data(), static_cast<int>(this->schedule().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.datatransfer.v1.TransferRun.schedule");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->schedule(), target);
  }

  // .google.rpc.Status error_status = 21;
  if (this->has_error_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->_internal_error_status(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.datatransfer.v1.TransferRun)
  return target;
}

size_t TransferRun::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.datatransfer.v1.TransferRun)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string destination_dataset_id = 2;
  if (this->destination_dataset_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destination_dataset_id());
  }

  // string data_source_id = 7;
  if (this->data_source_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data_source_id());
  }

  // string schedule = 12;
  if (this->schedule().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->schedule());
  }

  // .google.protobuf.Timestamp schedule_time = 3;
  if (this->has_schedule_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *schedule_time_);
  }

  // .google.protobuf.Timestamp start_time = 4;
  if (this->has_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp end_time = 5;
  if (this->has_end_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  // .google.protobuf.Timestamp update_time = 6;
  if (this->has_update_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *update_time_);
  }

  // .google.protobuf.Struct params = 9;
  if (this->has_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *params_);
  }

  // .google.protobuf.Timestamp run_time = 10;
  if (this->has_run_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *run_time_);
  }

  // .google.rpc.Status error_status = 21;
  if (this->has_error_status()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_status_);
  }

  // int64 user_id = 11;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_id());
  }

  // .google.cloud.bigquery.datatransfer.v1.TransferState state = 8;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferRun::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.datatransfer.v1.TransferRun)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferRun* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferRun>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.datatransfer.v1.TransferRun)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.datatransfer.v1.TransferRun)
    MergeFrom(*source);
  }
}

void TransferRun::MergeFrom(const TransferRun& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.datatransfer.v1.TransferRun)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.destination_dataset_id().size() > 0) {

    destination_dataset_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_dataset_id_);
  }
  if (from.data_source_id().size() > 0) {

    data_source_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_source_id_);
  }
  if (from.schedule().size() > 0) {

    schedule_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schedule_);
  }
  if (from.has_schedule_time()) {
    mutable_schedule_time()->::google::protobuf::Timestamp::MergeFrom(from.schedule_time());
  }
  if (from.has_start_time()) {
    mutable_start_time()->::google::protobuf::Timestamp::MergeFrom(from.start_time());
  }
  if (from.has_end_time()) {
    mutable_end_time()->::google::protobuf::Timestamp::MergeFrom(from.end_time());
  }
  if (from.has_update_time()) {
    mutable_update_time()->::google::protobuf::Timestamp::MergeFrom(from.update_time());
  }
  if (from.has_params()) {
    mutable_params()->::google::protobuf::Struct::MergeFrom(from.params());
  }
  if (from.has_run_time()) {
    mutable_run_time()->::google::protobuf::Timestamp::MergeFrom(from.run_time());
  }
  if (from.has_error_status()) {
    mutable_error_status()->::google::rpc::Status::MergeFrom(from.error_status());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void TransferRun::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.datatransfer.v1.TransferRun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferRun::CopyFrom(const TransferRun& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.datatransfer.v1.TransferRun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferRun::IsInitialized() const {
  return true;
}

void TransferRun::Swap(TransferRun* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferRun::InternalSwap(TransferRun* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  destination_dataset_id_.Swap(&other->destination_dataset_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_source_id_.Swap(&other->data_source_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  schedule_.Swap(&other->schedule_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(schedule_time_, other->schedule_time_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
  swap(update_time_, other->update_time_);
  swap(params_, other->params_);
  swap(run_time_, other->run_time_);
  swap(error_status_, other->error_status_);
  swap(user_id_, other->user_id_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TransferRun::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TransferMessage::InitAsDefaultInstance() {
  ::google::cloud::bigquery::datatransfer::v1::_TransferMessage_default_instance_._instance.get_mutable()->message_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void TransferMessage::clear_message_time() {
  if (GetArenaNoVirtual() == NULL && message_time_ != NULL) {
    delete message_time_;
  }
  message_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferMessage::kMessageTimeFieldNumber;
const int TransferMessage::kSeverityFieldNumber;
const int TransferMessage::kMessageTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferMessage::TransferMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto::scc_info_TransferMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.datatransfer.v1.TransferMessage)
}
TransferMessage::TransferMessage(const TransferMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message_text().size() > 0) {
    message_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_text_);
  }
  if (from.has_message_time()) {
    message_time_ = new ::google::protobuf::Timestamp(*from.message_time_);
  } else {
    message_time_ = NULL;
  }
  severity_ = from.severity_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.datatransfer.v1.TransferMessage)
}

void TransferMessage::SharedCtor() {
  message_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&message_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&severity_) -
      reinterpret_cast<char*>(&message_time_)) + sizeof(severity_));
}

TransferMessage::~TransferMessage() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.datatransfer.v1.TransferMessage)
  SharedDtor();
}

void TransferMessage::SharedDtor() {
  message_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete message_time_;
}

void TransferMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TransferMessage::descriptor() {
  ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransferMessage& TransferMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto::scc_info_TransferMessage.base);
  return *internal_default_instance();
}


void TransferMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.datatransfer.v1.TransferMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && message_time_ != NULL) {
    delete message_time_;
  }
  message_time_ = NULL;
  severity_ = 0;
  _internal_metadata_.Clear();
}

bool TransferMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.datatransfer.v1.TransferMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Timestamp message_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_message_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.datatransfer.v1.TransferMessage.MessageSeverity severity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_severity(static_cast< ::google::cloud::bigquery::datatransfer::v1::TransferMessage_MessageSeverity >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message_text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message_text().data(), static_cast<int>(this->message_text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.datatransfer.v1.TransferMessage.message_text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.datatransfer.v1.TransferMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.datatransfer.v1.TransferMessage)
  return false;
#undef DO_
}

void TransferMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.datatransfer.v1.TransferMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp message_time = 1;
  if (this->has_message_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_message_time(), output);
  }

  // .google.cloud.bigquery.datatransfer.v1.TransferMessage.MessageSeverity severity = 2;
  if (this->severity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->severity(), output);
  }

  // string message_text = 3;
  if (this->message_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_text().data(), static_cast<int>(this->message_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.datatransfer.v1.TransferMessage.message_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message_text(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.datatransfer.v1.TransferMessage)
}

::google::protobuf::uint8* TransferMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.datatransfer.v1.TransferMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp message_time = 1;
  if (this->has_message_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_message_time(), deterministic, target);
  }

  // .google.cloud.bigquery.datatransfer.v1.TransferMessage.MessageSeverity severity = 2;
  if (this->severity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->severity(), target);
  }

  // string message_text = 3;
  if (this->message_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_text().data(), static_cast<int>(this->message_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.datatransfer.v1.TransferMessage.message_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message_text(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.datatransfer.v1.TransferMessage)
  return target;
}

size_t TransferMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.datatransfer.v1.TransferMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string message_text = 3;
  if (this->message_text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_text());
  }

  // .google.protobuf.Timestamp message_time = 1;
  if (this->has_message_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *message_time_);
  }

  // .google.cloud.bigquery.datatransfer.v1.TransferMessage.MessageSeverity severity = 2;
  if (this->severity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->severity());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.datatransfer.v1.TransferMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.datatransfer.v1.TransferMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.datatransfer.v1.TransferMessage)
    MergeFrom(*source);
  }
}

void TransferMessage::MergeFrom(const TransferMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.datatransfer.v1.TransferMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message_text().size() > 0) {

    message_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_text_);
  }
  if (from.has_message_time()) {
    mutable_message_time()->::google::protobuf::Timestamp::MergeFrom(from.message_time());
  }
  if (from.severity() != 0) {
    set_severity(from.severity());
  }
}

void TransferMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.datatransfer.v1.TransferMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferMessage::CopyFrom(const TransferMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.datatransfer.v1.TransferMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferMessage::IsInitialized() const {
  return true;
}

void TransferMessage::Swap(TransferMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferMessage::InternalSwap(TransferMessage* other) {
  using std::swap;
  message_text_.Swap(&other->message_text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(message_time_, other->message_time_);
  swap(severity_, other->severity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TransferMessage::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fbigquery_2fdatatransfer_2fv1_2ftransfer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace datatransfer
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::bigquery::datatransfer::v1::TransferConfig* Arena::CreateMaybeMessage< ::google::cloud::bigquery::datatransfer::v1::TransferConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::bigquery::datatransfer::v1::TransferConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::bigquery::datatransfer::v1::TransferRun* Arena::CreateMaybeMessage< ::google::cloud::bigquery::datatransfer::v1::TransferRun >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::bigquery::datatransfer::v1::TransferRun >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::bigquery::datatransfer::v1::TransferMessage* Arena::CreateMaybeMessage< ::google::cloud::bigquery::datatransfer::v1::TransferMessage >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::bigquery::datatransfer::v1::TransferMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
