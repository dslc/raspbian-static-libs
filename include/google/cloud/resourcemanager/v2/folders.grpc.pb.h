// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/cloud/resourcemanager/v2/folders.proto
// Original file comments:
// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fcloud_2fresourcemanager_2fv2_2ffolders_2eproto__INCLUDED
#define GRPC_google_2fcloud_2fresourcemanager_2fv2_2ffolders_2eproto__INCLUDED

#include "google/cloud/resourcemanager/v2/folders.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace cloud {
namespace resourcemanager {
namespace v2 {

// Manages Cloud Resource Folders.
// Cloud Resource Folders can be used to organize the resources under an
// organization and to control the IAM policies applied to groups of resources.
class Folders final {
 public:
  static constexpr char const* service_full_name() {
    return "google.cloud.resourcemanager.v2.Folders";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists the Folders that are direct descendants of supplied parent resource.
    // List provides a strongly consistent view of the Folders underneath
    // the specified parent resource.
    // List returns Folders sorted based upon the (ascending) lexical ordering
    // of their display_name.
    // The caller must have `resourcemanager.folders.list` permission on the
    // identified parent.
    virtual ::grpc::Status ListFolders(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::ListFoldersRequest& request, ::google::cloud::resourcemanager::v2::ListFoldersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::ListFoldersResponse>> AsyncListFolders(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::ListFoldersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::ListFoldersResponse>>(AsyncListFoldersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::ListFoldersResponse>> PrepareAsyncListFolders(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::ListFoldersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::ListFoldersResponse>>(PrepareAsyncListFoldersRaw(context, request, cq));
    }
    // Search for folders that match specific filter criteria.
    // Search provides an eventually consistent view of the folders a user has
    // access to which meet the specified filter criteria.
    //
    // This will only return folders on which the caller has the
    // permission `resourcemanager.folders.get`.
    virtual ::grpc::Status SearchFolders(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::SearchFoldersRequest& request, ::google::cloud::resourcemanager::v2::SearchFoldersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::SearchFoldersResponse>> AsyncSearchFolders(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::SearchFoldersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::SearchFoldersResponse>>(AsyncSearchFoldersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::SearchFoldersResponse>> PrepareAsyncSearchFolders(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::SearchFoldersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::SearchFoldersResponse>>(PrepareAsyncSearchFoldersRaw(context, request, cq));
    }
    // Retrieves a Folder identified by the supplied resource name.
    // Valid Folder resource names have the format `folders/{folder_id}`
    // (for example, `folders/1234`).
    // The caller must have `resourcemanager.folders.get` permission on the
    // identified folder.
    virtual ::grpc::Status GetFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::GetFolderRequest& request, ::google::cloud::resourcemanager::v2::Folder* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::Folder>> AsyncGetFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::GetFolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::Folder>>(AsyncGetFolderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::Folder>> PrepareAsyncGetFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::GetFolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::Folder>>(PrepareAsyncGetFolderRaw(context, request, cq));
    }
    // Creates a Folder in the resource hierarchy.
    // Returns an Operation which can be used to track the progress of the
    // folder creation workflow.
    // Upon success the Operation.response field will be populated with the
    // created Folder.
    //
    // In order to succeed, the addition of this new Folder must not violate
    // the Folder naming, height or fanout constraints.
    // + The Folder's display_name must be distinct from all other Folder's that
    // share its parent.
    // + The addition of the Folder must not cause the active Folder hierarchy
    // to exceed a height of 4. Note, the full active + deleted Folder hierarchy
    // is allowed to reach a height of 8; this provides additional headroom when
    // moving folders that contain deleted folders.
    // + The addition of the Folder must not cause the total number of Folders
    // under its parent to exceed 100.
    //
    // If the operation fails due to a folder constraint violation,
    // a PreconditionFailure explaining the violation will be returned.
    // If the failure occurs synchronously then the PreconditionFailure
    // will be returned via the Status.details field and if it occurs
    // asynchronously then the PreconditionFailure will be returned
    // via the the Operation.error field.
    //
    // The caller must have `resourcemanager.folders.create` permission on the
    // identified parent.
    virtual ::grpc::Status CreateFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::CreateFolderRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncCreateFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::CreateFolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncCreateFolderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncCreateFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::CreateFolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncCreateFolderRaw(context, request, cq));
    }
    // Updates a Folder, changing its display_name.
    // Changes to the folder display_name will be rejected if they violate either
    // the display_name formatting rules or naming constraints described in
    // the [CreateFolder] documentation.
    // + The Folder's display name must start and end with a letter or digit,
    // may contain letters, digits, spaces, hyphens and underscores and can be
    // no longer than 30 characters. This is captured by the regular expression:
    // [\p{L}\p{N}]({\p{L}\p{N}_- ]{0,28}[\p{L}\p{N}])?.
    // The caller must have `resourcemanager.folders.update` permission on the
    // identified folder.
    //
    // If the update fails due to the unique name constraint then a
    // PreconditionFailure explaining this violation will be returned
    // in the Status.details field.
    virtual ::grpc::Status UpdateFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::UpdateFolderRequest& request, ::google::cloud::resourcemanager::v2::Folder* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::Folder>> AsyncUpdateFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::UpdateFolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::Folder>>(AsyncUpdateFolderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::Folder>> PrepareAsyncUpdateFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::UpdateFolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::Folder>>(PrepareAsyncUpdateFolderRaw(context, request, cq));
    }
    // Moves a Folder under a new resource parent.
    // Returns an Operation which can be used to track the progress of the
    // folder move workflow.
    // Upon success the Operation.response field will be populated with the
    // moved Folder.
    // Upon failure, a FolderOperationError categorizing the failure cause will
    // be returned - if the failure occurs synchronously then the
    // FolderOperationError will be returned via the Status.details field
    // and if it occurs asynchronously then the FolderOperation will be returned
    // via the the Operation.error field.
    // In addition, the Operation.metadata field will be populated with a
    // FolderOperation message as an aid to stateless clients.
    // Folder moves will be rejected if they violate either the naming, height
    // or fanout constraints described in the [CreateFolder] documentation.
    // The caller must have `resourcemanager.folders.move` permission on the
    // folder's current and proposed new parent.
    virtual ::grpc::Status MoveFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::MoveFolderRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncMoveFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::MoveFolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncMoveFolderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncMoveFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::MoveFolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncMoveFolderRaw(context, request, cq));
    }
    // Requests deletion of a Folder. The Folder is moved into the
    // [DELETE_REQUESTED] state immediately, and is deleted approximately 30 days
    // later. This method may only be called on an empty Folder in the [ACTIVE]
    // state, where a Folder is empty if it doesn't contain any Folders or
    // Projects in the [ACTIVE] state.
    // The caller must have `resourcemanager.folders.delete` permission on the
    // identified folder.
    virtual ::grpc::Status DeleteFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::DeleteFolderRequest& request, ::google::cloud::resourcemanager::v2::Folder* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::Folder>> AsyncDeleteFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::DeleteFolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::Folder>>(AsyncDeleteFolderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::Folder>> PrepareAsyncDeleteFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::DeleteFolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::Folder>>(PrepareAsyncDeleteFolderRaw(context, request, cq));
    }
    // Cancels the deletion request for a Folder. This method may only be
    // called on a Folder in the [DELETE_REQUESTED] state.
    // In order to succeed, the Folder's parent must be in the [ACTIVE] state.
    // In addition, reintroducing the folder into the tree must not violate
    // folder naming, height and fanout constraints described in the
    // [CreateFolder] documentation.
    // The caller must have `resourcemanager.folders.undelete` permission on the
    // identified folder.
    virtual ::grpc::Status UndeleteFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::UndeleteFolderRequest& request, ::google::cloud::resourcemanager::v2::Folder* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::Folder>> AsyncUndeleteFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::UndeleteFolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::Folder>>(AsyncUndeleteFolderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::Folder>> PrepareAsyncUndeleteFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::UndeleteFolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::Folder>>(PrepareAsyncUndeleteFolderRaw(context, request, cq));
    }
    // Gets the access control policy for a Folder. The returned policy may be
    // empty if no such policy or resource exists. The `resource` field should
    // be the Folder's resource name, e.g. "folders/1234".
    // The caller must have `resourcemanager.folders.getIamPolicy` permission
    // on the identified folder.
    virtual ::grpc::Status GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::google::iam::v1::Policy* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> AsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(AsyncGetIamPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> PrepareAsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(PrepareAsyncGetIamPolicyRaw(context, request, cq));
    }
    // Sets the access control policy on a Folder, replacing any existing policy.
    // The `resource` field should be the Folder's resource name, e.g.
    // "folders/1234".
    // The caller must have `resourcemanager.folders.setIamPolicy` permission
    // on the identified folder.
    virtual ::grpc::Status SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::google::iam::v1::Policy* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> AsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(AsyncSetIamPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> PrepareAsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(PrepareAsyncSetIamPolicyRaw(context, request, cq));
    }
    // Returns permissions that a caller has on the specified Folder.
    // The `resource` field should be the Folder's resource name,
    // e.g. "folders/1234".
    //
    // There are no permissions required for making this API call.
    virtual ::grpc::Status TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::google::iam::v1::TestIamPermissionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>> AsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>>(AsyncTestIamPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>> PrepareAsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>>(PrepareAsyncTestIamPermissionsRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::ListFoldersResponse>* AsyncListFoldersRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::ListFoldersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::ListFoldersResponse>* PrepareAsyncListFoldersRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::ListFoldersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::SearchFoldersResponse>* AsyncSearchFoldersRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::SearchFoldersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::SearchFoldersResponse>* PrepareAsyncSearchFoldersRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::SearchFoldersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::Folder>* AsyncGetFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::GetFolderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::Folder>* PrepareAsyncGetFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::GetFolderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncCreateFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::CreateFolderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncCreateFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::CreateFolderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::Folder>* AsyncUpdateFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::UpdateFolderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::Folder>* PrepareAsyncUpdateFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::UpdateFolderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncMoveFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::MoveFolderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncMoveFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::MoveFolderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::Folder>* AsyncDeleteFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::DeleteFolderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::Folder>* PrepareAsyncDeleteFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::DeleteFolderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::Folder>* AsyncUndeleteFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::UndeleteFolderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::resourcemanager::v2::Folder>* PrepareAsyncUndeleteFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::UndeleteFolderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* AsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* PrepareAsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* AsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* PrepareAsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>* AsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>* PrepareAsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListFolders(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::ListFoldersRequest& request, ::google::cloud::resourcemanager::v2::ListFoldersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::ListFoldersResponse>> AsyncListFolders(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::ListFoldersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::ListFoldersResponse>>(AsyncListFoldersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::ListFoldersResponse>> PrepareAsyncListFolders(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::ListFoldersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::ListFoldersResponse>>(PrepareAsyncListFoldersRaw(context, request, cq));
    }
    ::grpc::Status SearchFolders(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::SearchFoldersRequest& request, ::google::cloud::resourcemanager::v2::SearchFoldersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::SearchFoldersResponse>> AsyncSearchFolders(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::SearchFoldersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::SearchFoldersResponse>>(AsyncSearchFoldersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::SearchFoldersResponse>> PrepareAsyncSearchFolders(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::SearchFoldersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::SearchFoldersResponse>>(PrepareAsyncSearchFoldersRaw(context, request, cq));
    }
    ::grpc::Status GetFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::GetFolderRequest& request, ::google::cloud::resourcemanager::v2::Folder* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>> AsyncGetFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::GetFolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>>(AsyncGetFolderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>> PrepareAsyncGetFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::GetFolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>>(PrepareAsyncGetFolderRaw(context, request, cq));
    }
    ::grpc::Status CreateFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::CreateFolderRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncCreateFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::CreateFolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncCreateFolderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncCreateFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::CreateFolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncCreateFolderRaw(context, request, cq));
    }
    ::grpc::Status UpdateFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::UpdateFolderRequest& request, ::google::cloud::resourcemanager::v2::Folder* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>> AsyncUpdateFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::UpdateFolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>>(AsyncUpdateFolderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>> PrepareAsyncUpdateFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::UpdateFolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>>(PrepareAsyncUpdateFolderRaw(context, request, cq));
    }
    ::grpc::Status MoveFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::MoveFolderRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncMoveFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::MoveFolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncMoveFolderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncMoveFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::MoveFolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncMoveFolderRaw(context, request, cq));
    }
    ::grpc::Status DeleteFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::DeleteFolderRequest& request, ::google::cloud::resourcemanager::v2::Folder* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>> AsyncDeleteFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::DeleteFolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>>(AsyncDeleteFolderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>> PrepareAsyncDeleteFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::DeleteFolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>>(PrepareAsyncDeleteFolderRaw(context, request, cq));
    }
    ::grpc::Status UndeleteFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::UndeleteFolderRequest& request, ::google::cloud::resourcemanager::v2::Folder* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>> AsyncUndeleteFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::UndeleteFolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>>(AsyncUndeleteFolderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>> PrepareAsyncUndeleteFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::UndeleteFolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>>(PrepareAsyncUndeleteFolderRaw(context, request, cq));
    }
    ::grpc::Status GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::google::iam::v1::Policy* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> AsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(AsyncGetIamPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> PrepareAsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(PrepareAsyncGetIamPolicyRaw(context, request, cq));
    }
    ::grpc::Status SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::google::iam::v1::Policy* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> AsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(AsyncSetIamPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> PrepareAsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(PrepareAsyncSetIamPolicyRaw(context, request, cq));
    }
    ::grpc::Status TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::google::iam::v1::TestIamPermissionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>> AsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>>(AsyncTestIamPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>> PrepareAsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>>(PrepareAsyncTestIamPermissionsRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::ListFoldersResponse>* AsyncListFoldersRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::ListFoldersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::ListFoldersResponse>* PrepareAsyncListFoldersRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::ListFoldersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::SearchFoldersResponse>* AsyncSearchFoldersRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::SearchFoldersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::SearchFoldersResponse>* PrepareAsyncSearchFoldersRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::SearchFoldersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>* AsyncGetFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::GetFolderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>* PrepareAsyncGetFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::GetFolderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncCreateFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::CreateFolderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncCreateFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::CreateFolderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>* AsyncUpdateFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::UpdateFolderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>* PrepareAsyncUpdateFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::UpdateFolderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncMoveFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::MoveFolderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncMoveFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::MoveFolderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>* AsyncDeleteFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::DeleteFolderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>* PrepareAsyncDeleteFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::DeleteFolderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>* AsyncUndeleteFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::UndeleteFolderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>* PrepareAsyncUndeleteFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::UndeleteFolderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* AsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* PrepareAsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* AsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* PrepareAsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* AsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* PrepareAsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListFolders_;
    const ::grpc::internal::RpcMethod rpcmethod_SearchFolders_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFolder_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateFolder_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateFolder_;
    const ::grpc::internal::RpcMethod rpcmethod_MoveFolder_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteFolder_;
    const ::grpc::internal::RpcMethod rpcmethod_UndeleteFolder_;
    const ::grpc::internal::RpcMethod rpcmethod_GetIamPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_SetIamPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_TestIamPermissions_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists the Folders that are direct descendants of supplied parent resource.
    // List provides a strongly consistent view of the Folders underneath
    // the specified parent resource.
    // List returns Folders sorted based upon the (ascending) lexical ordering
    // of their display_name.
    // The caller must have `resourcemanager.folders.list` permission on the
    // identified parent.
    virtual ::grpc::Status ListFolders(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::ListFoldersRequest* request, ::google::cloud::resourcemanager::v2::ListFoldersResponse* response);
    // Search for folders that match specific filter criteria.
    // Search provides an eventually consistent view of the folders a user has
    // access to which meet the specified filter criteria.
    //
    // This will only return folders on which the caller has the
    // permission `resourcemanager.folders.get`.
    virtual ::grpc::Status SearchFolders(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::SearchFoldersRequest* request, ::google::cloud::resourcemanager::v2::SearchFoldersResponse* response);
    // Retrieves a Folder identified by the supplied resource name.
    // Valid Folder resource names have the format `folders/{folder_id}`
    // (for example, `folders/1234`).
    // The caller must have `resourcemanager.folders.get` permission on the
    // identified folder.
    virtual ::grpc::Status GetFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::GetFolderRequest* request, ::google::cloud::resourcemanager::v2::Folder* response);
    // Creates a Folder in the resource hierarchy.
    // Returns an Operation which can be used to track the progress of the
    // folder creation workflow.
    // Upon success the Operation.response field will be populated with the
    // created Folder.
    //
    // In order to succeed, the addition of this new Folder must not violate
    // the Folder naming, height or fanout constraints.
    // + The Folder's display_name must be distinct from all other Folder's that
    // share its parent.
    // + The addition of the Folder must not cause the active Folder hierarchy
    // to exceed a height of 4. Note, the full active + deleted Folder hierarchy
    // is allowed to reach a height of 8; this provides additional headroom when
    // moving folders that contain deleted folders.
    // + The addition of the Folder must not cause the total number of Folders
    // under its parent to exceed 100.
    //
    // If the operation fails due to a folder constraint violation,
    // a PreconditionFailure explaining the violation will be returned.
    // If the failure occurs synchronously then the PreconditionFailure
    // will be returned via the Status.details field and if it occurs
    // asynchronously then the PreconditionFailure will be returned
    // via the the Operation.error field.
    //
    // The caller must have `resourcemanager.folders.create` permission on the
    // identified parent.
    virtual ::grpc::Status CreateFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::CreateFolderRequest* request, ::google::longrunning::Operation* response);
    // Updates a Folder, changing its display_name.
    // Changes to the folder display_name will be rejected if they violate either
    // the display_name formatting rules or naming constraints described in
    // the [CreateFolder] documentation.
    // + The Folder's display name must start and end with a letter or digit,
    // may contain letters, digits, spaces, hyphens and underscores and can be
    // no longer than 30 characters. This is captured by the regular expression:
    // [\p{L}\p{N}]({\p{L}\p{N}_- ]{0,28}[\p{L}\p{N}])?.
    // The caller must have `resourcemanager.folders.update` permission on the
    // identified folder.
    //
    // If the update fails due to the unique name constraint then a
    // PreconditionFailure explaining this violation will be returned
    // in the Status.details field.
    virtual ::grpc::Status UpdateFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::UpdateFolderRequest* request, ::google::cloud::resourcemanager::v2::Folder* response);
    // Moves a Folder under a new resource parent.
    // Returns an Operation which can be used to track the progress of the
    // folder move workflow.
    // Upon success the Operation.response field will be populated with the
    // moved Folder.
    // Upon failure, a FolderOperationError categorizing the failure cause will
    // be returned - if the failure occurs synchronously then the
    // FolderOperationError will be returned via the Status.details field
    // and if it occurs asynchronously then the FolderOperation will be returned
    // via the the Operation.error field.
    // In addition, the Operation.metadata field will be populated with a
    // FolderOperation message as an aid to stateless clients.
    // Folder moves will be rejected if they violate either the naming, height
    // or fanout constraints described in the [CreateFolder] documentation.
    // The caller must have `resourcemanager.folders.move` permission on the
    // folder's current and proposed new parent.
    virtual ::grpc::Status MoveFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::MoveFolderRequest* request, ::google::longrunning::Operation* response);
    // Requests deletion of a Folder. The Folder is moved into the
    // [DELETE_REQUESTED] state immediately, and is deleted approximately 30 days
    // later. This method may only be called on an empty Folder in the [ACTIVE]
    // state, where a Folder is empty if it doesn't contain any Folders or
    // Projects in the [ACTIVE] state.
    // The caller must have `resourcemanager.folders.delete` permission on the
    // identified folder.
    virtual ::grpc::Status DeleteFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::DeleteFolderRequest* request, ::google::cloud::resourcemanager::v2::Folder* response);
    // Cancels the deletion request for a Folder. This method may only be
    // called on a Folder in the [DELETE_REQUESTED] state.
    // In order to succeed, the Folder's parent must be in the [ACTIVE] state.
    // In addition, reintroducing the folder into the tree must not violate
    // folder naming, height and fanout constraints described in the
    // [CreateFolder] documentation.
    // The caller must have `resourcemanager.folders.undelete` permission on the
    // identified folder.
    virtual ::grpc::Status UndeleteFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::UndeleteFolderRequest* request, ::google::cloud::resourcemanager::v2::Folder* response);
    // Gets the access control policy for a Folder. The returned policy may be
    // empty if no such policy or resource exists. The `resource` field should
    // be the Folder's resource name, e.g. "folders/1234".
    // The caller must have `resourcemanager.folders.getIamPolicy` permission
    // on the identified folder.
    virtual ::grpc::Status GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response);
    // Sets the access control policy on a Folder, replacing any existing policy.
    // The `resource` field should be the Folder's resource name, e.g.
    // "folders/1234".
    // The caller must have `resourcemanager.folders.setIamPolicy` permission
    // on the identified folder.
    virtual ::grpc::Status SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response);
    // Returns permissions that a caller has on the specified Folder.
    // The `resource` field should be the Folder's resource name,
    // e.g. "folders/1234".
    //
    // There are no permissions required for making this API call.
    virtual ::grpc::Status TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListFolders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListFolders() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListFolders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFolders(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::ListFoldersRequest* request, ::google::cloud::resourcemanager::v2::ListFoldersResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListFolders(::grpc::ServerContext* context, ::google::cloud::resourcemanager::v2::ListFoldersRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::resourcemanager::v2::ListFoldersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchFolders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SearchFolders() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SearchFolders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchFolders(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::SearchFoldersRequest* request, ::google::cloud::resourcemanager::v2::SearchFoldersResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchFolders(::grpc::ServerContext* context, ::google::cloud::resourcemanager::v2::SearchFoldersRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::resourcemanager::v2::SearchFoldersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetFolder() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::GetFolderRequest* request, ::google::cloud::resourcemanager::v2::Folder* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFolder(::grpc::ServerContext* context, ::google::cloud::resourcemanager::v2::GetFolderRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::resourcemanager::v2::Folder>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateFolder() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CreateFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::CreateFolderRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateFolder(::grpc::ServerContext* context, ::google::cloud::resourcemanager::v2::CreateFolderRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateFolder() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::UpdateFolderRequest* request, ::google::cloud::resourcemanager::v2::Folder* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateFolder(::grpc::ServerContext* context, ::google::cloud::resourcemanager::v2::UpdateFolderRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::resourcemanager::v2::Folder>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MoveFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_MoveFolder() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_MoveFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::MoveFolderRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveFolder(::grpc::ServerContext* context, ::google::cloud::resourcemanager::v2::MoveFolderRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteFolder() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_DeleteFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::DeleteFolderRequest* request, ::google::cloud::resourcemanager::v2::Folder* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteFolder(::grpc::ServerContext* context, ::google::cloud::resourcemanager::v2::DeleteFolderRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::resourcemanager::v2::Folder>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UndeleteFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UndeleteFolder() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_UndeleteFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UndeleteFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::UndeleteFolderRequest* request, ::google::cloud::resourcemanager::v2::Folder* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUndeleteFolder(::grpc::ServerContext* context, ::google::cloud::resourcemanager::v2::UndeleteFolderRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::resourcemanager::v2::Folder>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIamPolicy(::grpc::ServerContext* context, ::google::iam::v1::GetIamPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::v1::Policy>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetIamPolicy(::grpc::ServerContext* context, ::google::iam::v1::SetIamPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::v1::Policy>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestIamPermissions(::grpc::ServerContext* context, ::google::iam::v1::TestIamPermissionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::v1::TestIamPermissionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListFolders<WithAsyncMethod_SearchFolders<WithAsyncMethod_GetFolder<WithAsyncMethod_CreateFolder<WithAsyncMethod_UpdateFolder<WithAsyncMethod_MoveFolder<WithAsyncMethod_DeleteFolder<WithAsyncMethod_UndeleteFolder<WithAsyncMethod_GetIamPolicy<WithAsyncMethod_SetIamPolicy<WithAsyncMethod_TestIamPermissions<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ListFolders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListFolders() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListFolders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFolders(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::ListFoldersRequest* request, ::google::cloud::resourcemanager::v2::ListFoldersResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SearchFolders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SearchFolders() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SearchFolders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchFolders(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::SearchFoldersRequest* request, ::google::cloud::resourcemanager::v2::SearchFoldersResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetFolder() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::GetFolderRequest* request, ::google::cloud::resourcemanager::v2::Folder* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateFolder() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CreateFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::CreateFolderRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateFolder() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::UpdateFolderRequest* request, ::google::cloud::resourcemanager::v2::Folder* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MoveFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_MoveFolder() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_MoveFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::MoveFolderRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteFolder() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_DeleteFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::DeleteFolderRequest* request, ::google::cloud::resourcemanager::v2::Folder* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UndeleteFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UndeleteFolder() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_UndeleteFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UndeleteFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::UndeleteFolderRequest* request, ::google::cloud::resourcemanager::v2::Folder* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListFolders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListFolders() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::resourcemanager::v2::ListFoldersRequest, ::google::cloud::resourcemanager::v2::ListFoldersResponse>(std::bind(&WithStreamedUnaryMethod_ListFolders<BaseClass>::StreamedListFolders, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListFolders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListFolders(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::ListFoldersRequest* request, ::google::cloud::resourcemanager::v2::ListFoldersResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListFolders(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::resourcemanager::v2::ListFoldersRequest,::google::cloud::resourcemanager::v2::ListFoldersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SearchFolders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SearchFolders() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::resourcemanager::v2::SearchFoldersRequest, ::google::cloud::resourcemanager::v2::SearchFoldersResponse>(std::bind(&WithStreamedUnaryMethod_SearchFolders<BaseClass>::StreamedSearchFolders, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SearchFolders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SearchFolders(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::SearchFoldersRequest* request, ::google::cloud::resourcemanager::v2::SearchFoldersResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearchFolders(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::resourcemanager::v2::SearchFoldersRequest,::google::cloud::resourcemanager::v2::SearchFoldersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetFolder() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::resourcemanager::v2::GetFolderRequest, ::google::cloud::resourcemanager::v2::Folder>(std::bind(&WithStreamedUnaryMethod_GetFolder<BaseClass>::StreamedGetFolder, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::GetFolderRequest* request, ::google::cloud::resourcemanager::v2::Folder* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFolder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::resourcemanager::v2::GetFolderRequest,::google::cloud::resourcemanager::v2::Folder>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateFolder() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::resourcemanager::v2::CreateFolderRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_CreateFolder<BaseClass>::StreamedCreateFolder, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::CreateFolderRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateFolder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::resourcemanager::v2::CreateFolderRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateFolder() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::resourcemanager::v2::UpdateFolderRequest, ::google::cloud::resourcemanager::v2::Folder>(std::bind(&WithStreamedUnaryMethod_UpdateFolder<BaseClass>::StreamedUpdateFolder, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::UpdateFolderRequest* request, ::google::cloud::resourcemanager::v2::Folder* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateFolder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::resourcemanager::v2::UpdateFolderRequest,::google::cloud::resourcemanager::v2::Folder>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MoveFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_MoveFolder() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::resourcemanager::v2::MoveFolderRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_MoveFolder<BaseClass>::StreamedMoveFolder, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_MoveFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MoveFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::MoveFolderRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMoveFolder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::resourcemanager::v2::MoveFolderRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteFolder() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::resourcemanager::v2::DeleteFolderRequest, ::google::cloud::resourcemanager::v2::Folder>(std::bind(&WithStreamedUnaryMethod_DeleteFolder<BaseClass>::StreamedDeleteFolder, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::DeleteFolderRequest* request, ::google::cloud::resourcemanager::v2::Folder* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteFolder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::resourcemanager::v2::DeleteFolderRequest,::google::cloud::resourcemanager::v2::Folder>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UndeleteFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UndeleteFolder() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::resourcemanager::v2::UndeleteFolderRequest, ::google::cloud::resourcemanager::v2::Folder>(std::bind(&WithStreamedUnaryMethod_UndeleteFolder<BaseClass>::StreamedUndeleteFolder, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UndeleteFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UndeleteFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::UndeleteFolderRequest* request, ::google::cloud::resourcemanager::v2::Folder* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUndeleteFolder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::resourcemanager::v2::UndeleteFolderRequest,::google::cloud::resourcemanager::v2::Folder>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::v1::GetIamPolicyRequest, ::google::iam::v1::Policy>(std::bind(&WithStreamedUnaryMethod_GetIamPolicy<BaseClass>::StreamedGetIamPolicy, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetIamPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v1::GetIamPolicyRequest,::google::iam::v1::Policy>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::v1::SetIamPolicyRequest, ::google::iam::v1::Policy>(std::bind(&WithStreamedUnaryMethod_SetIamPolicy<BaseClass>::StreamedSetIamPolicy, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetIamPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v1::SetIamPolicyRequest,::google::iam::v1::Policy>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse>(std::bind(&WithStreamedUnaryMethod_TestIamPermissions<BaseClass>::StreamedTestIamPermissions, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTestIamPermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v1::TestIamPermissionsRequest,::google::iam::v1::TestIamPermissionsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListFolders<WithStreamedUnaryMethod_SearchFolders<WithStreamedUnaryMethod_GetFolder<WithStreamedUnaryMethod_CreateFolder<WithStreamedUnaryMethod_UpdateFolder<WithStreamedUnaryMethod_MoveFolder<WithStreamedUnaryMethod_DeleteFolder<WithStreamedUnaryMethod_UndeleteFolder<WithStreamedUnaryMethod_GetIamPolicy<WithStreamedUnaryMethod_SetIamPolicy<WithStreamedUnaryMethod_TestIamPermissions<Service > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListFolders<WithStreamedUnaryMethod_SearchFolders<WithStreamedUnaryMethod_GetFolder<WithStreamedUnaryMethod_CreateFolder<WithStreamedUnaryMethod_UpdateFolder<WithStreamedUnaryMethod_MoveFolder<WithStreamedUnaryMethod_DeleteFolder<WithStreamedUnaryMethod_UndeleteFolder<WithStreamedUnaryMethod_GetIamPolicy<WithStreamedUnaryMethod_SetIamPolicy<WithStreamedUnaryMethod_TestIamPermissions<Service > > > > > > > > > > > StreamedService;
};

}  // namespace v2
}  // namespace resourcemanager
}  // namespace cloud
}  // namespace google


#endif  // GRPC_google_2fcloud_2fresourcemanager_2fv2_2ffolders_2eproto__INCLUDED
