// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/cloud/resourcemanager/v2/folders.proto

#include "google/cloud/resourcemanager/v2/folders.pb.h"
#include "google/cloud/resourcemanager/v2/folders.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace cloud {
namespace resourcemanager {
namespace v2 {

static const char* Folders_method_names[] = {
  "/google.cloud.resourcemanager.v2.Folders/ListFolders",
  "/google.cloud.resourcemanager.v2.Folders/SearchFolders",
  "/google.cloud.resourcemanager.v2.Folders/GetFolder",
  "/google.cloud.resourcemanager.v2.Folders/CreateFolder",
  "/google.cloud.resourcemanager.v2.Folders/UpdateFolder",
  "/google.cloud.resourcemanager.v2.Folders/MoveFolder",
  "/google.cloud.resourcemanager.v2.Folders/DeleteFolder",
  "/google.cloud.resourcemanager.v2.Folders/UndeleteFolder",
  "/google.cloud.resourcemanager.v2.Folders/GetIamPolicy",
  "/google.cloud.resourcemanager.v2.Folders/SetIamPolicy",
  "/google.cloud.resourcemanager.v2.Folders/TestIamPermissions",
};

std::unique_ptr< Folders::Stub> Folders::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Folders::Stub> stub(new Folders::Stub(channel));
  return stub;
}

Folders::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListFolders_(Folders_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SearchFolders_(Folders_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFolder_(Folders_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateFolder_(Folders_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateFolder_(Folders_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveFolder_(Folders_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteFolder_(Folders_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UndeleteFolder_(Folders_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIamPolicy_(Folders_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetIamPolicy_(Folders_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TestIamPermissions_(Folders_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Folders::Stub::ListFolders(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::ListFoldersRequest& request, ::google::cloud::resourcemanager::v2::ListFoldersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListFolders_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::ListFoldersResponse>* Folders::Stub::AsyncListFoldersRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::ListFoldersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::resourcemanager::v2::ListFoldersResponse>::Create(channel_.get(), cq, rpcmethod_ListFolders_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::ListFoldersResponse>* Folders::Stub::PrepareAsyncListFoldersRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::ListFoldersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::resourcemanager::v2::ListFoldersResponse>::Create(channel_.get(), cq, rpcmethod_ListFolders_, context, request, false);
}

::grpc::Status Folders::Stub::SearchFolders(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::SearchFoldersRequest& request, ::google::cloud::resourcemanager::v2::SearchFoldersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SearchFolders_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::SearchFoldersResponse>* Folders::Stub::AsyncSearchFoldersRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::SearchFoldersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::resourcemanager::v2::SearchFoldersResponse>::Create(channel_.get(), cq, rpcmethod_SearchFolders_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::SearchFoldersResponse>* Folders::Stub::PrepareAsyncSearchFoldersRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::SearchFoldersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::resourcemanager::v2::SearchFoldersResponse>::Create(channel_.get(), cq, rpcmethod_SearchFolders_, context, request, false);
}

::grpc::Status Folders::Stub::GetFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::GetFolderRequest& request, ::google::cloud::resourcemanager::v2::Folder* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetFolder_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>* Folders::Stub::AsyncGetFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::GetFolderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::resourcemanager::v2::Folder>::Create(channel_.get(), cq, rpcmethod_GetFolder_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>* Folders::Stub::PrepareAsyncGetFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::GetFolderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::resourcemanager::v2::Folder>::Create(channel_.get(), cq, rpcmethod_GetFolder_, context, request, false);
}

::grpc::Status Folders::Stub::CreateFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::CreateFolderRequest& request, ::google::longrunning::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateFolder_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* Folders::Stub::AsyncCreateFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::CreateFolderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_CreateFolder_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* Folders::Stub::PrepareAsyncCreateFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::CreateFolderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_CreateFolder_, context, request, false);
}

::grpc::Status Folders::Stub::UpdateFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::UpdateFolderRequest& request, ::google::cloud::resourcemanager::v2::Folder* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateFolder_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>* Folders::Stub::AsyncUpdateFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::UpdateFolderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::resourcemanager::v2::Folder>::Create(channel_.get(), cq, rpcmethod_UpdateFolder_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>* Folders::Stub::PrepareAsyncUpdateFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::UpdateFolderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::resourcemanager::v2::Folder>::Create(channel_.get(), cq, rpcmethod_UpdateFolder_, context, request, false);
}

::grpc::Status Folders::Stub::MoveFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::MoveFolderRequest& request, ::google::longrunning::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveFolder_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* Folders::Stub::AsyncMoveFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::MoveFolderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_MoveFolder_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* Folders::Stub::PrepareAsyncMoveFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::MoveFolderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_MoveFolder_, context, request, false);
}

::grpc::Status Folders::Stub::DeleteFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::DeleteFolderRequest& request, ::google::cloud::resourcemanager::v2::Folder* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteFolder_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>* Folders::Stub::AsyncDeleteFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::DeleteFolderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::resourcemanager::v2::Folder>::Create(channel_.get(), cq, rpcmethod_DeleteFolder_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>* Folders::Stub::PrepareAsyncDeleteFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::DeleteFolderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::resourcemanager::v2::Folder>::Create(channel_.get(), cq, rpcmethod_DeleteFolder_, context, request, false);
}

::grpc::Status Folders::Stub::UndeleteFolder(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::UndeleteFolderRequest& request, ::google::cloud::resourcemanager::v2::Folder* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UndeleteFolder_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>* Folders::Stub::AsyncUndeleteFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::UndeleteFolderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::resourcemanager::v2::Folder>::Create(channel_.get(), cq, rpcmethod_UndeleteFolder_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::resourcemanager::v2::Folder>* Folders::Stub::PrepareAsyncUndeleteFolderRaw(::grpc::ClientContext* context, const ::google::cloud::resourcemanager::v2::UndeleteFolderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::resourcemanager::v2::Folder>::Create(channel_.get(), cq, rpcmethod_UndeleteFolder_, context, request, false);
}

::grpc::Status Folders::Stub::GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::google::iam::v1::Policy* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetIamPolicy_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* Folders::Stub::AsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::Policy>::Create(channel_.get(), cq, rpcmethod_GetIamPolicy_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* Folders::Stub::PrepareAsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::Policy>::Create(channel_.get(), cq, rpcmethod_GetIamPolicy_, context, request, false);
}

::grpc::Status Folders::Stub::SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::google::iam::v1::Policy* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetIamPolicy_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* Folders::Stub::AsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::Policy>::Create(channel_.get(), cq, rpcmethod_SetIamPolicy_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* Folders::Stub::PrepareAsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::Policy>::Create(channel_.get(), cq, rpcmethod_SetIamPolicy_, context, request, false);
}

::grpc::Status Folders::Stub::TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::google::iam::v1::TestIamPermissionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TestIamPermissions_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* Folders::Stub::AsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::TestIamPermissionsResponse>::Create(channel_.get(), cq, rpcmethod_TestIamPermissions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* Folders::Stub::PrepareAsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::TestIamPermissionsResponse>::Create(channel_.get(), cq, rpcmethod_TestIamPermissions_, context, request, false);
}

Folders::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Folders_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Folders::Service, ::google::cloud::resourcemanager::v2::ListFoldersRequest, ::google::cloud::resourcemanager::v2::ListFoldersResponse>(
          std::mem_fn(&Folders::Service::ListFolders), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Folders_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Folders::Service, ::google::cloud::resourcemanager::v2::SearchFoldersRequest, ::google::cloud::resourcemanager::v2::SearchFoldersResponse>(
          std::mem_fn(&Folders::Service::SearchFolders), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Folders_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Folders::Service, ::google::cloud::resourcemanager::v2::GetFolderRequest, ::google::cloud::resourcemanager::v2::Folder>(
          std::mem_fn(&Folders::Service::GetFolder), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Folders_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Folders::Service, ::google::cloud::resourcemanager::v2::CreateFolderRequest, ::google::longrunning::Operation>(
          std::mem_fn(&Folders::Service::CreateFolder), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Folders_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Folders::Service, ::google::cloud::resourcemanager::v2::UpdateFolderRequest, ::google::cloud::resourcemanager::v2::Folder>(
          std::mem_fn(&Folders::Service::UpdateFolder), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Folders_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Folders::Service, ::google::cloud::resourcemanager::v2::MoveFolderRequest, ::google::longrunning::Operation>(
          std::mem_fn(&Folders::Service::MoveFolder), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Folders_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Folders::Service, ::google::cloud::resourcemanager::v2::DeleteFolderRequest, ::google::cloud::resourcemanager::v2::Folder>(
          std::mem_fn(&Folders::Service::DeleteFolder), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Folders_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Folders::Service, ::google::cloud::resourcemanager::v2::UndeleteFolderRequest, ::google::cloud::resourcemanager::v2::Folder>(
          std::mem_fn(&Folders::Service::UndeleteFolder), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Folders_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Folders::Service, ::google::iam::v1::GetIamPolicyRequest, ::google::iam::v1::Policy>(
          std::mem_fn(&Folders::Service::GetIamPolicy), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Folders_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Folders::Service, ::google::iam::v1::SetIamPolicyRequest, ::google::iam::v1::Policy>(
          std::mem_fn(&Folders::Service::SetIamPolicy), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Folders_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Folders::Service, ::google::iam::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse>(
          std::mem_fn(&Folders::Service::TestIamPermissions), this)));
}

Folders::Service::~Service() {
}

::grpc::Status Folders::Service::ListFolders(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::ListFoldersRequest* request, ::google::cloud::resourcemanager::v2::ListFoldersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Folders::Service::SearchFolders(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::SearchFoldersRequest* request, ::google::cloud::resourcemanager::v2::SearchFoldersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Folders::Service::GetFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::GetFolderRequest* request, ::google::cloud::resourcemanager::v2::Folder* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Folders::Service::CreateFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::CreateFolderRequest* request, ::google::longrunning::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Folders::Service::UpdateFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::UpdateFolderRequest* request, ::google::cloud::resourcemanager::v2::Folder* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Folders::Service::MoveFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::MoveFolderRequest* request, ::google::longrunning::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Folders::Service::DeleteFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::DeleteFolderRequest* request, ::google::cloud::resourcemanager::v2::Folder* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Folders::Service::UndeleteFolder(::grpc::ServerContext* context, const ::google::cloud::resourcemanager::v2::UndeleteFolderRequest* request, ::google::cloud::resourcemanager::v2::Folder* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Folders::Service::GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Folders::Service::SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Folders::Service::TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace cloud
}  // namespace resourcemanager
}  // namespace v2

