// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/resourcemanager/v2/folders.proto

#ifndef PROTOBUF_INCLUDED_google_2fcloud_2fresourcemanager_2fv2_2ffolders_2eproto
#define PROTOBUF_INCLUDED_google_2fcloud_2fresourcemanager_2fv2_2ffolders_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/iam/v1/iam_policy.pb.h"
#include "google/iam/v1/policy.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fresourcemanager_2fv2_2ffolders_2eproto 

namespace protobuf_google_2fcloud_2fresourcemanager_2fv2_2ffolders_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[12];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fcloud_2fresourcemanager_2fv2_2ffolders_2eproto
namespace google {
namespace cloud {
namespace resourcemanager {
namespace v2 {
class CreateFolderRequest;
class CreateFolderRequestDefaultTypeInternal;
extern CreateFolderRequestDefaultTypeInternal _CreateFolderRequest_default_instance_;
class DeleteFolderRequest;
class DeleteFolderRequestDefaultTypeInternal;
extern DeleteFolderRequestDefaultTypeInternal _DeleteFolderRequest_default_instance_;
class Folder;
class FolderDefaultTypeInternal;
extern FolderDefaultTypeInternal _Folder_default_instance_;
class FolderOperation;
class FolderOperationDefaultTypeInternal;
extern FolderOperationDefaultTypeInternal _FolderOperation_default_instance_;
class GetFolderRequest;
class GetFolderRequestDefaultTypeInternal;
extern GetFolderRequestDefaultTypeInternal _GetFolderRequest_default_instance_;
class ListFoldersRequest;
class ListFoldersRequestDefaultTypeInternal;
extern ListFoldersRequestDefaultTypeInternal _ListFoldersRequest_default_instance_;
class ListFoldersResponse;
class ListFoldersResponseDefaultTypeInternal;
extern ListFoldersResponseDefaultTypeInternal _ListFoldersResponse_default_instance_;
class MoveFolderRequest;
class MoveFolderRequestDefaultTypeInternal;
extern MoveFolderRequestDefaultTypeInternal _MoveFolderRequest_default_instance_;
class SearchFoldersRequest;
class SearchFoldersRequestDefaultTypeInternal;
extern SearchFoldersRequestDefaultTypeInternal _SearchFoldersRequest_default_instance_;
class SearchFoldersResponse;
class SearchFoldersResponseDefaultTypeInternal;
extern SearchFoldersResponseDefaultTypeInternal _SearchFoldersResponse_default_instance_;
class UndeleteFolderRequest;
class UndeleteFolderRequestDefaultTypeInternal;
extern UndeleteFolderRequestDefaultTypeInternal _UndeleteFolderRequest_default_instance_;
class UpdateFolderRequest;
class UpdateFolderRequestDefaultTypeInternal;
extern UpdateFolderRequestDefaultTypeInternal _UpdateFolderRequest_default_instance_;
}  // namespace v2
}  // namespace resourcemanager
}  // namespace cloud
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::cloud::resourcemanager::v2::CreateFolderRequest* Arena::CreateMaybeMessage<::google::cloud::resourcemanager::v2::CreateFolderRequest>(Arena*);
template<> ::google::cloud::resourcemanager::v2::DeleteFolderRequest* Arena::CreateMaybeMessage<::google::cloud::resourcemanager::v2::DeleteFolderRequest>(Arena*);
template<> ::google::cloud::resourcemanager::v2::Folder* Arena::CreateMaybeMessage<::google::cloud::resourcemanager::v2::Folder>(Arena*);
template<> ::google::cloud::resourcemanager::v2::FolderOperation* Arena::CreateMaybeMessage<::google::cloud::resourcemanager::v2::FolderOperation>(Arena*);
template<> ::google::cloud::resourcemanager::v2::GetFolderRequest* Arena::CreateMaybeMessage<::google::cloud::resourcemanager::v2::GetFolderRequest>(Arena*);
template<> ::google::cloud::resourcemanager::v2::ListFoldersRequest* Arena::CreateMaybeMessage<::google::cloud::resourcemanager::v2::ListFoldersRequest>(Arena*);
template<> ::google::cloud::resourcemanager::v2::ListFoldersResponse* Arena::CreateMaybeMessage<::google::cloud::resourcemanager::v2::ListFoldersResponse>(Arena*);
template<> ::google::cloud::resourcemanager::v2::MoveFolderRequest* Arena::CreateMaybeMessage<::google::cloud::resourcemanager::v2::MoveFolderRequest>(Arena*);
template<> ::google::cloud::resourcemanager::v2::SearchFoldersRequest* Arena::CreateMaybeMessage<::google::cloud::resourcemanager::v2::SearchFoldersRequest>(Arena*);
template<> ::google::cloud::resourcemanager::v2::SearchFoldersResponse* Arena::CreateMaybeMessage<::google::cloud::resourcemanager::v2::SearchFoldersResponse>(Arena*);
template<> ::google::cloud::resourcemanager::v2::UndeleteFolderRequest* Arena::CreateMaybeMessage<::google::cloud::resourcemanager::v2::UndeleteFolderRequest>(Arena*);
template<> ::google::cloud::resourcemanager::v2::UpdateFolderRequest* Arena::CreateMaybeMessage<::google::cloud::resourcemanager::v2::UpdateFolderRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace cloud {
namespace resourcemanager {
namespace v2 {

enum Folder_LifecycleState {
  Folder_LifecycleState_LIFECYCLE_STATE_UNSPECIFIED = 0,
  Folder_LifecycleState_ACTIVE = 1,
  Folder_LifecycleState_DELETE_REQUESTED = 2,
  Folder_LifecycleState_Folder_LifecycleState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Folder_LifecycleState_Folder_LifecycleState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Folder_LifecycleState_IsValid(int value);
const Folder_LifecycleState Folder_LifecycleState_LifecycleState_MIN = Folder_LifecycleState_LIFECYCLE_STATE_UNSPECIFIED;
const Folder_LifecycleState Folder_LifecycleState_LifecycleState_MAX = Folder_LifecycleState_DELETE_REQUESTED;
const int Folder_LifecycleState_LifecycleState_ARRAYSIZE = Folder_LifecycleState_LifecycleState_MAX + 1;

const ::google::protobuf::EnumDescriptor* Folder_LifecycleState_descriptor();
inline const ::std::string& Folder_LifecycleState_Name(Folder_LifecycleState value) {
  return ::google::protobuf::internal::NameOfEnum(
    Folder_LifecycleState_descriptor(), value);
}
inline bool Folder_LifecycleState_Parse(
    const ::std::string& name, Folder_LifecycleState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Folder_LifecycleState>(
    Folder_LifecycleState_descriptor(), name, value);
}
enum FolderOperation_OperationType {
  FolderOperation_OperationType_OPERATION_TYPE_UNSPECIFIED = 0,
  FolderOperation_OperationType_CREATE = 1,
  FolderOperation_OperationType_MOVE = 2,
  FolderOperation_OperationType_FolderOperation_OperationType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FolderOperation_OperationType_FolderOperation_OperationType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FolderOperation_OperationType_IsValid(int value);
const FolderOperation_OperationType FolderOperation_OperationType_OperationType_MIN = FolderOperation_OperationType_OPERATION_TYPE_UNSPECIFIED;
const FolderOperation_OperationType FolderOperation_OperationType_OperationType_MAX = FolderOperation_OperationType_MOVE;
const int FolderOperation_OperationType_OperationType_ARRAYSIZE = FolderOperation_OperationType_OperationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FolderOperation_OperationType_descriptor();
inline const ::std::string& FolderOperation_OperationType_Name(FolderOperation_OperationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FolderOperation_OperationType_descriptor(), value);
}
inline bool FolderOperation_OperationType_Parse(
    const ::std::string& name, FolderOperation_OperationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FolderOperation_OperationType>(
    FolderOperation_OperationType_descriptor(), name, value);
}
// ===================================================================

class Folder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.resourcemanager.v2.Folder) */ {
 public:
  Folder();
  virtual ~Folder();

  Folder(const Folder& from);

  inline Folder& operator=(const Folder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Folder(Folder&& from) noexcept
    : Folder() {
    *this = ::std::move(from);
  }

  inline Folder& operator=(Folder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Folder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Folder* internal_default_instance() {
    return reinterpret_cast<const Folder*>(
               &_Folder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Folder* other);
  friend void swap(Folder& a, Folder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Folder* New() const final {
    return CreateMaybeMessage<Folder>(NULL);
  }

  Folder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Folder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Folder& from);
  void MergeFrom(const Folder& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Folder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Folder_LifecycleState LifecycleState;
  static const LifecycleState LIFECYCLE_STATE_UNSPECIFIED =
    Folder_LifecycleState_LIFECYCLE_STATE_UNSPECIFIED;
  static const LifecycleState ACTIVE =
    Folder_LifecycleState_ACTIVE;
  static const LifecycleState DELETE_REQUESTED =
    Folder_LifecycleState_DELETE_REQUESTED;
  static inline bool LifecycleState_IsValid(int value) {
    return Folder_LifecycleState_IsValid(value);
  }
  static const LifecycleState LifecycleState_MIN =
    Folder_LifecycleState_LifecycleState_MIN;
  static const LifecycleState LifecycleState_MAX =
    Folder_LifecycleState_LifecycleState_MAX;
  static const int LifecycleState_ARRAYSIZE =
    Folder_LifecycleState_LifecycleState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LifecycleState_descriptor() {
    return Folder_LifecycleState_descriptor();
  }
  static inline const ::std::string& LifecycleState_Name(LifecycleState value) {
    return Folder_LifecycleState_Name(value);
  }
  static inline bool LifecycleState_Parse(const ::std::string& name,
      LifecycleState* value) {
    return Folder_LifecycleState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string parent = 2;
  void clear_parent();
  static const int kParentFieldNumber = 2;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string display_name = 3;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 3;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // .google.protobuf.Timestamp create_time = 5;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 5;
  private:
  const ::google::protobuf::Timestamp& _internal_create_time() const;
  public:
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp update_time = 6;
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 6;
  private:
  const ::google::protobuf::Timestamp& _internal_update_time() const;
  public:
  const ::google::protobuf::Timestamp& update_time() const;
  ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* update_time);

  // .google.cloud.resourcemanager.v2.Folder.LifecycleState lifecycle_state = 4;
  void clear_lifecycle_state();
  static const int kLifecycleStateFieldNumber = 4;
  ::google::cloud::resourcemanager::v2::Folder_LifecycleState lifecycle_state() const;
  void set_lifecycle_state(::google::cloud::resourcemanager::v2::Folder_LifecycleState value);

  // @@protoc_insertion_point(class_scope:google.cloud.resourcemanager.v2.Folder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* update_time_;
  int lifecycle_state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fresourcemanager_2fv2_2ffolders_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListFoldersRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.resourcemanager.v2.ListFoldersRequest) */ {
 public:
  ListFoldersRequest();
  virtual ~ListFoldersRequest();

  ListFoldersRequest(const ListFoldersRequest& from);

  inline ListFoldersRequest& operator=(const ListFoldersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListFoldersRequest(ListFoldersRequest&& from) noexcept
    : ListFoldersRequest() {
    *this = ::std::move(from);
  }

  inline ListFoldersRequest& operator=(ListFoldersRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListFoldersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListFoldersRequest* internal_default_instance() {
    return reinterpret_cast<const ListFoldersRequest*>(
               &_ListFoldersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ListFoldersRequest* other);
  friend void swap(ListFoldersRequest& a, ListFoldersRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListFoldersRequest* New() const final {
    return CreateMaybeMessage<ListFoldersRequest>(NULL);
  }

  ListFoldersRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListFoldersRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListFoldersRequest& from);
  void MergeFrom(const ListFoldersRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListFoldersRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // bool show_deleted = 4;
  void clear_show_deleted();
  static const int kShowDeletedFieldNumber = 4;
  bool show_deleted() const;
  void set_show_deleted(bool value);

  // @@protoc_insertion_point(class_scope:google.cloud.resourcemanager.v2.ListFoldersRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  bool show_deleted_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fresourcemanager_2fv2_2ffolders_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListFoldersResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.resourcemanager.v2.ListFoldersResponse) */ {
 public:
  ListFoldersResponse();
  virtual ~ListFoldersResponse();

  ListFoldersResponse(const ListFoldersResponse& from);

  inline ListFoldersResponse& operator=(const ListFoldersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListFoldersResponse(ListFoldersResponse&& from) noexcept
    : ListFoldersResponse() {
    *this = ::std::move(from);
  }

  inline ListFoldersResponse& operator=(ListFoldersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListFoldersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListFoldersResponse* internal_default_instance() {
    return reinterpret_cast<const ListFoldersResponse*>(
               &_ListFoldersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ListFoldersResponse* other);
  friend void swap(ListFoldersResponse& a, ListFoldersResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListFoldersResponse* New() const final {
    return CreateMaybeMessage<ListFoldersResponse>(NULL);
  }

  ListFoldersResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListFoldersResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListFoldersResponse& from);
  void MergeFrom(const ListFoldersResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListFoldersResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.resourcemanager.v2.Folder folders = 1;
  int folders_size() const;
  void clear_folders();
  static const int kFoldersFieldNumber = 1;
  ::google::cloud::resourcemanager::v2::Folder* mutable_folders(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::resourcemanager::v2::Folder >*
      mutable_folders();
  const ::google::cloud::resourcemanager::v2::Folder& folders(int index) const;
  ::google::cloud::resourcemanager::v2::Folder* add_folders();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::resourcemanager::v2::Folder >&
      folders() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.cloud.resourcemanager.v2.ListFoldersResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::resourcemanager::v2::Folder > folders_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fresourcemanager_2fv2_2ffolders_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchFoldersRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.resourcemanager.v2.SearchFoldersRequest) */ {
 public:
  SearchFoldersRequest();
  virtual ~SearchFoldersRequest();

  SearchFoldersRequest(const SearchFoldersRequest& from);

  inline SearchFoldersRequest& operator=(const SearchFoldersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchFoldersRequest(SearchFoldersRequest&& from) noexcept
    : SearchFoldersRequest() {
    *this = ::std::move(from);
  }

  inline SearchFoldersRequest& operator=(SearchFoldersRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchFoldersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchFoldersRequest* internal_default_instance() {
    return reinterpret_cast<const SearchFoldersRequest*>(
               &_SearchFoldersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SearchFoldersRequest* other);
  friend void swap(SearchFoldersRequest& a, SearchFoldersRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchFoldersRequest* New() const final {
    return CreateMaybeMessage<SearchFoldersRequest>(NULL);
  }

  SearchFoldersRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchFoldersRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchFoldersRequest& from);
  void MergeFrom(const SearchFoldersRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchFoldersRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string page_token = 2;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 2;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // string query = 3;
  void clear_query();
  static const int kQueryFieldNumber = 3;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // int32 page_size = 1;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 1;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.cloud.resourcemanager.v2.SearchFoldersRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fresourcemanager_2fv2_2ffolders_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchFoldersResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.resourcemanager.v2.SearchFoldersResponse) */ {
 public:
  SearchFoldersResponse();
  virtual ~SearchFoldersResponse();

  SearchFoldersResponse(const SearchFoldersResponse& from);

  inline SearchFoldersResponse& operator=(const SearchFoldersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchFoldersResponse(SearchFoldersResponse&& from) noexcept
    : SearchFoldersResponse() {
    *this = ::std::move(from);
  }

  inline SearchFoldersResponse& operator=(SearchFoldersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchFoldersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchFoldersResponse* internal_default_instance() {
    return reinterpret_cast<const SearchFoldersResponse*>(
               &_SearchFoldersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SearchFoldersResponse* other);
  friend void swap(SearchFoldersResponse& a, SearchFoldersResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchFoldersResponse* New() const final {
    return CreateMaybeMessage<SearchFoldersResponse>(NULL);
  }

  SearchFoldersResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchFoldersResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchFoldersResponse& from);
  void MergeFrom(const SearchFoldersResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchFoldersResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.resourcemanager.v2.Folder folders = 1;
  int folders_size() const;
  void clear_folders();
  static const int kFoldersFieldNumber = 1;
  ::google::cloud::resourcemanager::v2::Folder* mutable_folders(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::resourcemanager::v2::Folder >*
      mutable_folders();
  const ::google::cloud::resourcemanager::v2::Folder& folders(int index) const;
  ::google::cloud::resourcemanager::v2::Folder* add_folders();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::resourcemanager::v2::Folder >&
      folders() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.cloud.resourcemanager.v2.SearchFoldersResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::resourcemanager::v2::Folder > folders_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fresourcemanager_2fv2_2ffolders_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetFolderRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.resourcemanager.v2.GetFolderRequest) */ {
 public:
  GetFolderRequest();
  virtual ~GetFolderRequest();

  GetFolderRequest(const GetFolderRequest& from);

  inline GetFolderRequest& operator=(const GetFolderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetFolderRequest(GetFolderRequest&& from) noexcept
    : GetFolderRequest() {
    *this = ::std::move(from);
  }

  inline GetFolderRequest& operator=(GetFolderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFolderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFolderRequest* internal_default_instance() {
    return reinterpret_cast<const GetFolderRequest*>(
               &_GetFolderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GetFolderRequest* other);
  friend void swap(GetFolderRequest& a, GetFolderRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFolderRequest* New() const final {
    return CreateMaybeMessage<GetFolderRequest>(NULL);
  }

  GetFolderRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetFolderRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetFolderRequest& from);
  void MergeFrom(const GetFolderRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFolderRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.cloud.resourcemanager.v2.GetFolderRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fresourcemanager_2fv2_2ffolders_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateFolderRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.resourcemanager.v2.CreateFolderRequest) */ {
 public:
  CreateFolderRequest();
  virtual ~CreateFolderRequest();

  CreateFolderRequest(const CreateFolderRequest& from);

  inline CreateFolderRequest& operator=(const CreateFolderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateFolderRequest(CreateFolderRequest&& from) noexcept
    : CreateFolderRequest() {
    *this = ::std::move(from);
  }

  inline CreateFolderRequest& operator=(CreateFolderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateFolderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateFolderRequest* internal_default_instance() {
    return reinterpret_cast<const CreateFolderRequest*>(
               &_CreateFolderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CreateFolderRequest* other);
  friend void swap(CreateFolderRequest& a, CreateFolderRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateFolderRequest* New() const final {
    return CreateMaybeMessage<CreateFolderRequest>(NULL);
  }

  CreateFolderRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateFolderRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateFolderRequest& from);
  void MergeFrom(const CreateFolderRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateFolderRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // .google.cloud.resourcemanager.v2.Folder folder = 2;
  bool has_folder() const;
  void clear_folder();
  static const int kFolderFieldNumber = 2;
  private:
  const ::google::cloud::resourcemanager::v2::Folder& _internal_folder() const;
  public:
  const ::google::cloud::resourcemanager::v2::Folder& folder() const;
  ::google::cloud::resourcemanager::v2::Folder* release_folder();
  ::google::cloud::resourcemanager::v2::Folder* mutable_folder();
  void set_allocated_folder(::google::cloud::resourcemanager::v2::Folder* folder);

  // @@protoc_insertion_point(class_scope:google.cloud.resourcemanager.v2.CreateFolderRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::cloud::resourcemanager::v2::Folder* folder_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fresourcemanager_2fv2_2ffolders_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MoveFolderRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.resourcemanager.v2.MoveFolderRequest) */ {
 public:
  MoveFolderRequest();
  virtual ~MoveFolderRequest();

  MoveFolderRequest(const MoveFolderRequest& from);

  inline MoveFolderRequest& operator=(const MoveFolderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MoveFolderRequest(MoveFolderRequest&& from) noexcept
    : MoveFolderRequest() {
    *this = ::std::move(from);
  }

  inline MoveFolderRequest& operator=(MoveFolderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MoveFolderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveFolderRequest* internal_default_instance() {
    return reinterpret_cast<const MoveFolderRequest*>(
               &_MoveFolderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(MoveFolderRequest* other);
  friend void swap(MoveFolderRequest& a, MoveFolderRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveFolderRequest* New() const final {
    return CreateMaybeMessage<MoveFolderRequest>(NULL);
  }

  MoveFolderRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MoveFolderRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MoveFolderRequest& from);
  void MergeFrom(const MoveFolderRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveFolderRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string destination_parent = 2;
  void clear_destination_parent();
  static const int kDestinationParentFieldNumber = 2;
  const ::std::string& destination_parent() const;
  void set_destination_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_destination_parent(::std::string&& value);
  #endif
  void set_destination_parent(const char* value);
  void set_destination_parent(const char* value, size_t size);
  ::std::string* mutable_destination_parent();
  ::std::string* release_destination_parent();
  void set_allocated_destination_parent(::std::string* destination_parent);

  // @@protoc_insertion_point(class_scope:google.cloud.resourcemanager.v2.MoveFolderRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr destination_parent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fresourcemanager_2fv2_2ffolders_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateFolderRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.resourcemanager.v2.UpdateFolderRequest) */ {
 public:
  UpdateFolderRequest();
  virtual ~UpdateFolderRequest();

  UpdateFolderRequest(const UpdateFolderRequest& from);

  inline UpdateFolderRequest& operator=(const UpdateFolderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateFolderRequest(UpdateFolderRequest&& from) noexcept
    : UpdateFolderRequest() {
    *this = ::std::move(from);
  }

  inline UpdateFolderRequest& operator=(UpdateFolderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateFolderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateFolderRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateFolderRequest*>(
               &_UpdateFolderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(UpdateFolderRequest* other);
  friend void swap(UpdateFolderRequest& a, UpdateFolderRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateFolderRequest* New() const final {
    return CreateMaybeMessage<UpdateFolderRequest>(NULL);
  }

  UpdateFolderRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateFolderRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateFolderRequest& from);
  void MergeFrom(const UpdateFolderRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateFolderRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.resourcemanager.v2.Folder folder = 1;
  bool has_folder() const;
  void clear_folder();
  static const int kFolderFieldNumber = 1;
  private:
  const ::google::cloud::resourcemanager::v2::Folder& _internal_folder() const;
  public:
  const ::google::cloud::resourcemanager::v2::Folder& folder() const;
  ::google::cloud::resourcemanager::v2::Folder* release_folder();
  ::google::cloud::resourcemanager::v2::Folder* mutable_folder();
  void set_allocated_folder(::google::cloud::resourcemanager::v2::Folder* folder);

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 2;
  private:
  const ::google::protobuf::FieldMask& _internal_update_mask() const;
  public:
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);

  // @@protoc_insertion_point(class_scope:google.cloud.resourcemanager.v2.UpdateFolderRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::cloud::resourcemanager::v2::Folder* folder_;
  ::google::protobuf::FieldMask* update_mask_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fresourcemanager_2fv2_2ffolders_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteFolderRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.resourcemanager.v2.DeleteFolderRequest) */ {
 public:
  DeleteFolderRequest();
  virtual ~DeleteFolderRequest();

  DeleteFolderRequest(const DeleteFolderRequest& from);

  inline DeleteFolderRequest& operator=(const DeleteFolderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteFolderRequest(DeleteFolderRequest&& from) noexcept
    : DeleteFolderRequest() {
    *this = ::std::move(from);
  }

  inline DeleteFolderRequest& operator=(DeleteFolderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteFolderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteFolderRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteFolderRequest*>(
               &_DeleteFolderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(DeleteFolderRequest* other);
  friend void swap(DeleteFolderRequest& a, DeleteFolderRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteFolderRequest* New() const final {
    return CreateMaybeMessage<DeleteFolderRequest>(NULL);
  }

  DeleteFolderRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteFolderRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteFolderRequest& from);
  void MergeFrom(const DeleteFolderRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteFolderRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bool recursive_delete = 2;
  void clear_recursive_delete();
  static const int kRecursiveDeleteFieldNumber = 2;
  bool recursive_delete() const;
  void set_recursive_delete(bool value);

  // @@protoc_insertion_point(class_scope:google.cloud.resourcemanager.v2.DeleteFolderRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  bool recursive_delete_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fresourcemanager_2fv2_2ffolders_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UndeleteFolderRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.resourcemanager.v2.UndeleteFolderRequest) */ {
 public:
  UndeleteFolderRequest();
  virtual ~UndeleteFolderRequest();

  UndeleteFolderRequest(const UndeleteFolderRequest& from);

  inline UndeleteFolderRequest& operator=(const UndeleteFolderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UndeleteFolderRequest(UndeleteFolderRequest&& from) noexcept
    : UndeleteFolderRequest() {
    *this = ::std::move(from);
  }

  inline UndeleteFolderRequest& operator=(UndeleteFolderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UndeleteFolderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UndeleteFolderRequest* internal_default_instance() {
    return reinterpret_cast<const UndeleteFolderRequest*>(
               &_UndeleteFolderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(UndeleteFolderRequest* other);
  friend void swap(UndeleteFolderRequest& a, UndeleteFolderRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UndeleteFolderRequest* New() const final {
    return CreateMaybeMessage<UndeleteFolderRequest>(NULL);
  }

  UndeleteFolderRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UndeleteFolderRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UndeleteFolderRequest& from);
  void MergeFrom(const UndeleteFolderRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndeleteFolderRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.cloud.resourcemanager.v2.UndeleteFolderRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fresourcemanager_2fv2_2ffolders_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FolderOperation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.resourcemanager.v2.FolderOperation) */ {
 public:
  FolderOperation();
  virtual ~FolderOperation();

  FolderOperation(const FolderOperation& from);

  inline FolderOperation& operator=(const FolderOperation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FolderOperation(FolderOperation&& from) noexcept
    : FolderOperation() {
    *this = ::std::move(from);
  }

  inline FolderOperation& operator=(FolderOperation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FolderOperation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FolderOperation* internal_default_instance() {
    return reinterpret_cast<const FolderOperation*>(
               &_FolderOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(FolderOperation* other);
  friend void swap(FolderOperation& a, FolderOperation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FolderOperation* New() const final {
    return CreateMaybeMessage<FolderOperation>(NULL);
  }

  FolderOperation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FolderOperation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FolderOperation& from);
  void MergeFrom(const FolderOperation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FolderOperation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FolderOperation_OperationType OperationType;
  static const OperationType OPERATION_TYPE_UNSPECIFIED =
    FolderOperation_OperationType_OPERATION_TYPE_UNSPECIFIED;
  static const OperationType CREATE =
    FolderOperation_OperationType_CREATE;
  static const OperationType MOVE =
    FolderOperation_OperationType_MOVE;
  static inline bool OperationType_IsValid(int value) {
    return FolderOperation_OperationType_IsValid(value);
  }
  static const OperationType OperationType_MIN =
    FolderOperation_OperationType_OperationType_MIN;
  static const OperationType OperationType_MAX =
    FolderOperation_OperationType_OperationType_MAX;
  static const int OperationType_ARRAYSIZE =
    FolderOperation_OperationType_OperationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OperationType_descriptor() {
    return FolderOperation_OperationType_descriptor();
  }
  static inline const ::std::string& OperationType_Name(OperationType value) {
    return FolderOperation_OperationType_Name(value);
  }
  static inline bool OperationType_Parse(const ::std::string& name,
      OperationType* value) {
    return FolderOperation_OperationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string display_name = 1;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 1;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string source_parent = 3;
  void clear_source_parent();
  static const int kSourceParentFieldNumber = 3;
  const ::std::string& source_parent() const;
  void set_source_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_source_parent(::std::string&& value);
  #endif
  void set_source_parent(const char* value);
  void set_source_parent(const char* value, size_t size);
  ::std::string* mutable_source_parent();
  ::std::string* release_source_parent();
  void set_allocated_source_parent(::std::string* source_parent);

  // string destination_parent = 4;
  void clear_destination_parent();
  static const int kDestinationParentFieldNumber = 4;
  const ::std::string& destination_parent() const;
  void set_destination_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_destination_parent(::std::string&& value);
  #endif
  void set_destination_parent(const char* value);
  void set_destination_parent(const char* value, size_t size);
  ::std::string* mutable_destination_parent();
  ::std::string* release_destination_parent();
  void set_allocated_destination_parent(::std::string* destination_parent);

  // .google.cloud.resourcemanager.v2.FolderOperation.OperationType operation_type = 2;
  void clear_operation_type();
  static const int kOperationTypeFieldNumber = 2;
  ::google::cloud::resourcemanager::v2::FolderOperation_OperationType operation_type() const;
  void set_operation_type(::google::cloud::resourcemanager::v2::FolderOperation_OperationType value);

  // @@protoc_insertion_point(class_scope:google.cloud.resourcemanager.v2.FolderOperation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr source_parent_;
  ::google::protobuf::internal::ArenaStringPtr destination_parent_;
  int operation_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fresourcemanager_2fv2_2ffolders_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Folder

// string name = 1;
inline void Folder::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Folder::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.Folder.name)
  return name_.GetNoArena();
}
inline void Folder::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.resourcemanager.v2.Folder.name)
}
#if LANG_CXX11
inline void Folder::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.resourcemanager.v2.Folder.name)
}
#endif
inline void Folder::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.resourcemanager.v2.Folder.name)
}
inline void Folder::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.resourcemanager.v2.Folder.name)
}
inline ::std::string* Folder::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.resourcemanager.v2.Folder.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Folder::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.resourcemanager.v2.Folder.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Folder::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.resourcemanager.v2.Folder.name)
}

// string parent = 2;
inline void Folder::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Folder::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.Folder.parent)
  return parent_.GetNoArena();
}
inline void Folder::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.resourcemanager.v2.Folder.parent)
}
#if LANG_CXX11
inline void Folder::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.resourcemanager.v2.Folder.parent)
}
#endif
inline void Folder::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.resourcemanager.v2.Folder.parent)
}
inline void Folder::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.resourcemanager.v2.Folder.parent)
}
inline ::std::string* Folder::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.resourcemanager.v2.Folder.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Folder::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.resourcemanager.v2.Folder.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Folder::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.resourcemanager.v2.Folder.parent)
}

// string display_name = 3;
inline void Folder::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Folder::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.Folder.display_name)
  return display_name_.GetNoArena();
}
inline void Folder::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.resourcemanager.v2.Folder.display_name)
}
#if LANG_CXX11
inline void Folder::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.resourcemanager.v2.Folder.display_name)
}
#endif
inline void Folder::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.resourcemanager.v2.Folder.display_name)
}
inline void Folder::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.resourcemanager.v2.Folder.display_name)
}
inline ::std::string* Folder::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.resourcemanager.v2.Folder.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Folder::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.resourcemanager.v2.Folder.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Folder::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.resourcemanager.v2.Folder.display_name)
}

// .google.cloud.resourcemanager.v2.Folder.LifecycleState lifecycle_state = 4;
inline void Folder::clear_lifecycle_state() {
  lifecycle_state_ = 0;
}
inline ::google::cloud::resourcemanager::v2::Folder_LifecycleState Folder::lifecycle_state() const {
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.Folder.lifecycle_state)
  return static_cast< ::google::cloud::resourcemanager::v2::Folder_LifecycleState >(lifecycle_state_);
}
inline void Folder::set_lifecycle_state(::google::cloud::resourcemanager::v2::Folder_LifecycleState value) {
  
  lifecycle_state_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.resourcemanager.v2.Folder.lifecycle_state)
}

// .google.protobuf.Timestamp create_time = 5;
inline bool Folder::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Folder::_internal_create_time() const {
  return *create_time_;
}
inline const ::google::protobuf::Timestamp& Folder::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.Folder.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Folder::release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.resourcemanager.v2.Folder.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Folder::mutable_create_time() {
  
  if (create_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.resourcemanager.v2.Folder.create_time)
  return create_time_;
}
inline void Folder::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.resourcemanager.v2.Folder.create_time)
}

// .google.protobuf.Timestamp update_time = 6;
inline bool Folder::has_update_time() const {
  return this != internal_default_instance() && update_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Folder::_internal_update_time() const {
  return *update_time_;
}
inline const ::google::protobuf::Timestamp& Folder::update_time() const {
  const ::google::protobuf::Timestamp* p = update_time_;
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.Folder.update_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Folder::release_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.resourcemanager.v2.Folder.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Folder::mutable_update_time() {
  
  if (update_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    update_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.resourcemanager.v2.Folder.update_time)
  return update_time_;
}
inline void Folder::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.resourcemanager.v2.Folder.update_time)
}

// -------------------------------------------------------------------

// ListFoldersRequest

// string parent = 1;
inline void ListFoldersRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListFoldersRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.ListFoldersRequest.parent)
  return parent_.GetNoArena();
}
inline void ListFoldersRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.resourcemanager.v2.ListFoldersRequest.parent)
}
#if LANG_CXX11
inline void ListFoldersRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.resourcemanager.v2.ListFoldersRequest.parent)
}
#endif
inline void ListFoldersRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.resourcemanager.v2.ListFoldersRequest.parent)
}
inline void ListFoldersRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.resourcemanager.v2.ListFoldersRequest.parent)
}
inline ::std::string* ListFoldersRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.resourcemanager.v2.ListFoldersRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListFoldersRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.resourcemanager.v2.ListFoldersRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListFoldersRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.resourcemanager.v2.ListFoldersRequest.parent)
}

// int32 page_size = 2;
inline void ListFoldersRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListFoldersRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.ListFoldersRequest.page_size)
  return page_size_;
}
inline void ListFoldersRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.resourcemanager.v2.ListFoldersRequest.page_size)
}

// string page_token = 3;
inline void ListFoldersRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListFoldersRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.ListFoldersRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListFoldersRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.resourcemanager.v2.ListFoldersRequest.page_token)
}
#if LANG_CXX11
inline void ListFoldersRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.resourcemanager.v2.ListFoldersRequest.page_token)
}
#endif
inline void ListFoldersRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.resourcemanager.v2.ListFoldersRequest.page_token)
}
inline void ListFoldersRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.resourcemanager.v2.ListFoldersRequest.page_token)
}
inline ::std::string* ListFoldersRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.resourcemanager.v2.ListFoldersRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListFoldersRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.resourcemanager.v2.ListFoldersRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListFoldersRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.resourcemanager.v2.ListFoldersRequest.page_token)
}

// bool show_deleted = 4;
inline void ListFoldersRequest::clear_show_deleted() {
  show_deleted_ = false;
}
inline bool ListFoldersRequest::show_deleted() const {
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.ListFoldersRequest.show_deleted)
  return show_deleted_;
}
inline void ListFoldersRequest::set_show_deleted(bool value) {
  
  show_deleted_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.resourcemanager.v2.ListFoldersRequest.show_deleted)
}

// -------------------------------------------------------------------

// ListFoldersResponse

// repeated .google.cloud.resourcemanager.v2.Folder folders = 1;
inline int ListFoldersResponse::folders_size() const {
  return folders_.size();
}
inline void ListFoldersResponse::clear_folders() {
  folders_.Clear();
}
inline ::google::cloud::resourcemanager::v2::Folder* ListFoldersResponse::mutable_folders(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.resourcemanager.v2.ListFoldersResponse.folders)
  return folders_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::resourcemanager::v2::Folder >*
ListFoldersResponse::mutable_folders() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.resourcemanager.v2.ListFoldersResponse.folders)
  return &folders_;
}
inline const ::google::cloud::resourcemanager::v2::Folder& ListFoldersResponse::folders(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.ListFoldersResponse.folders)
  return folders_.Get(index);
}
inline ::google::cloud::resourcemanager::v2::Folder* ListFoldersResponse::add_folders() {
  // @@protoc_insertion_point(field_add:google.cloud.resourcemanager.v2.ListFoldersResponse.folders)
  return folders_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::resourcemanager::v2::Folder >&
ListFoldersResponse::folders() const {
  // @@protoc_insertion_point(field_list:google.cloud.resourcemanager.v2.ListFoldersResponse.folders)
  return folders_;
}

// string next_page_token = 2;
inline void ListFoldersResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListFoldersResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.ListFoldersResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListFoldersResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.resourcemanager.v2.ListFoldersResponse.next_page_token)
}
#if LANG_CXX11
inline void ListFoldersResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.resourcemanager.v2.ListFoldersResponse.next_page_token)
}
#endif
inline void ListFoldersResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.resourcemanager.v2.ListFoldersResponse.next_page_token)
}
inline void ListFoldersResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.resourcemanager.v2.ListFoldersResponse.next_page_token)
}
inline ::std::string* ListFoldersResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.resourcemanager.v2.ListFoldersResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListFoldersResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.resourcemanager.v2.ListFoldersResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListFoldersResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.resourcemanager.v2.ListFoldersResponse.next_page_token)
}

// -------------------------------------------------------------------

// SearchFoldersRequest

// int32 page_size = 1;
inline void SearchFoldersRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 SearchFoldersRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.SearchFoldersRequest.page_size)
  return page_size_;
}
inline void SearchFoldersRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.resourcemanager.v2.SearchFoldersRequest.page_size)
}

// string page_token = 2;
inline void SearchFoldersRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchFoldersRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.SearchFoldersRequest.page_token)
  return page_token_.GetNoArena();
}
inline void SearchFoldersRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.resourcemanager.v2.SearchFoldersRequest.page_token)
}
#if LANG_CXX11
inline void SearchFoldersRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.resourcemanager.v2.SearchFoldersRequest.page_token)
}
#endif
inline void SearchFoldersRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.resourcemanager.v2.SearchFoldersRequest.page_token)
}
inline void SearchFoldersRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.resourcemanager.v2.SearchFoldersRequest.page_token)
}
inline ::std::string* SearchFoldersRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.resourcemanager.v2.SearchFoldersRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchFoldersRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.resourcemanager.v2.SearchFoldersRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchFoldersRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.resourcemanager.v2.SearchFoldersRequest.page_token)
}

// string query = 3;
inline void SearchFoldersRequest::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchFoldersRequest::query() const {
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.SearchFoldersRequest.query)
  return query_.GetNoArena();
}
inline void SearchFoldersRequest::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.resourcemanager.v2.SearchFoldersRequest.query)
}
#if LANG_CXX11
inline void SearchFoldersRequest::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.resourcemanager.v2.SearchFoldersRequest.query)
}
#endif
inline void SearchFoldersRequest::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.resourcemanager.v2.SearchFoldersRequest.query)
}
inline void SearchFoldersRequest::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.resourcemanager.v2.SearchFoldersRequest.query)
}
inline ::std::string* SearchFoldersRequest::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.resourcemanager.v2.SearchFoldersRequest.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchFoldersRequest::release_query() {
  // @@protoc_insertion_point(field_release:google.cloud.resourcemanager.v2.SearchFoldersRequest.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchFoldersRequest::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.resourcemanager.v2.SearchFoldersRequest.query)
}

// -------------------------------------------------------------------

// SearchFoldersResponse

// repeated .google.cloud.resourcemanager.v2.Folder folders = 1;
inline int SearchFoldersResponse::folders_size() const {
  return folders_.size();
}
inline void SearchFoldersResponse::clear_folders() {
  folders_.Clear();
}
inline ::google::cloud::resourcemanager::v2::Folder* SearchFoldersResponse::mutable_folders(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.resourcemanager.v2.SearchFoldersResponse.folders)
  return folders_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::resourcemanager::v2::Folder >*
SearchFoldersResponse::mutable_folders() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.resourcemanager.v2.SearchFoldersResponse.folders)
  return &folders_;
}
inline const ::google::cloud::resourcemanager::v2::Folder& SearchFoldersResponse::folders(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.SearchFoldersResponse.folders)
  return folders_.Get(index);
}
inline ::google::cloud::resourcemanager::v2::Folder* SearchFoldersResponse::add_folders() {
  // @@protoc_insertion_point(field_add:google.cloud.resourcemanager.v2.SearchFoldersResponse.folders)
  return folders_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::resourcemanager::v2::Folder >&
SearchFoldersResponse::folders() const {
  // @@protoc_insertion_point(field_list:google.cloud.resourcemanager.v2.SearchFoldersResponse.folders)
  return folders_;
}

// string next_page_token = 2;
inline void SearchFoldersResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchFoldersResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.SearchFoldersResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void SearchFoldersResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.resourcemanager.v2.SearchFoldersResponse.next_page_token)
}
#if LANG_CXX11
inline void SearchFoldersResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.resourcemanager.v2.SearchFoldersResponse.next_page_token)
}
#endif
inline void SearchFoldersResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.resourcemanager.v2.SearchFoldersResponse.next_page_token)
}
inline void SearchFoldersResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.resourcemanager.v2.SearchFoldersResponse.next_page_token)
}
inline ::std::string* SearchFoldersResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.resourcemanager.v2.SearchFoldersResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchFoldersResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.resourcemanager.v2.SearchFoldersResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchFoldersResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.resourcemanager.v2.SearchFoldersResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetFolderRequest

// string name = 1;
inline void GetFolderRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFolderRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.GetFolderRequest.name)
  return name_.GetNoArena();
}
inline void GetFolderRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.resourcemanager.v2.GetFolderRequest.name)
}
#if LANG_CXX11
inline void GetFolderRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.resourcemanager.v2.GetFolderRequest.name)
}
#endif
inline void GetFolderRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.resourcemanager.v2.GetFolderRequest.name)
}
inline void GetFolderRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.resourcemanager.v2.GetFolderRequest.name)
}
inline ::std::string* GetFolderRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.resourcemanager.v2.GetFolderRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFolderRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.resourcemanager.v2.GetFolderRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFolderRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.resourcemanager.v2.GetFolderRequest.name)
}

// -------------------------------------------------------------------

// CreateFolderRequest

// string parent = 1;
inline void CreateFolderRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateFolderRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.CreateFolderRequest.parent)
  return parent_.GetNoArena();
}
inline void CreateFolderRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.resourcemanager.v2.CreateFolderRequest.parent)
}
#if LANG_CXX11
inline void CreateFolderRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.resourcemanager.v2.CreateFolderRequest.parent)
}
#endif
inline void CreateFolderRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.resourcemanager.v2.CreateFolderRequest.parent)
}
inline void CreateFolderRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.resourcemanager.v2.CreateFolderRequest.parent)
}
inline ::std::string* CreateFolderRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.resourcemanager.v2.CreateFolderRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateFolderRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.resourcemanager.v2.CreateFolderRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateFolderRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.resourcemanager.v2.CreateFolderRequest.parent)
}

// .google.cloud.resourcemanager.v2.Folder folder = 2;
inline bool CreateFolderRequest::has_folder() const {
  return this != internal_default_instance() && folder_ != NULL;
}
inline void CreateFolderRequest::clear_folder() {
  if (GetArenaNoVirtual() == NULL && folder_ != NULL) {
    delete folder_;
  }
  folder_ = NULL;
}
inline const ::google::cloud::resourcemanager::v2::Folder& CreateFolderRequest::_internal_folder() const {
  return *folder_;
}
inline const ::google::cloud::resourcemanager::v2::Folder& CreateFolderRequest::folder() const {
  const ::google::cloud::resourcemanager::v2::Folder* p = folder_;
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.CreateFolderRequest.folder)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::resourcemanager::v2::Folder*>(
      &::google::cloud::resourcemanager::v2::_Folder_default_instance_);
}
inline ::google::cloud::resourcemanager::v2::Folder* CreateFolderRequest::release_folder() {
  // @@protoc_insertion_point(field_release:google.cloud.resourcemanager.v2.CreateFolderRequest.folder)
  
  ::google::cloud::resourcemanager::v2::Folder* temp = folder_;
  folder_ = NULL;
  return temp;
}
inline ::google::cloud::resourcemanager::v2::Folder* CreateFolderRequest::mutable_folder() {
  
  if (folder_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::resourcemanager::v2::Folder>(GetArenaNoVirtual());
    folder_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.resourcemanager.v2.CreateFolderRequest.folder)
  return folder_;
}
inline void CreateFolderRequest::set_allocated_folder(::google::cloud::resourcemanager::v2::Folder* folder) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete folder_;
  }
  if (folder) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      folder = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, folder, submessage_arena);
    }
    
  } else {
    
  }
  folder_ = folder;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.resourcemanager.v2.CreateFolderRequest.folder)
}

// -------------------------------------------------------------------

// MoveFolderRequest

// string name = 1;
inline void MoveFolderRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MoveFolderRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.MoveFolderRequest.name)
  return name_.GetNoArena();
}
inline void MoveFolderRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.resourcemanager.v2.MoveFolderRequest.name)
}
#if LANG_CXX11
inline void MoveFolderRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.resourcemanager.v2.MoveFolderRequest.name)
}
#endif
inline void MoveFolderRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.resourcemanager.v2.MoveFolderRequest.name)
}
inline void MoveFolderRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.resourcemanager.v2.MoveFolderRequest.name)
}
inline ::std::string* MoveFolderRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.resourcemanager.v2.MoveFolderRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MoveFolderRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.resourcemanager.v2.MoveFolderRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MoveFolderRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.resourcemanager.v2.MoveFolderRequest.name)
}

// string destination_parent = 2;
inline void MoveFolderRequest::clear_destination_parent() {
  destination_parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MoveFolderRequest::destination_parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.MoveFolderRequest.destination_parent)
  return destination_parent_.GetNoArena();
}
inline void MoveFolderRequest::set_destination_parent(const ::std::string& value) {
  
  destination_parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.resourcemanager.v2.MoveFolderRequest.destination_parent)
}
#if LANG_CXX11
inline void MoveFolderRequest::set_destination_parent(::std::string&& value) {
  
  destination_parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.resourcemanager.v2.MoveFolderRequest.destination_parent)
}
#endif
inline void MoveFolderRequest::set_destination_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  destination_parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.resourcemanager.v2.MoveFolderRequest.destination_parent)
}
inline void MoveFolderRequest::set_destination_parent(const char* value, size_t size) {
  
  destination_parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.resourcemanager.v2.MoveFolderRequest.destination_parent)
}
inline ::std::string* MoveFolderRequest::mutable_destination_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.resourcemanager.v2.MoveFolderRequest.destination_parent)
  return destination_parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MoveFolderRequest::release_destination_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.resourcemanager.v2.MoveFolderRequest.destination_parent)
  
  return destination_parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MoveFolderRequest::set_allocated_destination_parent(::std::string* destination_parent) {
  if (destination_parent != NULL) {
    
  } else {
    
  }
  destination_parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination_parent);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.resourcemanager.v2.MoveFolderRequest.destination_parent)
}

// -------------------------------------------------------------------

// UpdateFolderRequest

// .google.cloud.resourcemanager.v2.Folder folder = 1;
inline bool UpdateFolderRequest::has_folder() const {
  return this != internal_default_instance() && folder_ != NULL;
}
inline void UpdateFolderRequest::clear_folder() {
  if (GetArenaNoVirtual() == NULL && folder_ != NULL) {
    delete folder_;
  }
  folder_ = NULL;
}
inline const ::google::cloud::resourcemanager::v2::Folder& UpdateFolderRequest::_internal_folder() const {
  return *folder_;
}
inline const ::google::cloud::resourcemanager::v2::Folder& UpdateFolderRequest::folder() const {
  const ::google::cloud::resourcemanager::v2::Folder* p = folder_;
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.UpdateFolderRequest.folder)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::resourcemanager::v2::Folder*>(
      &::google::cloud::resourcemanager::v2::_Folder_default_instance_);
}
inline ::google::cloud::resourcemanager::v2::Folder* UpdateFolderRequest::release_folder() {
  // @@protoc_insertion_point(field_release:google.cloud.resourcemanager.v2.UpdateFolderRequest.folder)
  
  ::google::cloud::resourcemanager::v2::Folder* temp = folder_;
  folder_ = NULL;
  return temp;
}
inline ::google::cloud::resourcemanager::v2::Folder* UpdateFolderRequest::mutable_folder() {
  
  if (folder_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::resourcemanager::v2::Folder>(GetArenaNoVirtual());
    folder_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.resourcemanager.v2.UpdateFolderRequest.folder)
  return folder_;
}
inline void UpdateFolderRequest::set_allocated_folder(::google::cloud::resourcemanager::v2::Folder* folder) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete folder_;
  }
  if (folder) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      folder = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, folder, submessage_arena);
    }
    
  } else {
    
  }
  folder_ = folder;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.resourcemanager.v2.UpdateFolderRequest.folder)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateFolderRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline const ::google::protobuf::FieldMask& UpdateFolderRequest::_internal_update_mask() const {
  return *update_mask_;
}
inline const ::google::protobuf::FieldMask& UpdateFolderRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.UpdateFolderRequest.update_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateFolderRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.resourcemanager.v2.UpdateFolderRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateFolderRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::FieldMask>(GetArenaNoVirtual());
    update_mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.resourcemanager.v2.UpdateFolderRequest.update_mask)
  return update_mask_;
}
inline void UpdateFolderRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.resourcemanager.v2.UpdateFolderRequest.update_mask)
}

// -------------------------------------------------------------------

// DeleteFolderRequest

// string name = 1;
inline void DeleteFolderRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteFolderRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.DeleteFolderRequest.name)
  return name_.GetNoArena();
}
inline void DeleteFolderRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.resourcemanager.v2.DeleteFolderRequest.name)
}
#if LANG_CXX11
inline void DeleteFolderRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.resourcemanager.v2.DeleteFolderRequest.name)
}
#endif
inline void DeleteFolderRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.resourcemanager.v2.DeleteFolderRequest.name)
}
inline void DeleteFolderRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.resourcemanager.v2.DeleteFolderRequest.name)
}
inline ::std::string* DeleteFolderRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.resourcemanager.v2.DeleteFolderRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteFolderRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.resourcemanager.v2.DeleteFolderRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteFolderRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.resourcemanager.v2.DeleteFolderRequest.name)
}

// bool recursive_delete = 2;
inline void DeleteFolderRequest::clear_recursive_delete() {
  recursive_delete_ = false;
}
inline bool DeleteFolderRequest::recursive_delete() const {
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.DeleteFolderRequest.recursive_delete)
  return recursive_delete_;
}
inline void DeleteFolderRequest::set_recursive_delete(bool value) {
  
  recursive_delete_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.resourcemanager.v2.DeleteFolderRequest.recursive_delete)
}

// -------------------------------------------------------------------

// UndeleteFolderRequest

// string name = 1;
inline void UndeleteFolderRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UndeleteFolderRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.UndeleteFolderRequest.name)
  return name_.GetNoArena();
}
inline void UndeleteFolderRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.resourcemanager.v2.UndeleteFolderRequest.name)
}
#if LANG_CXX11
inline void UndeleteFolderRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.resourcemanager.v2.UndeleteFolderRequest.name)
}
#endif
inline void UndeleteFolderRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.resourcemanager.v2.UndeleteFolderRequest.name)
}
inline void UndeleteFolderRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.resourcemanager.v2.UndeleteFolderRequest.name)
}
inline ::std::string* UndeleteFolderRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.resourcemanager.v2.UndeleteFolderRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UndeleteFolderRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.resourcemanager.v2.UndeleteFolderRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UndeleteFolderRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.resourcemanager.v2.UndeleteFolderRequest.name)
}

// -------------------------------------------------------------------

// FolderOperation

// string display_name = 1;
inline void FolderOperation::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FolderOperation::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.FolderOperation.display_name)
  return display_name_.GetNoArena();
}
inline void FolderOperation::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.resourcemanager.v2.FolderOperation.display_name)
}
#if LANG_CXX11
inline void FolderOperation::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.resourcemanager.v2.FolderOperation.display_name)
}
#endif
inline void FolderOperation::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.resourcemanager.v2.FolderOperation.display_name)
}
inline void FolderOperation::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.resourcemanager.v2.FolderOperation.display_name)
}
inline ::std::string* FolderOperation::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.resourcemanager.v2.FolderOperation.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FolderOperation::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.resourcemanager.v2.FolderOperation.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FolderOperation::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.resourcemanager.v2.FolderOperation.display_name)
}

// .google.cloud.resourcemanager.v2.FolderOperation.OperationType operation_type = 2;
inline void FolderOperation::clear_operation_type() {
  operation_type_ = 0;
}
inline ::google::cloud::resourcemanager::v2::FolderOperation_OperationType FolderOperation::operation_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.FolderOperation.operation_type)
  return static_cast< ::google::cloud::resourcemanager::v2::FolderOperation_OperationType >(operation_type_);
}
inline void FolderOperation::set_operation_type(::google::cloud::resourcemanager::v2::FolderOperation_OperationType value) {
  
  operation_type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.resourcemanager.v2.FolderOperation.operation_type)
}

// string source_parent = 3;
inline void FolderOperation::clear_source_parent() {
  source_parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FolderOperation::source_parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.FolderOperation.source_parent)
  return source_parent_.GetNoArena();
}
inline void FolderOperation::set_source_parent(const ::std::string& value) {
  
  source_parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.resourcemanager.v2.FolderOperation.source_parent)
}
#if LANG_CXX11
inline void FolderOperation::set_source_parent(::std::string&& value) {
  
  source_parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.resourcemanager.v2.FolderOperation.source_parent)
}
#endif
inline void FolderOperation::set_source_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.resourcemanager.v2.FolderOperation.source_parent)
}
inline void FolderOperation::set_source_parent(const char* value, size_t size) {
  
  source_parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.resourcemanager.v2.FolderOperation.source_parent)
}
inline ::std::string* FolderOperation::mutable_source_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.resourcemanager.v2.FolderOperation.source_parent)
  return source_parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FolderOperation::release_source_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.resourcemanager.v2.FolderOperation.source_parent)
  
  return source_parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FolderOperation::set_allocated_source_parent(::std::string* source_parent) {
  if (source_parent != NULL) {
    
  } else {
    
  }
  source_parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_parent);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.resourcemanager.v2.FolderOperation.source_parent)
}

// string destination_parent = 4;
inline void FolderOperation::clear_destination_parent() {
  destination_parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FolderOperation::destination_parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.resourcemanager.v2.FolderOperation.destination_parent)
  return destination_parent_.GetNoArena();
}
inline void FolderOperation::set_destination_parent(const ::std::string& value) {
  
  destination_parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.resourcemanager.v2.FolderOperation.destination_parent)
}
#if LANG_CXX11
inline void FolderOperation::set_destination_parent(::std::string&& value) {
  
  destination_parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.resourcemanager.v2.FolderOperation.destination_parent)
}
#endif
inline void FolderOperation::set_destination_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  destination_parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.resourcemanager.v2.FolderOperation.destination_parent)
}
inline void FolderOperation::set_destination_parent(const char* value, size_t size) {
  
  destination_parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.resourcemanager.v2.FolderOperation.destination_parent)
}
inline ::std::string* FolderOperation::mutable_destination_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.resourcemanager.v2.FolderOperation.destination_parent)
  return destination_parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FolderOperation::release_destination_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.resourcemanager.v2.FolderOperation.destination_parent)
  
  return destination_parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FolderOperation::set_allocated_destination_parent(::std::string* destination_parent) {
  if (destination_parent != NULL) {
    
  } else {
    
  }
  destination_parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination_parent);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.resourcemanager.v2.FolderOperation.destination_parent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace resourcemanager
}  // namespace cloud
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::cloud::resourcemanager::v2::Folder_LifecycleState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::resourcemanager::v2::Folder_LifecycleState>() {
  return ::google::cloud::resourcemanager::v2::Folder_LifecycleState_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::resourcemanager::v2::FolderOperation_OperationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::resourcemanager::v2::FolderOperation_OperationType>() {
  return ::google::cloud::resourcemanager::v2::FolderOperation_OperationType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fcloud_2fresourcemanager_2fv2_2ffolders_2eproto
