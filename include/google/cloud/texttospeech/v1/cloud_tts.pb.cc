// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/texttospeech/v1/cloud_tts.proto

#include "google/cloud/texttospeech/v1/cloud_tts.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AudioConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SynthesisInput;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Voice;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VoiceSelectionParams;
}  // namespace protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto
namespace google {
namespace cloud {
namespace texttospeech {
namespace v1 {
class ListVoicesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListVoicesRequest>
      _instance;
} _ListVoicesRequest_default_instance_;
class ListVoicesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListVoicesResponse>
      _instance;
} _ListVoicesResponse_default_instance_;
class VoiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Voice>
      _instance;
} _Voice_default_instance_;
class SynthesizeSpeechRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SynthesizeSpeechRequest>
      _instance;
} _SynthesizeSpeechRequest_default_instance_;
class SynthesisInputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SynthesisInput>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr ssml_;
} _SynthesisInput_default_instance_;
class VoiceSelectionParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VoiceSelectionParams>
      _instance;
} _VoiceSelectionParams_default_instance_;
class AudioConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AudioConfig>
      _instance;
} _AudioConfig_default_instance_;
class SynthesizeSpeechResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SynthesizeSpeechResponse>
      _instance;
} _SynthesizeSpeechResponse_default_instance_;
}  // namespace v1
}  // namespace texttospeech
}  // namespace cloud
}  // namespace google
namespace protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto {
static void InitDefaultsListVoicesRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::texttospeech::v1::_ListVoicesRequest_default_instance_;
    new (ptr) ::google::cloud::texttospeech::v1::ListVoicesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::texttospeech::v1::ListVoicesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListVoicesRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListVoicesRequest}, {}};

static void InitDefaultsListVoicesResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::texttospeech::v1::_ListVoicesResponse_default_instance_;
    new (ptr) ::google::cloud::texttospeech::v1::ListVoicesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::texttospeech::v1::ListVoicesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListVoicesResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListVoicesResponse}, {
      &protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::scc_info_Voice.base,}};

static void InitDefaultsVoice() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::texttospeech::v1::_Voice_default_instance_;
    new (ptr) ::google::cloud::texttospeech::v1::Voice();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::texttospeech::v1::Voice::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Voice =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVoice}, {}};

static void InitDefaultsSynthesizeSpeechRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::texttospeech::v1::_SynthesizeSpeechRequest_default_instance_;
    new (ptr) ::google::cloud::texttospeech::v1::SynthesizeSpeechRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::texttospeech::v1::SynthesizeSpeechRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_SynthesizeSpeechRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsSynthesizeSpeechRequest}, {
      &protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::scc_info_SynthesisInput.base,
      &protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::scc_info_VoiceSelectionParams.base,
      &protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::scc_info_AudioConfig.base,}};

static void InitDefaultsSynthesisInput() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::texttospeech::v1::_SynthesisInput_default_instance_;
    new (ptr) ::google::cloud::texttospeech::v1::SynthesisInput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::texttospeech::v1::SynthesisInput::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SynthesisInput =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSynthesisInput}, {}};

static void InitDefaultsVoiceSelectionParams() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::texttospeech::v1::_VoiceSelectionParams_default_instance_;
    new (ptr) ::google::cloud::texttospeech::v1::VoiceSelectionParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::texttospeech::v1::VoiceSelectionParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VoiceSelectionParams =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVoiceSelectionParams}, {}};

static void InitDefaultsAudioConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::texttospeech::v1::_AudioConfig_default_instance_;
    new (ptr) ::google::cloud::texttospeech::v1::AudioConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::texttospeech::v1::AudioConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AudioConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAudioConfig}, {}};

static void InitDefaultsSynthesizeSpeechResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::texttospeech::v1::_SynthesizeSpeechResponse_default_instance_;
    new (ptr) ::google::cloud::texttospeech::v1::SynthesizeSpeechResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::texttospeech::v1::SynthesizeSpeechResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SynthesizeSpeechResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSynthesizeSpeechResponse}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ListVoicesRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListVoicesResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Voice.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SynthesizeSpeechRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SynthesisInput.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VoiceSelectionParams.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AudioConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SynthesizeSpeechResponse.base);
}

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::texttospeech::v1::ListVoicesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::texttospeech::v1::ListVoicesRequest, language_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::texttospeech::v1::ListVoicesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::texttospeech::v1::ListVoicesResponse, voices_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::texttospeech::v1::Voice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::texttospeech::v1::Voice, language_codes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::texttospeech::v1::Voice, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::texttospeech::v1::Voice, ssml_gender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::texttospeech::v1::Voice, natural_sample_rate_hertz_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::texttospeech::v1::SynthesizeSpeechRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::texttospeech::v1::SynthesizeSpeechRequest, input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::texttospeech::v1::SynthesizeSpeechRequest, voice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::texttospeech::v1::SynthesizeSpeechRequest, audio_config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::texttospeech::v1::SynthesisInput, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::texttospeech::v1::SynthesisInput, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::cloud::texttospeech::v1::SynthesisInputDefaultTypeInternal, text_),
  offsetof(::google::cloud::texttospeech::v1::SynthesisInputDefaultTypeInternal, ssml_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::texttospeech::v1::SynthesisInput, input_source_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::texttospeech::v1::VoiceSelectionParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::texttospeech::v1::VoiceSelectionParams, language_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::texttospeech::v1::VoiceSelectionParams, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::texttospeech::v1::VoiceSelectionParams, ssml_gender_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::texttospeech::v1::AudioConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::texttospeech::v1::AudioConfig, audio_encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::texttospeech::v1::AudioConfig, speaking_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::texttospeech::v1::AudioConfig, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::texttospeech::v1::AudioConfig, volume_gain_db_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::texttospeech::v1::AudioConfig, sample_rate_hertz_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::texttospeech::v1::SynthesizeSpeechResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::texttospeech::v1::SynthesizeSpeechResponse, audio_content_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::cloud::texttospeech::v1::ListVoicesRequest)},
  { 6, -1, sizeof(::google::cloud::texttospeech::v1::ListVoicesResponse)},
  { 12, -1, sizeof(::google::cloud::texttospeech::v1::Voice)},
  { 21, -1, sizeof(::google::cloud::texttospeech::v1::SynthesizeSpeechRequest)},
  { 29, -1, sizeof(::google::cloud::texttospeech::v1::SynthesisInput)},
  { 37, -1, sizeof(::google::cloud::texttospeech::v1::VoiceSelectionParams)},
  { 45, -1, sizeof(::google::cloud::texttospeech::v1::AudioConfig)},
  { 55, -1, sizeof(::google::cloud::texttospeech::v1::SynthesizeSpeechResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::texttospeech::v1::_ListVoicesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::texttospeech::v1::_ListVoicesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::texttospeech::v1::_Voice_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::texttospeech::v1::_SynthesizeSpeechRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::texttospeech::v1::_SynthesisInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::texttospeech::v1::_VoiceSelectionParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::texttospeech::v1::_AudioConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::texttospeech::v1::_SynthesizeSpeechResponse_default_instance_),
};

static void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "google/cloud/texttospeech/v1/cloud_tts.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

static void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

static void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n,google/cloud/texttospeech/v1/cloud_tts"
      ".proto\022\034google.cloud.texttospeech.v1\032\034go"
      "ogle/api/annotations.proto\"*\n\021ListVoices"
      "Request\022\025\n\rlanguage_code\030\001 \001(\t\"I\n\022ListVo"
      "icesResponse\0223\n\006voices\030\001 \003(\0132#.google.cl"
      "oud.texttospeech.v1.Voice\"\224\001\n\005Voice\022\026\n\016l"
      "anguage_codes\030\001 \003(\t\022\014\n\004name\030\002 \001(\t\022B\n\013ssm"
      "l_gender\030\003 \001(\0162-.google.cloud.texttospee"
      "ch.v1.SsmlVoiceGender\022!\n\031natural_sample_"
      "rate_hertz\030\004 \001(\005\"\332\001\n\027SynthesizeSpeechReq"
      "uest\022;\n\005input\030\001 \001(\0132,.google.cloud.textt"
      "ospeech.v1.SynthesisInput\022A\n\005voice\030\002 \001(\013"
      "22.google.cloud.texttospeech.v1.VoiceSel"
      "ectionParams\022\?\n\014audio_config\030\003 \001(\0132).goo"
      "gle.cloud.texttospeech.v1.AudioConfig\"@\n"
      "\016SynthesisInput\022\016\n\004text\030\001 \001(\tH\000\022\016\n\004ssml\030"
      "\002 \001(\tH\000B\016\n\014input_source\"\177\n\024VoiceSelectio"
      "nParams\022\025\n\rlanguage_code\030\001 \001(\t\022\014\n\004name\030\002"
      " \001(\t\022B\n\013ssml_gender\030\003 \001(\0162-.google.cloud"
      ".texttospeech.v1.SsmlVoiceGender\"\253\001\n\013Aud"
      "ioConfig\022C\n\016audio_encoding\030\001 \001(\0162+.googl"
      "e.cloud.texttospeech.v1.AudioEncoding\022\025\n"
      "\rspeaking_rate\030\002 \001(\001\022\r\n\005pitch\030\003 \001(\001\022\026\n\016v"
      "olume_gain_db\030\004 \001(\001\022\031\n\021sample_rate_hertz"
      "\030\005 \001(\005\"1\n\030SynthesizeSpeechResponse\022\025\n\rau"
      "dio_content\030\001 \001(\014*W\n\017SsmlVoiceGender\022!\n\035"
      "SSML_VOICE_GENDER_UNSPECIFIED\020\000\022\010\n\004MALE\020"
      "\001\022\n\n\006FEMALE\020\002\022\013\n\007NEUTRAL\020\003*T\n\rAudioEncod"
      "ing\022\036\n\032AUDIO_ENCODING_UNSPECIFIED\020\000\022\014\n\010L"
      "INEAR16\020\001\022\007\n\003MP3\020\002\022\014\n\010OGG_OPUS\020\0032\270\002\n\014Tex"
      "tToSpeech\022\203\001\n\nListVoices\022/.google.cloud."
      "texttospeech.v1.ListVoicesRequest\0320.goog"
      "le.cloud.texttospeech.v1.ListVoicesRespo"
      "nse\"\022\202\323\344\223\002\014\022\n/v1/voices\022\241\001\n\020SynthesizeSp"
      "eech\0225.google.cloud.texttospeech.v1.Synt"
      "hesizeSpeechRequest\0326.google.cloud.textt"
      "ospeech.v1.SynthesizeSpeechResponse\"\036\202\323\344"
      "\223\002\030\"\023/v1/text:synthesize:\001*B\302\001\n com.goog"
      "le.cloud.texttospeech.v1B\021TextToSpeechPr"
      "otoP\001ZHgoogle.golang.org/genproto/google"
      "apis/cloud/texttospeech/v1;texttospeech\370"
      "\001\001\252\002\034Google.Cloud.TextToSpeech.V1\312\002\034Goog"
      "le\\Cloud\\TextToSpeech\\V1b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1712);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/cloud/texttospeech/v1/cloud_tts.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto
namespace google {
namespace cloud {
namespace texttospeech {
namespace v1 {
const ::google::protobuf::EnumDescriptor* SsmlVoiceGender_descriptor() {
  protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::file_level_enum_descriptors[0];
}
bool SsmlVoiceGender_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AudioEncoding_descriptor() {
  protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::file_level_enum_descriptors[1];
}
bool AudioEncoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ListVoicesRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListVoicesRequest::kLanguageCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListVoicesRequest::ListVoicesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::scc_info_ListVoicesRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.texttospeech.v1.ListVoicesRequest)
}
ListVoicesRequest::ListVoicesRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::scc_info_ListVoicesRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.texttospeech.v1.ListVoicesRequest)
}
ListVoicesRequest::ListVoicesRequest(const ListVoicesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.language_code().size() > 0) {
    language_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.texttospeech.v1.ListVoicesRequest)
}

void ListVoicesRequest::SharedCtor() {
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ListVoicesRequest::~ListVoicesRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.texttospeech.v1.ListVoicesRequest)
  SharedDtor();
}

void ListVoicesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListVoicesRequest::ArenaDtor(void* object) {
  ListVoicesRequest* _this = reinterpret_cast< ListVoicesRequest* >(object);
  (void)_this;
}
void ListVoicesRequest::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void ListVoicesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ListVoicesRequest::descriptor() {
  ::protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListVoicesRequest& ListVoicesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::scc_info_ListVoicesRequest.base);
  return *internal_default_instance();
}


void ListVoicesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.texttospeech.v1.ListVoicesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  language_code_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool ListVoicesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.texttospeech.v1.ListVoicesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string language_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language_code().data(), static_cast<int>(this->language_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.texttospeech.v1.ListVoicesRequest.language_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.texttospeech.v1.ListVoicesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.texttospeech.v1.ListVoicesRequest)
  return false;
#undef DO_
}

void ListVoicesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.texttospeech.v1.ListVoicesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string language_code = 1;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.texttospeech.v1.ListVoicesRequest.language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->language_code(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.texttospeech.v1.ListVoicesRequest)
}

::google::protobuf::uint8* ListVoicesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.texttospeech.v1.ListVoicesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string language_code = 1;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.texttospeech.v1.ListVoicesRequest.language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->language_code(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.texttospeech.v1.ListVoicesRequest)
  return target;
}

size_t ListVoicesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.texttospeech.v1.ListVoicesRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string language_code = 1;
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListVoicesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.texttospeech.v1.ListVoicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListVoicesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListVoicesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.texttospeech.v1.ListVoicesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.texttospeech.v1.ListVoicesRequest)
    MergeFrom(*source);
  }
}

void ListVoicesRequest::MergeFrom(const ListVoicesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.texttospeech.v1.ListVoicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.language_code().size() > 0) {
    set_language_code(from.language_code());
  }
}

void ListVoicesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.texttospeech.v1.ListVoicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListVoicesRequest::CopyFrom(const ListVoicesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.texttospeech.v1.ListVoicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListVoicesRequest::IsInitialized() const {
  return true;
}

void ListVoicesRequest::Swap(ListVoicesRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListVoicesRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ListVoicesRequest::UnsafeArenaSwap(ListVoicesRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListVoicesRequest::InternalSwap(ListVoicesRequest* other) {
  using std::swap;
  language_code_.Swap(&other->language_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ListVoicesRequest::GetMetadata() const {
  protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListVoicesResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListVoicesResponse::kVoicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListVoicesResponse::ListVoicesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::scc_info_ListVoicesResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.texttospeech.v1.ListVoicesResponse)
}
ListVoicesResponse::ListVoicesResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  voices_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::scc_info_ListVoicesResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.texttospeech.v1.ListVoicesResponse)
}
ListVoicesResponse::ListVoicesResponse(const ListVoicesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      voices_(from.voices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.texttospeech.v1.ListVoicesResponse)
}

void ListVoicesResponse::SharedCtor() {
}

ListVoicesResponse::~ListVoicesResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.texttospeech.v1.ListVoicesResponse)
  SharedDtor();
}

void ListVoicesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ListVoicesResponse::ArenaDtor(void* object) {
  ListVoicesResponse* _this = reinterpret_cast< ListVoicesResponse* >(object);
  (void)_this;
}
void ListVoicesResponse::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void ListVoicesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ListVoicesResponse::descriptor() {
  ::protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListVoicesResponse& ListVoicesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::scc_info_ListVoicesResponse.base);
  return *internal_default_instance();
}


void ListVoicesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.texttospeech.v1.ListVoicesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  voices_.Clear();
  _internal_metadata_.Clear();
}

bool ListVoicesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.texttospeech.v1.ListVoicesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.texttospeech.v1.Voice voices = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_voices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.texttospeech.v1.ListVoicesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.texttospeech.v1.ListVoicesResponse)
  return false;
#undef DO_
}

void ListVoicesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.texttospeech.v1.ListVoicesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.texttospeech.v1.Voice voices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->voices_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->voices(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.texttospeech.v1.ListVoicesResponse)
}

::google::protobuf::uint8* ListVoicesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.texttospeech.v1.ListVoicesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.texttospeech.v1.Voice voices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->voices_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->voices(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.texttospeech.v1.ListVoicesResponse)
  return target;
}

size_t ListVoicesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.texttospeech.v1.ListVoicesResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.texttospeech.v1.Voice voices = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->voices_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->voices(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListVoicesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.texttospeech.v1.ListVoicesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListVoicesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListVoicesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.texttospeech.v1.ListVoicesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.texttospeech.v1.ListVoicesResponse)
    MergeFrom(*source);
  }
}

void ListVoicesResponse::MergeFrom(const ListVoicesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.texttospeech.v1.ListVoicesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  voices_.MergeFrom(from.voices_);
}

void ListVoicesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.texttospeech.v1.ListVoicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListVoicesResponse::CopyFrom(const ListVoicesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.texttospeech.v1.ListVoicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListVoicesResponse::IsInitialized() const {
  return true;
}

void ListVoicesResponse::Swap(ListVoicesResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListVoicesResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ListVoicesResponse::UnsafeArenaSwap(ListVoicesResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListVoicesResponse::InternalSwap(ListVoicesResponse* other) {
  using std::swap;
  CastToBase(&voices_)->InternalSwap(CastToBase(&other->voices_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ListVoicesResponse::GetMetadata() const {
  protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Voice::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Voice::kLanguageCodesFieldNumber;
const int Voice::kNameFieldNumber;
const int Voice::kSsmlGenderFieldNumber;
const int Voice::kNaturalSampleRateHertzFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Voice::Voice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::scc_info_Voice.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.texttospeech.v1.Voice)
}
Voice::Voice(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  language_codes_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::scc_info_Voice.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.texttospeech.v1.Voice)
}
Voice::Voice(const Voice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      language_codes_(from.language_codes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  ::memcpy(&ssml_gender_, &from.ssml_gender_,
    static_cast<size_t>(reinterpret_cast<char*>(&natural_sample_rate_hertz_) -
    reinterpret_cast<char*>(&ssml_gender_)) + sizeof(natural_sample_rate_hertz_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.texttospeech.v1.Voice)
}

void Voice::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ssml_gender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&natural_sample_rate_hertz_) -
      reinterpret_cast<char*>(&ssml_gender_)) + sizeof(natural_sample_rate_hertz_));
}

Voice::~Voice() {
  // @@protoc_insertion_point(destructor:google.cloud.texttospeech.v1.Voice)
  SharedDtor();
}

void Voice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Voice::ArenaDtor(void* object) {
  Voice* _this = reinterpret_cast< Voice* >(object);
  (void)_this;
}
void Voice::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void Voice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Voice::descriptor() {
  ::protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Voice& Voice::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::scc_info_Voice.base);
  return *internal_default_instance();
}


void Voice::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.texttospeech.v1.Voice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  language_codes_.Clear();
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&ssml_gender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&natural_sample_rate_hertz_) -
      reinterpret_cast<char*>(&ssml_gender_)) + sizeof(natural_sample_rate_hertz_));
  _internal_metadata_.Clear();
}

bool Voice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.texttospeech.v1.Voice)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string language_codes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_language_codes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language_codes(this->language_codes_size() - 1).data(),
            static_cast<int>(this->language_codes(this->language_codes_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.texttospeech.v1.Voice.language_codes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.texttospeech.v1.Voice.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.texttospeech.v1.SsmlVoiceGender ssml_gender = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ssml_gender(static_cast< ::google::cloud::texttospeech::v1::SsmlVoiceGender >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 natural_sample_rate_hertz = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &natural_sample_rate_hertz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.texttospeech.v1.Voice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.texttospeech.v1.Voice)
  return false;
#undef DO_
}

void Voice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.texttospeech.v1.Voice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string language_codes = 1;
  for (int i = 0, n = this->language_codes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_codes(i).data(), static_cast<int>(this->language_codes(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.texttospeech.v1.Voice.language_codes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->language_codes(i), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.texttospeech.v1.Voice.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .google.cloud.texttospeech.v1.SsmlVoiceGender ssml_gender = 3;
  if (this->ssml_gender() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ssml_gender(), output);
  }

  // int32 natural_sample_rate_hertz = 4;
  if (this->natural_sample_rate_hertz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->natural_sample_rate_hertz(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.texttospeech.v1.Voice)
}

::google::protobuf::uint8* Voice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.texttospeech.v1.Voice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string language_codes = 1;
  for (int i = 0, n = this->language_codes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_codes(i).data(), static_cast<int>(this->language_codes(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.texttospeech.v1.Voice.language_codes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->language_codes(i), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.texttospeech.v1.Voice.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .google.cloud.texttospeech.v1.SsmlVoiceGender ssml_gender = 3;
  if (this->ssml_gender() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ssml_gender(), target);
  }

  // int32 natural_sample_rate_hertz = 4;
  if (this->natural_sample_rate_hertz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->natural_sample_rate_hertz(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.texttospeech.v1.Voice)
  return target;
}

size_t Voice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.texttospeech.v1.Voice)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string language_codes = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->language_codes_size());
  for (int i = 0, n = this->language_codes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->language_codes(i));
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.cloud.texttospeech.v1.SsmlVoiceGender ssml_gender = 3;
  if (this->ssml_gender() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ssml_gender());
  }

  // int32 natural_sample_rate_hertz = 4;
  if (this->natural_sample_rate_hertz() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->natural_sample_rate_hertz());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Voice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.texttospeech.v1.Voice)
  GOOGLE_DCHECK_NE(&from, this);
  const Voice* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Voice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.texttospeech.v1.Voice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.texttospeech.v1.Voice)
    MergeFrom(*source);
  }
}

void Voice::MergeFrom(const Voice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.texttospeech.v1.Voice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  language_codes_.MergeFrom(from.language_codes_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.ssml_gender() != 0) {
    set_ssml_gender(from.ssml_gender());
  }
  if (from.natural_sample_rate_hertz() != 0) {
    set_natural_sample_rate_hertz(from.natural_sample_rate_hertz());
  }
}

void Voice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.texttospeech.v1.Voice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Voice::CopyFrom(const Voice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.texttospeech.v1.Voice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Voice::IsInitialized() const {
  return true;
}

void Voice::Swap(Voice* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Voice* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Voice::UnsafeArenaSwap(Voice* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Voice::InternalSwap(Voice* other) {
  using std::swap;
  language_codes_.InternalSwap(CastToBase(&other->language_codes_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ssml_gender_, other->ssml_gender_);
  swap(natural_sample_rate_hertz_, other->natural_sample_rate_hertz_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Voice::GetMetadata() const {
  protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SynthesizeSpeechRequest::InitAsDefaultInstance() {
  ::google::cloud::texttospeech::v1::_SynthesizeSpeechRequest_default_instance_._instance.get_mutable()->input_ = const_cast< ::google::cloud::texttospeech::v1::SynthesisInput*>(
      ::google::cloud::texttospeech::v1::SynthesisInput::internal_default_instance());
  ::google::cloud::texttospeech::v1::_SynthesizeSpeechRequest_default_instance_._instance.get_mutable()->voice_ = const_cast< ::google::cloud::texttospeech::v1::VoiceSelectionParams*>(
      ::google::cloud::texttospeech::v1::VoiceSelectionParams::internal_default_instance());
  ::google::cloud::texttospeech::v1::_SynthesizeSpeechRequest_default_instance_._instance.get_mutable()->audio_config_ = const_cast< ::google::cloud::texttospeech::v1::AudioConfig*>(
      ::google::cloud::texttospeech::v1::AudioConfig::internal_default_instance());
}
void SynthesizeSpeechRequest::unsafe_arena_set_allocated_input(
    ::google::cloud::texttospeech::v1::SynthesisInput* input) {
  if (GetArenaNoVirtual() == NULL) {
    delete input_;
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.texttospeech.v1.SynthesizeSpeechRequest.input)
}
void SynthesizeSpeechRequest::unsafe_arena_set_allocated_voice(
    ::google::cloud::texttospeech::v1::VoiceSelectionParams* voice) {
  if (GetArenaNoVirtual() == NULL) {
    delete voice_;
  }
  voice_ = voice;
  if (voice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.texttospeech.v1.SynthesizeSpeechRequest.voice)
}
void SynthesizeSpeechRequest::unsafe_arena_set_allocated_audio_config(
    ::google::cloud::texttospeech::v1::AudioConfig* audio_config) {
  if (GetArenaNoVirtual() == NULL) {
    delete audio_config_;
  }
  audio_config_ = audio_config;
  if (audio_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.texttospeech.v1.SynthesizeSpeechRequest.audio_config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SynthesizeSpeechRequest::kInputFieldNumber;
const int SynthesizeSpeechRequest::kVoiceFieldNumber;
const int SynthesizeSpeechRequest::kAudioConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SynthesizeSpeechRequest::SynthesizeSpeechRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::scc_info_SynthesizeSpeechRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.texttospeech.v1.SynthesizeSpeechRequest)
}
SynthesizeSpeechRequest::SynthesizeSpeechRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::scc_info_SynthesizeSpeechRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.texttospeech.v1.SynthesizeSpeechRequest)
}
SynthesizeSpeechRequest::SynthesizeSpeechRequest(const SynthesizeSpeechRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_input()) {
    input_ = new ::google::cloud::texttospeech::v1::SynthesisInput(*from.input_);
  } else {
    input_ = NULL;
  }
  if (from.has_voice()) {
    voice_ = new ::google::cloud::texttospeech::v1::VoiceSelectionParams(*from.voice_);
  } else {
    voice_ = NULL;
  }
  if (from.has_audio_config()) {
    audio_config_ = new ::google::cloud::texttospeech::v1::AudioConfig(*from.audio_config_);
  } else {
    audio_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.texttospeech.v1.SynthesizeSpeechRequest)
}

void SynthesizeSpeechRequest::SharedCtor() {
  ::memset(&input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_config_) -
      reinterpret_cast<char*>(&input_)) + sizeof(audio_config_));
}

SynthesizeSpeechRequest::~SynthesizeSpeechRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.texttospeech.v1.SynthesizeSpeechRequest)
  SharedDtor();
}

void SynthesizeSpeechRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete voice_;
  if (this != internal_default_instance()) delete audio_config_;
}

void SynthesizeSpeechRequest::ArenaDtor(void* object) {
  SynthesizeSpeechRequest* _this = reinterpret_cast< SynthesizeSpeechRequest* >(object);
  (void)_this;
}
void SynthesizeSpeechRequest::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void SynthesizeSpeechRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SynthesizeSpeechRequest::descriptor() {
  ::protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SynthesizeSpeechRequest& SynthesizeSpeechRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::scc_info_SynthesizeSpeechRequest.base);
  return *internal_default_instance();
}


void SynthesizeSpeechRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.texttospeech.v1.SynthesizeSpeechRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && input_ != NULL) {
    delete input_;
  }
  input_ = NULL;
  if (GetArenaNoVirtual() == NULL && voice_ != NULL) {
    delete voice_;
  }
  voice_ = NULL;
  if (GetArenaNoVirtual() == NULL && audio_config_ != NULL) {
    delete audio_config_;
  }
  audio_config_ = NULL;
  _internal_metadata_.Clear();
}

bool SynthesizeSpeechRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.texttospeech.v1.SynthesizeSpeechRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.texttospeech.v1.SynthesisInput input = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.texttospeech.v1.VoiceSelectionParams voice = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_voice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.texttospeech.v1.AudioConfig audio_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_audio_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.texttospeech.v1.SynthesizeSpeechRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.texttospeech.v1.SynthesizeSpeechRequest)
  return false;
#undef DO_
}

void SynthesizeSpeechRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.texttospeech.v1.SynthesizeSpeechRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.texttospeech.v1.SynthesisInput input = 1;
  if (this->has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_input(), output);
  }

  // .google.cloud.texttospeech.v1.VoiceSelectionParams voice = 2;
  if (this->has_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_voice(), output);
  }

  // .google.cloud.texttospeech.v1.AudioConfig audio_config = 3;
  if (this->has_audio_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_audio_config(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.texttospeech.v1.SynthesizeSpeechRequest)
}

::google::protobuf::uint8* SynthesizeSpeechRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.texttospeech.v1.SynthesizeSpeechRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.texttospeech.v1.SynthesisInput input = 1;
  if (this->has_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_input(), deterministic, target);
  }

  // .google.cloud.texttospeech.v1.VoiceSelectionParams voice = 2;
  if (this->has_voice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_voice(), deterministic, target);
  }

  // .google.cloud.texttospeech.v1.AudioConfig audio_config = 3;
  if (this->has_audio_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_audio_config(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.texttospeech.v1.SynthesizeSpeechRequest)
  return target;
}

size_t SynthesizeSpeechRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.texttospeech.v1.SynthesizeSpeechRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.cloud.texttospeech.v1.SynthesisInput input = 1;
  if (this->has_input()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .google.cloud.texttospeech.v1.VoiceSelectionParams voice = 2;
  if (this->has_voice()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *voice_);
  }

  // .google.cloud.texttospeech.v1.AudioConfig audio_config = 3;
  if (this->has_audio_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *audio_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SynthesizeSpeechRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.texttospeech.v1.SynthesizeSpeechRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SynthesizeSpeechRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SynthesizeSpeechRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.texttospeech.v1.SynthesizeSpeechRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.texttospeech.v1.SynthesizeSpeechRequest)
    MergeFrom(*source);
  }
}

void SynthesizeSpeechRequest::MergeFrom(const SynthesizeSpeechRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.texttospeech.v1.SynthesizeSpeechRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_input()) {
    mutable_input()->::google::cloud::texttospeech::v1::SynthesisInput::MergeFrom(from.input());
  }
  if (from.has_voice()) {
    mutable_voice()->::google::cloud::texttospeech::v1::VoiceSelectionParams::MergeFrom(from.voice());
  }
  if (from.has_audio_config()) {
    mutable_audio_config()->::google::cloud::texttospeech::v1::AudioConfig::MergeFrom(from.audio_config());
  }
}

void SynthesizeSpeechRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.texttospeech.v1.SynthesizeSpeechRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynthesizeSpeechRequest::CopyFrom(const SynthesizeSpeechRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.texttospeech.v1.SynthesizeSpeechRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynthesizeSpeechRequest::IsInitialized() const {
  return true;
}

void SynthesizeSpeechRequest::Swap(SynthesizeSpeechRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SynthesizeSpeechRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SynthesizeSpeechRequest::UnsafeArenaSwap(SynthesizeSpeechRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SynthesizeSpeechRequest::InternalSwap(SynthesizeSpeechRequest* other) {
  using std::swap;
  swap(input_, other->input_);
  swap(voice_, other->voice_);
  swap(audio_config_, other->audio_config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SynthesizeSpeechRequest::GetMetadata() const {
  protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SynthesisInput::InitAsDefaultInstance() {
  ::google::cloud::texttospeech::v1::_SynthesisInput_default_instance_.text_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::google::cloud::texttospeech::v1::_SynthesisInput_default_instance_.ssml_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SynthesisInput::kTextFieldNumber;
const int SynthesisInput::kSsmlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SynthesisInput::SynthesisInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::scc_info_SynthesisInput.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.texttospeech.v1.SynthesisInput)
}
SynthesisInput::SynthesisInput(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::scc_info_SynthesisInput.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.texttospeech.v1.SynthesisInput)
}
SynthesisInput::SynthesisInput(const SynthesisInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_input_source();
  switch (from.input_source_case()) {
    case kText: {
      set_text(from.text());
      break;
    }
    case kSsml: {
      set_ssml(from.ssml());
      break;
    }
    case INPUT_SOURCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.texttospeech.v1.SynthesisInput)
}

void SynthesisInput::SharedCtor() {
  clear_has_input_source();
}

SynthesisInput::~SynthesisInput() {
  // @@protoc_insertion_point(destructor:google.cloud.texttospeech.v1.SynthesisInput)
  SharedDtor();
}

void SynthesisInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (has_input_source()) {
    clear_input_source();
  }
}

void SynthesisInput::ArenaDtor(void* object) {
  SynthesisInput* _this = reinterpret_cast< SynthesisInput* >(object);
  (void)_this;
}
void SynthesisInput::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void SynthesisInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SynthesisInput::descriptor() {
  ::protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SynthesisInput& SynthesisInput::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::scc_info_SynthesisInput.base);
  return *internal_default_instance();
}


void SynthesisInput::clear_input_source() {
// @@protoc_insertion_point(one_of_clear_start:google.cloud.texttospeech.v1.SynthesisInput)
  switch (input_source_case()) {
    case kText: {
      input_source_.text_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kSsml: {
      input_source_.ssml_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case INPUT_SOURCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INPUT_SOURCE_NOT_SET;
}


void SynthesisInput::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.texttospeech.v1.SynthesisInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_input_source();
  _internal_metadata_.Clear();
}

bool SynthesisInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.texttospeech.v1.SynthesisInput)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.texttospeech.v1.SynthesisInput.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ssml = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ssml()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ssml().data(), static_cast<int>(this->ssml().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.texttospeech.v1.SynthesisInput.ssml"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.texttospeech.v1.SynthesisInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.texttospeech.v1.SynthesisInput)
  return false;
#undef DO_
}

void SynthesisInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.texttospeech.v1.SynthesisInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.texttospeech.v1.SynthesisInput.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // string ssml = 2;
  if (has_ssml()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ssml().data(), static_cast<int>(this->ssml().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.texttospeech.v1.SynthesisInput.ssml");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ssml(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.texttospeech.v1.SynthesisInput)
}

::google::protobuf::uint8* SynthesisInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.texttospeech.v1.SynthesisInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.texttospeech.v1.SynthesisInput.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // string ssml = 2;
  if (has_ssml()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ssml().data(), static_cast<int>(this->ssml().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.texttospeech.v1.SynthesisInput.ssml");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ssml(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.texttospeech.v1.SynthesisInput)
  return target;
}

size_t SynthesisInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.texttospeech.v1.SynthesisInput)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (input_source_case()) {
    // string text = 1;
    case kText: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
      break;
    }
    // string ssml = 2;
    case kSsml: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ssml());
      break;
    }
    case INPUT_SOURCE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SynthesisInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.texttospeech.v1.SynthesisInput)
  GOOGLE_DCHECK_NE(&from, this);
  const SynthesisInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SynthesisInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.texttospeech.v1.SynthesisInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.texttospeech.v1.SynthesisInput)
    MergeFrom(*source);
  }
}

void SynthesisInput::MergeFrom(const SynthesisInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.texttospeech.v1.SynthesisInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.input_source_case()) {
    case kText: {
      set_text(from.text());
      break;
    }
    case kSsml: {
      set_ssml(from.ssml());
      break;
    }
    case INPUT_SOURCE_NOT_SET: {
      break;
    }
  }
}

void SynthesisInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.texttospeech.v1.SynthesisInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynthesisInput::CopyFrom(const SynthesisInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.texttospeech.v1.SynthesisInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynthesisInput::IsInitialized() const {
  return true;
}

void SynthesisInput::Swap(SynthesisInput* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SynthesisInput* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SynthesisInput::UnsafeArenaSwap(SynthesisInput* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SynthesisInput::InternalSwap(SynthesisInput* other) {
  using std::swap;
  swap(input_source_, other->input_source_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SynthesisInput::GetMetadata() const {
  protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VoiceSelectionParams::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoiceSelectionParams::kLanguageCodeFieldNumber;
const int VoiceSelectionParams::kNameFieldNumber;
const int VoiceSelectionParams::kSsmlGenderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoiceSelectionParams::VoiceSelectionParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::scc_info_VoiceSelectionParams.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.texttospeech.v1.VoiceSelectionParams)
}
VoiceSelectionParams::VoiceSelectionParams(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::scc_info_VoiceSelectionParams.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.texttospeech.v1.VoiceSelectionParams)
}
VoiceSelectionParams::VoiceSelectionParams(const VoiceSelectionParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.language_code().size() > 0) {
    language_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code(),
      GetArenaNoVirtual());
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  ssml_gender_ = from.ssml_gender_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.texttospeech.v1.VoiceSelectionParams)
}

void VoiceSelectionParams::SharedCtor() {
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ssml_gender_ = 0;
}

VoiceSelectionParams::~VoiceSelectionParams() {
  // @@protoc_insertion_point(destructor:google.cloud.texttospeech.v1.VoiceSelectionParams)
  SharedDtor();
}

void VoiceSelectionParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VoiceSelectionParams::ArenaDtor(void* object) {
  VoiceSelectionParams* _this = reinterpret_cast< VoiceSelectionParams* >(object);
  (void)_this;
}
void VoiceSelectionParams::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void VoiceSelectionParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VoiceSelectionParams::descriptor() {
  ::protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoiceSelectionParams& VoiceSelectionParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::scc_info_VoiceSelectionParams.base);
  return *internal_default_instance();
}


void VoiceSelectionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.texttospeech.v1.VoiceSelectionParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  language_code_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ssml_gender_ = 0;
  _internal_metadata_.Clear();
}

bool VoiceSelectionParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.texttospeech.v1.VoiceSelectionParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string language_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language_code().data(), static_cast<int>(this->language_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.texttospeech.v1.VoiceSelectionParams.language_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.texttospeech.v1.VoiceSelectionParams.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.texttospeech.v1.SsmlVoiceGender ssml_gender = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ssml_gender(static_cast< ::google::cloud::texttospeech::v1::SsmlVoiceGender >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.texttospeech.v1.VoiceSelectionParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.texttospeech.v1.VoiceSelectionParams)
  return false;
#undef DO_
}

void VoiceSelectionParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.texttospeech.v1.VoiceSelectionParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string language_code = 1;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.texttospeech.v1.VoiceSelectionParams.language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->language_code(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.texttospeech.v1.VoiceSelectionParams.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .google.cloud.texttospeech.v1.SsmlVoiceGender ssml_gender = 3;
  if (this->ssml_gender() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ssml_gender(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.texttospeech.v1.VoiceSelectionParams)
}

::google::protobuf::uint8* VoiceSelectionParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.texttospeech.v1.VoiceSelectionParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string language_code = 1;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.texttospeech.v1.VoiceSelectionParams.language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->language_code(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.texttospeech.v1.VoiceSelectionParams.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .google.cloud.texttospeech.v1.SsmlVoiceGender ssml_gender = 3;
  if (this->ssml_gender() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ssml_gender(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.texttospeech.v1.VoiceSelectionParams)
  return target;
}

size_t VoiceSelectionParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.texttospeech.v1.VoiceSelectionParams)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string language_code = 1;
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language_code());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.cloud.texttospeech.v1.SsmlVoiceGender ssml_gender = 3;
  if (this->ssml_gender() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ssml_gender());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoiceSelectionParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.texttospeech.v1.VoiceSelectionParams)
  GOOGLE_DCHECK_NE(&from, this);
  const VoiceSelectionParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoiceSelectionParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.texttospeech.v1.VoiceSelectionParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.texttospeech.v1.VoiceSelectionParams)
    MergeFrom(*source);
  }
}

void VoiceSelectionParams::MergeFrom(const VoiceSelectionParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.texttospeech.v1.VoiceSelectionParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.language_code().size() > 0) {
    set_language_code(from.language_code());
  }
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.ssml_gender() != 0) {
    set_ssml_gender(from.ssml_gender());
  }
}

void VoiceSelectionParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.texttospeech.v1.VoiceSelectionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoiceSelectionParams::CopyFrom(const VoiceSelectionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.texttospeech.v1.VoiceSelectionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceSelectionParams::IsInitialized() const {
  return true;
}

void VoiceSelectionParams::Swap(VoiceSelectionParams* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    VoiceSelectionParams* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void VoiceSelectionParams::UnsafeArenaSwap(VoiceSelectionParams* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void VoiceSelectionParams::InternalSwap(VoiceSelectionParams* other) {
  using std::swap;
  language_code_.Swap(&other->language_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ssml_gender_, other->ssml_gender_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VoiceSelectionParams::GetMetadata() const {
  protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AudioConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioConfig::kAudioEncodingFieldNumber;
const int AudioConfig::kSpeakingRateFieldNumber;
const int AudioConfig::kPitchFieldNumber;
const int AudioConfig::kVolumeGainDbFieldNumber;
const int AudioConfig::kSampleRateHertzFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioConfig::AudioConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::scc_info_AudioConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.texttospeech.v1.AudioConfig)
}
AudioConfig::AudioConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::scc_info_AudioConfig.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.texttospeech.v1.AudioConfig)
}
AudioConfig::AudioConfig(const AudioConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speaking_rate_, &from.speaking_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_gain_db_) -
    reinterpret_cast<char*>(&speaking_rate_)) + sizeof(volume_gain_db_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.texttospeech.v1.AudioConfig)
}

void AudioConfig::SharedCtor() {
  ::memset(&speaking_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_gain_db_) -
      reinterpret_cast<char*>(&speaking_rate_)) + sizeof(volume_gain_db_));
}

AudioConfig::~AudioConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.texttospeech.v1.AudioConfig)
  SharedDtor();
}

void AudioConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void AudioConfig::ArenaDtor(void* object) {
  AudioConfig* _this = reinterpret_cast< AudioConfig* >(object);
  (void)_this;
}
void AudioConfig::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void AudioConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AudioConfig::descriptor() {
  ::protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AudioConfig& AudioConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::scc_info_AudioConfig.base);
  return *internal_default_instance();
}


void AudioConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.texttospeech.v1.AudioConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&speaking_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_gain_db_) -
      reinterpret_cast<char*>(&speaking_rate_)) + sizeof(volume_gain_db_));
  _internal_metadata_.Clear();
}

bool AudioConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.texttospeech.v1.AudioConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.texttospeech.v1.AudioEncoding audio_encoding = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_audio_encoding(static_cast< ::google::cloud::texttospeech::v1::AudioEncoding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double speaking_rate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speaking_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pitch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double volume_gain_db = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_gain_db_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sample_rate_hertz = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_rate_hertz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.texttospeech.v1.AudioConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.texttospeech.v1.AudioConfig)
  return false;
#undef DO_
}

void AudioConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.texttospeech.v1.AudioConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.texttospeech.v1.AudioEncoding audio_encoding = 1;
  if (this->audio_encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->audio_encoding(), output);
  }

  // double speaking_rate = 2;
  if (this->speaking_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->speaking_rate(), output);
  }

  // double pitch = 3;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->pitch(), output);
  }

  // double volume_gain_db = 4;
  if (this->volume_gain_db() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->volume_gain_db(), output);
  }

  // int32 sample_rate_hertz = 5;
  if (this->sample_rate_hertz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sample_rate_hertz(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.texttospeech.v1.AudioConfig)
}

::google::protobuf::uint8* AudioConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.texttospeech.v1.AudioConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.texttospeech.v1.AudioEncoding audio_encoding = 1;
  if (this->audio_encoding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->audio_encoding(), target);
  }

  // double speaking_rate = 2;
  if (this->speaking_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->speaking_rate(), target);
  }

  // double pitch = 3;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->pitch(), target);
  }

  // double volume_gain_db = 4;
  if (this->volume_gain_db() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->volume_gain_db(), target);
  }

  // int32 sample_rate_hertz = 5;
  if (this->sample_rate_hertz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sample_rate_hertz(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.texttospeech.v1.AudioConfig)
  return target;
}

size_t AudioConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.texttospeech.v1.AudioConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double speaking_rate = 2;
  if (this->speaking_rate() != 0) {
    total_size += 1 + 8;
  }

  // double pitch = 3;
  if (this->pitch() != 0) {
    total_size += 1 + 8;
  }

  // .google.cloud.texttospeech.v1.AudioEncoding audio_encoding = 1;
  if (this->audio_encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->audio_encoding());
  }

  // int32 sample_rate_hertz = 5;
  if (this->sample_rate_hertz() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sample_rate_hertz());
  }

  // double volume_gain_db = 4;
  if (this->volume_gain_db() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.texttospeech.v1.AudioConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AudioConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.texttospeech.v1.AudioConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.texttospeech.v1.AudioConfig)
    MergeFrom(*source);
  }
}

void AudioConfig::MergeFrom(const AudioConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.texttospeech.v1.AudioConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.speaking_rate() != 0) {
    set_speaking_rate(from.speaking_rate());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.audio_encoding() != 0) {
    set_audio_encoding(from.audio_encoding());
  }
  if (from.sample_rate_hertz() != 0) {
    set_sample_rate_hertz(from.sample_rate_hertz());
  }
  if (from.volume_gain_db() != 0) {
    set_volume_gain_db(from.volume_gain_db());
  }
}

void AudioConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.texttospeech.v1.AudioConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioConfig::CopyFrom(const AudioConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.texttospeech.v1.AudioConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioConfig::IsInitialized() const {
  return true;
}

void AudioConfig::Swap(AudioConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AudioConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void AudioConfig::UnsafeArenaSwap(AudioConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AudioConfig::InternalSwap(AudioConfig* other) {
  using std::swap;
  swap(speaking_rate_, other->speaking_rate_);
  swap(pitch_, other->pitch_);
  swap(audio_encoding_, other->audio_encoding_);
  swap(sample_rate_hertz_, other->sample_rate_hertz_);
  swap(volume_gain_db_, other->volume_gain_db_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AudioConfig::GetMetadata() const {
  protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SynthesizeSpeechResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SynthesizeSpeechResponse::kAudioContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SynthesizeSpeechResponse::SynthesizeSpeechResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::scc_info_SynthesizeSpeechResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.texttospeech.v1.SynthesizeSpeechResponse)
}
SynthesizeSpeechResponse::SynthesizeSpeechResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::scc_info_SynthesizeSpeechResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.texttospeech.v1.SynthesizeSpeechResponse)
}
SynthesizeSpeechResponse::SynthesizeSpeechResponse(const SynthesizeSpeechResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  audio_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.audio_content().size() > 0) {
    audio_content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_content(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.texttospeech.v1.SynthesizeSpeechResponse)
}

void SynthesizeSpeechResponse::SharedCtor() {
  audio_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SynthesizeSpeechResponse::~SynthesizeSpeechResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.texttospeech.v1.SynthesizeSpeechResponse)
  SharedDtor();
}

void SynthesizeSpeechResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  audio_content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SynthesizeSpeechResponse::ArenaDtor(void* object) {
  SynthesizeSpeechResponse* _this = reinterpret_cast< SynthesizeSpeechResponse* >(object);
  (void)_this;
}
void SynthesizeSpeechResponse::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void SynthesizeSpeechResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SynthesizeSpeechResponse::descriptor() {
  ::protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SynthesizeSpeechResponse& SynthesizeSpeechResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::scc_info_SynthesizeSpeechResponse.base);
  return *internal_default_instance();
}


void SynthesizeSpeechResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.texttospeech.v1.SynthesizeSpeechResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  audio_content_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool SynthesizeSpeechResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.texttospeech.v1.SynthesizeSpeechResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes audio_content = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_audio_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.texttospeech.v1.SynthesizeSpeechResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.texttospeech.v1.SynthesizeSpeechResponse)
  return false;
#undef DO_
}

void SynthesizeSpeechResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.texttospeech.v1.SynthesizeSpeechResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes audio_content = 1;
  if (this->audio_content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->audio_content(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.texttospeech.v1.SynthesizeSpeechResponse)
}

::google::protobuf::uint8* SynthesizeSpeechResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.texttospeech.v1.SynthesizeSpeechResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes audio_content = 1;
  if (this->audio_content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->audio_content(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.texttospeech.v1.SynthesizeSpeechResponse)
  return target;
}

size_t SynthesizeSpeechResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.texttospeech.v1.SynthesizeSpeechResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes audio_content = 1;
  if (this->audio_content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->audio_content());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SynthesizeSpeechResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.texttospeech.v1.SynthesizeSpeechResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SynthesizeSpeechResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SynthesizeSpeechResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.texttospeech.v1.SynthesizeSpeechResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.texttospeech.v1.SynthesizeSpeechResponse)
    MergeFrom(*source);
  }
}

void SynthesizeSpeechResponse::MergeFrom(const SynthesizeSpeechResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.texttospeech.v1.SynthesizeSpeechResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.audio_content().size() > 0) {
    set_audio_content(from.audio_content());
  }
}

void SynthesizeSpeechResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.texttospeech.v1.SynthesizeSpeechResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynthesizeSpeechResponse::CopyFrom(const SynthesizeSpeechResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.texttospeech.v1.SynthesizeSpeechResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynthesizeSpeechResponse::IsInitialized() const {
  return true;
}

void SynthesizeSpeechResponse::Swap(SynthesizeSpeechResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SynthesizeSpeechResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SynthesizeSpeechResponse::UnsafeArenaSwap(SynthesizeSpeechResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SynthesizeSpeechResponse::InternalSwap(SynthesizeSpeechResponse* other) {
  using std::swap;
  audio_content_.Swap(&other->audio_content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SynthesizeSpeechResponse::GetMetadata() const {
  protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2ftexttospeech_2fv1_2fcloud_5ftts_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace texttospeech
}  // namespace cloud
}  // namespace google
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::texttospeech::v1::ListVoicesRequest* Arena::CreateMaybeMessage< ::google::cloud::texttospeech::v1::ListVoicesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::texttospeech::v1::ListVoicesRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::texttospeech::v1::ListVoicesResponse* Arena::CreateMaybeMessage< ::google::cloud::texttospeech::v1::ListVoicesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::texttospeech::v1::ListVoicesResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::texttospeech::v1::Voice* Arena::CreateMaybeMessage< ::google::cloud::texttospeech::v1::Voice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::texttospeech::v1::Voice >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::texttospeech::v1::SynthesizeSpeechRequest* Arena::CreateMaybeMessage< ::google::cloud::texttospeech::v1::SynthesizeSpeechRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::texttospeech::v1::SynthesizeSpeechRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::texttospeech::v1::SynthesisInput* Arena::CreateMaybeMessage< ::google::cloud::texttospeech::v1::SynthesisInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::texttospeech::v1::SynthesisInput >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::texttospeech::v1::VoiceSelectionParams* Arena::CreateMaybeMessage< ::google::cloud::texttospeech::v1::VoiceSelectionParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::texttospeech::v1::VoiceSelectionParams >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::texttospeech::v1::AudioConfig* Arena::CreateMaybeMessage< ::google::cloud::texttospeech::v1::AudioConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::texttospeech::v1::AudioConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::texttospeech::v1::SynthesizeSpeechResponse* Arena::CreateMaybeMessage< ::google::cloud::texttospeech::v1::SynthesizeSpeechResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::texttospeech::v1::SynthesizeSpeechResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
