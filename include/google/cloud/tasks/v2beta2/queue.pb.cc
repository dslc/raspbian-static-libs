// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/tasks/v2beta2/queue.proto

#include "google/cloud/tasks/v2beta2/queue.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RateLimits;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RetryConfig;
}  // namespace protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto
namespace protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftarget_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftarget_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PullTarget;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftarget_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AppEngineHttpTarget;
}  // namespace protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftarget_2eproto
namespace protobuf_google_2fprotobuf_2fduration_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fduration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Duration;
}  // namespace protobuf_google_2fprotobuf_2fduration_2eproto
namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto
namespace google {
namespace cloud {
namespace tasks {
namespace v2beta2 {
class QueueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Queue>
      _instance;
  const ::google::cloud::tasks::v2beta2::AppEngineHttpTarget* app_engine_http_target_;
  const ::google::cloud::tasks::v2beta2::PullTarget* pull_target_;
} _Queue_default_instance_;
class RateLimitsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RateLimits>
      _instance;
} _RateLimits_default_instance_;
class RetryConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RetryConfig>
      _instance;
  ::google::protobuf::int32 max_attempts_;
  bool unlimited_attempts_;
} _RetryConfig_default_instance_;
}  // namespace v2beta2
}  // namespace tasks
}  // namespace cloud
}  // namespace google
namespace protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto {
static void InitDefaultsQueue() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::tasks::v2beta2::_Queue_default_instance_;
    new (ptr) ::google::cloud::tasks::v2beta2::Queue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::tasks::v2beta2::Queue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_Queue =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsQueue}, {
      &protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftarget_2eproto::scc_info_AppEngineHttpTarget.base,
      &protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftarget_2eproto::scc_info_PullTarget.base,
      &protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto::scc_info_RateLimits.base,
      &protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto::scc_info_RetryConfig.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsRateLimits() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::tasks::v2beta2::_RateLimits_default_instance_;
    new (ptr) ::google::cloud::tasks::v2beta2::RateLimits();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::tasks::v2beta2::RateLimits::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RateLimits =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRateLimits}, {}};

static void InitDefaultsRetryConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::tasks::v2beta2::_RetryConfig_default_instance_;
    new (ptr) ::google::cloud::tasks::v2beta2::RetryConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::tasks::v2beta2::RetryConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RetryConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRetryConfig}, {
      &protobuf_google_2fprotobuf_2fduration_2eproto::scc_info_Duration.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Queue.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RateLimits.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RetryConfig.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::Queue, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::Queue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::Queue, name_),
  offsetof(::google::cloud::tasks::v2beta2::QueueDefaultTypeInternal, app_engine_http_target_),
  offsetof(::google::cloud::tasks::v2beta2::QueueDefaultTypeInternal, pull_target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::Queue, rate_limits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::Queue, retry_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::Queue, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::Queue, purge_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::Queue, target_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::RateLimits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::RateLimits, max_tasks_dispatched_per_second_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::RateLimits, max_burst_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::RateLimits, max_concurrent_tasks_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::RetryConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::RetryConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::cloud::tasks::v2beta2::RetryConfigDefaultTypeInternal, max_attempts_),
  offsetof(::google::cloud::tasks::v2beta2::RetryConfigDefaultTypeInternal, unlimited_attempts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::RetryConfig, max_retry_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::RetryConfig, min_backoff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::RetryConfig, max_backoff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::RetryConfig, max_doublings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::RetryConfig, num_attempts_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::cloud::tasks::v2beta2::Queue)},
  { 13, -1, sizeof(::google::cloud::tasks::v2beta2::RateLimits)},
  { 21, -1, sizeof(::google::cloud::tasks::v2beta2::RetryConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::tasks::v2beta2::_Queue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::tasks::v2beta2::_RateLimits_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::tasks::v2beta2::_RetryConfig_default_instance_),
};

static void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "google/cloud/tasks/v2beta2/queue.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

static void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

static void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n&google/cloud/tasks/v2beta2/queue.proto"
      "\022\032google.cloud.tasks.v2beta2\032\034google/api"
      "/annotations.proto\032\'google/cloud/tasks/v"
      "2beta2/target.proto\032\036google/protobuf/dur"
      "ation.proto\032\037google/protobuf/timestamp.p"
      "roto\"\341\003\n\005Queue\022\014\n\004name\030\001 \001(\t\022Q\n\026app_engi"
      "ne_http_target\030\003 \001(\0132/.google.cloud.task"
      "s.v2beta2.AppEngineHttpTargetH\000\022=\n\013pull_"
      "target\030\004 \001(\0132&.google.cloud.tasks.v2beta"
      "2.PullTargetH\000\022;\n\013rate_limits\030\005 \001(\0132&.go"
      "ogle.cloud.tasks.v2beta2.RateLimits\022=\n\014r"
      "etry_config\030\006 \001(\0132\'.google.cloud.tasks.v"
      "2beta2.RetryConfig\0226\n\005state\030\007 \001(\0162\'.goog"
      "le.cloud.tasks.v2beta2.Queue.State\022.\n\npu"
      "rge_time\030\010 \001(\0132\032.google.protobuf.Timesta"
      "mp\"E\n\005State\022\025\n\021STATE_UNSPECIFIED\020\000\022\013\n\007RU"
      "NNING\020\001\022\n\n\006PAUSED\020\002\022\014\n\010DISABLED\020\003B\r\n\013tar"
      "get_type\"k\n\nRateLimits\022\'\n\037max_tasks_disp"
      "atched_per_second\030\001 \001(\001\022\026\n\016max_burst_siz"
      "e\030\002 \001(\005\022\034\n\024max_concurrent_tasks\030\003 \001(\005\"\201\002"
      "\n\013RetryConfig\022\026\n\014max_attempts\030\001 \001(\005H\000\022\034\n"
      "\022unlimited_attempts\030\002 \001(\010H\000\0225\n\022max_retry"
      "_duration\030\003 \001(\0132\031.google.protobuf.Durati"
      "on\022.\n\013min_backoff\030\004 \001(\0132\031.google.protobu"
      "f.Duration\022.\n\013max_backoff\030\005 \001(\0132\031.google"
      ".protobuf.Duration\022\025\n\rmax_doublings\030\006 \001("
      "\005B\016\n\014num_attemptsBo\n\036com.google.cloud.ta"
      "sks.v2beta2B\nQueueProtoP\001Z\?google.golang"
      ".org/genproto/googleapis/cloud/tasks/v2b"
      "eta2;tasksb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1178);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/cloud/tasks/v2beta2/queue.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftarget_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto
namespace google {
namespace cloud {
namespace tasks {
namespace v2beta2 {
const ::google::protobuf::EnumDescriptor* Queue_State_descriptor() {
  protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto::file_level_enum_descriptors[0];
}
bool Queue_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Queue_State Queue::STATE_UNSPECIFIED;
const Queue_State Queue::RUNNING;
const Queue_State Queue::PAUSED;
const Queue_State Queue::DISABLED;
const Queue_State Queue::State_MIN;
const Queue_State Queue::State_MAX;
const int Queue::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Queue::InitAsDefaultInstance() {
  ::google::cloud::tasks::v2beta2::_Queue_default_instance_.app_engine_http_target_ = const_cast< ::google::cloud::tasks::v2beta2::AppEngineHttpTarget*>(
      ::google::cloud::tasks::v2beta2::AppEngineHttpTarget::internal_default_instance());
  ::google::cloud::tasks::v2beta2::_Queue_default_instance_.pull_target_ = const_cast< ::google::cloud::tasks::v2beta2::PullTarget*>(
      ::google::cloud::tasks::v2beta2::PullTarget::internal_default_instance());
  ::google::cloud::tasks::v2beta2::_Queue_default_instance_._instance.get_mutable()->rate_limits_ = const_cast< ::google::cloud::tasks::v2beta2::RateLimits*>(
      ::google::cloud::tasks::v2beta2::RateLimits::internal_default_instance());
  ::google::cloud::tasks::v2beta2::_Queue_default_instance_._instance.get_mutable()->retry_config_ = const_cast< ::google::cloud::tasks::v2beta2::RetryConfig*>(
      ::google::cloud::tasks::v2beta2::RetryConfig::internal_default_instance());
  ::google::cloud::tasks::v2beta2::_Queue_default_instance_._instance.get_mutable()->purge_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void Queue::set_allocated_app_engine_http_target(::google::cloud::tasks::v2beta2::AppEngineHttpTarget* app_engine_http_target) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_target_type();
  if (app_engine_http_target) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      app_engine_http_target = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, app_engine_http_target, submessage_arena);
    }
    set_has_app_engine_http_target();
    target_type_.app_engine_http_target_ = app_engine_http_target;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.Queue.app_engine_http_target)
}
void Queue::clear_app_engine_http_target() {
  if (has_app_engine_http_target()) {
    delete target_type_.app_engine_http_target_;
    clear_has_target_type();
  }
}
void Queue::set_allocated_pull_target(::google::cloud::tasks::v2beta2::PullTarget* pull_target) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_target_type();
  if (pull_target) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pull_target = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pull_target, submessage_arena);
    }
    set_has_pull_target();
    target_type_.pull_target_ = pull_target;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.Queue.pull_target)
}
void Queue::clear_pull_target() {
  if (has_pull_target()) {
    delete target_type_.pull_target_;
    clear_has_target_type();
  }
}
void Queue::clear_purge_time() {
  if (GetArenaNoVirtual() == NULL && purge_time_ != NULL) {
    delete purge_time_;
  }
  purge_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Queue::kNameFieldNumber;
const int Queue::kAppEngineHttpTargetFieldNumber;
const int Queue::kPullTargetFieldNumber;
const int Queue::kRateLimitsFieldNumber;
const int Queue::kRetryConfigFieldNumber;
const int Queue::kStateFieldNumber;
const int Queue::kPurgeTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Queue::Queue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto::scc_info_Queue.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.tasks.v2beta2.Queue)
}
Queue::Queue(const Queue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_rate_limits()) {
    rate_limits_ = new ::google::cloud::tasks::v2beta2::RateLimits(*from.rate_limits_);
  } else {
    rate_limits_ = NULL;
  }
  if (from.has_retry_config()) {
    retry_config_ = new ::google::cloud::tasks::v2beta2::RetryConfig(*from.retry_config_);
  } else {
    retry_config_ = NULL;
  }
  if (from.has_purge_time()) {
    purge_time_ = new ::google::protobuf::Timestamp(*from.purge_time_);
  } else {
    purge_time_ = NULL;
  }
  state_ = from.state_;
  clear_has_target_type();
  switch (from.target_type_case()) {
    case kAppEngineHttpTarget: {
      mutable_app_engine_http_target()->::google::cloud::tasks::v2beta2::AppEngineHttpTarget::MergeFrom(from.app_engine_http_target());
      break;
    }
    case kPullTarget: {
      mutable_pull_target()->::google::cloud::tasks::v2beta2::PullTarget::MergeFrom(from.pull_target());
      break;
    }
    case TARGET_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.tasks.v2beta2.Queue)
}

void Queue::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rate_limits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&rate_limits_)) + sizeof(state_));
  clear_has_target_type();
}

Queue::~Queue() {
  // @@protoc_insertion_point(destructor:google.cloud.tasks.v2beta2.Queue)
  SharedDtor();
}

void Queue::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rate_limits_;
  if (this != internal_default_instance()) delete retry_config_;
  if (this != internal_default_instance()) delete purge_time_;
  if (has_target_type()) {
    clear_target_type();
  }
}

void Queue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Queue::descriptor() {
  ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Queue& Queue::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto::scc_info_Queue.base);
  return *internal_default_instance();
}


void Queue::clear_target_type() {
// @@protoc_insertion_point(one_of_clear_start:google.cloud.tasks.v2beta2.Queue)
  switch (target_type_case()) {
    case kAppEngineHttpTarget: {
      delete target_type_.app_engine_http_target_;
      break;
    }
    case kPullTarget: {
      delete target_type_.pull_target_;
      break;
    }
    case TARGET_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_TYPE_NOT_SET;
}


void Queue::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.tasks.v2beta2.Queue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && rate_limits_ != NULL) {
    delete rate_limits_;
  }
  rate_limits_ = NULL;
  if (GetArenaNoVirtual() == NULL && retry_config_ != NULL) {
    delete retry_config_;
  }
  retry_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && purge_time_ != NULL) {
    delete purge_time_;
  }
  purge_time_ = NULL;
  state_ = 0;
  clear_target_type();
  _internal_metadata_.Clear();
}

bool Queue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.tasks.v2beta2.Queue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.tasks.v2beta2.Queue.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.tasks.v2beta2.AppEngineHttpTarget app_engine_http_target = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_app_engine_http_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.tasks.v2beta2.PullTarget pull_target = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pull_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.tasks.v2beta2.RateLimits rate_limits = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rate_limits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.tasks.v2beta2.RetryConfig retry_config = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_retry_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.tasks.v2beta2.Queue.State state = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::google::cloud::tasks::v2beta2::Queue_State >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp purge_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_purge_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.tasks.v2beta2.Queue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.tasks.v2beta2.Queue)
  return false;
#undef DO_
}

void Queue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.tasks.v2beta2.Queue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.tasks.v2beta2.Queue.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.cloud.tasks.v2beta2.AppEngineHttpTarget app_engine_http_target = 3;
  if (has_app_engine_http_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_app_engine_http_target(), output);
  }

  // .google.cloud.tasks.v2beta2.PullTarget pull_target = 4;
  if (has_pull_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_pull_target(), output);
  }

  // .google.cloud.tasks.v2beta2.RateLimits rate_limits = 5;
  if (this->has_rate_limits()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_rate_limits(), output);
  }

  // .google.cloud.tasks.v2beta2.RetryConfig retry_config = 6;
  if (this->has_retry_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_retry_config(), output);
  }

  // .google.cloud.tasks.v2beta2.Queue.State state = 7;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->state(), output);
  }

  // .google.protobuf.Timestamp purge_time = 8;
  if (this->has_purge_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_purge_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.tasks.v2beta2.Queue)
}

::google::protobuf::uint8* Queue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.tasks.v2beta2.Queue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.tasks.v2beta2.Queue.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.cloud.tasks.v2beta2.AppEngineHttpTarget app_engine_http_target = 3;
  if (has_app_engine_http_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_app_engine_http_target(), deterministic, target);
  }

  // .google.cloud.tasks.v2beta2.PullTarget pull_target = 4;
  if (has_pull_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_pull_target(), deterministic, target);
  }

  // .google.cloud.tasks.v2beta2.RateLimits rate_limits = 5;
  if (this->has_rate_limits()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_rate_limits(), deterministic, target);
  }

  // .google.cloud.tasks.v2beta2.RetryConfig retry_config = 6;
  if (this->has_retry_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_retry_config(), deterministic, target);
  }

  // .google.cloud.tasks.v2beta2.Queue.State state = 7;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->state(), target);
  }

  // .google.protobuf.Timestamp purge_time = 8;
  if (this->has_purge_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_purge_time(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.tasks.v2beta2.Queue)
  return target;
}

size_t Queue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.tasks.v2beta2.Queue)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.cloud.tasks.v2beta2.RateLimits rate_limits = 5;
  if (this->has_rate_limits()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *rate_limits_);
  }

  // .google.cloud.tasks.v2beta2.RetryConfig retry_config = 6;
  if (this->has_retry_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *retry_config_);
  }

  // .google.protobuf.Timestamp purge_time = 8;
  if (this->has_purge_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *purge_time_);
  }

  // .google.cloud.tasks.v2beta2.Queue.State state = 7;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  switch (target_type_case()) {
    // .google.cloud.tasks.v2beta2.AppEngineHttpTarget app_engine_http_target = 3;
    case kAppEngineHttpTarget: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_type_.app_engine_http_target_);
      break;
    }
    // .google.cloud.tasks.v2beta2.PullTarget pull_target = 4;
    case kPullTarget: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_type_.pull_target_);
      break;
    }
    case TARGET_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Queue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.tasks.v2beta2.Queue)
  GOOGLE_DCHECK_NE(&from, this);
  const Queue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Queue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.tasks.v2beta2.Queue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.tasks.v2beta2.Queue)
    MergeFrom(*source);
  }
}

void Queue::MergeFrom(const Queue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.tasks.v2beta2.Queue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_rate_limits()) {
    mutable_rate_limits()->::google::cloud::tasks::v2beta2::RateLimits::MergeFrom(from.rate_limits());
  }
  if (from.has_retry_config()) {
    mutable_retry_config()->::google::cloud::tasks::v2beta2::RetryConfig::MergeFrom(from.retry_config());
  }
  if (from.has_purge_time()) {
    mutable_purge_time()->::google::protobuf::Timestamp::MergeFrom(from.purge_time());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  switch (from.target_type_case()) {
    case kAppEngineHttpTarget: {
      mutable_app_engine_http_target()->::google::cloud::tasks::v2beta2::AppEngineHttpTarget::MergeFrom(from.app_engine_http_target());
      break;
    }
    case kPullTarget: {
      mutable_pull_target()->::google::cloud::tasks::v2beta2::PullTarget::MergeFrom(from.pull_target());
      break;
    }
    case TARGET_TYPE_NOT_SET: {
      break;
    }
  }
}

void Queue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.tasks.v2beta2.Queue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Queue::CopyFrom(const Queue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.tasks.v2beta2.Queue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Queue::IsInitialized() const {
  return true;
}

void Queue::Swap(Queue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Queue::InternalSwap(Queue* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rate_limits_, other->rate_limits_);
  swap(retry_config_, other->retry_config_);
  swap(purge_time_, other->purge_time_);
  swap(state_, other->state_);
  swap(target_type_, other->target_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Queue::GetMetadata() const {
  protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RateLimits::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RateLimits::kMaxTasksDispatchedPerSecondFieldNumber;
const int RateLimits::kMaxBurstSizeFieldNumber;
const int RateLimits::kMaxConcurrentTasksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RateLimits::RateLimits()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto::scc_info_RateLimits.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.tasks.v2beta2.RateLimits)
}
RateLimits::RateLimits(const RateLimits& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_tasks_dispatched_per_second_, &from.max_tasks_dispatched_per_second_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_concurrent_tasks_) -
    reinterpret_cast<char*>(&max_tasks_dispatched_per_second_)) + sizeof(max_concurrent_tasks_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.tasks.v2beta2.RateLimits)
}

void RateLimits::SharedCtor() {
  ::memset(&max_tasks_dispatched_per_second_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_concurrent_tasks_) -
      reinterpret_cast<char*>(&max_tasks_dispatched_per_second_)) + sizeof(max_concurrent_tasks_));
}

RateLimits::~RateLimits() {
  // @@protoc_insertion_point(destructor:google.cloud.tasks.v2beta2.RateLimits)
  SharedDtor();
}

void RateLimits::SharedDtor() {
}

void RateLimits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RateLimits::descriptor() {
  ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RateLimits& RateLimits::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto::scc_info_RateLimits.base);
  return *internal_default_instance();
}


void RateLimits::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.tasks.v2beta2.RateLimits)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_tasks_dispatched_per_second_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_concurrent_tasks_) -
      reinterpret_cast<char*>(&max_tasks_dispatched_per_second_)) + sizeof(max_concurrent_tasks_));
  _internal_metadata_.Clear();
}

bool RateLimits::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.tasks.v2beta2.RateLimits)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double max_tasks_dispatched_per_second = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_tasks_dispatched_per_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_burst_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_burst_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_concurrent_tasks = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_concurrent_tasks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.tasks.v2beta2.RateLimits)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.tasks.v2beta2.RateLimits)
  return false;
#undef DO_
}

void RateLimits::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.tasks.v2beta2.RateLimits)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double max_tasks_dispatched_per_second = 1;
  if (this->max_tasks_dispatched_per_second() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->max_tasks_dispatched_per_second(), output);
  }

  // int32 max_burst_size = 2;
  if (this->max_burst_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_burst_size(), output);
  }

  // int32 max_concurrent_tasks = 3;
  if (this->max_concurrent_tasks() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_concurrent_tasks(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.tasks.v2beta2.RateLimits)
}

::google::protobuf::uint8* RateLimits::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.tasks.v2beta2.RateLimits)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double max_tasks_dispatched_per_second = 1;
  if (this->max_tasks_dispatched_per_second() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->max_tasks_dispatched_per_second(), target);
  }

  // int32 max_burst_size = 2;
  if (this->max_burst_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_burst_size(), target);
  }

  // int32 max_concurrent_tasks = 3;
  if (this->max_concurrent_tasks() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_concurrent_tasks(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.tasks.v2beta2.RateLimits)
  return target;
}

size_t RateLimits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.tasks.v2beta2.RateLimits)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double max_tasks_dispatched_per_second = 1;
  if (this->max_tasks_dispatched_per_second() != 0) {
    total_size += 1 + 8;
  }

  // int32 max_burst_size = 2;
  if (this->max_burst_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_burst_size());
  }

  // int32 max_concurrent_tasks = 3;
  if (this->max_concurrent_tasks() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_concurrent_tasks());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RateLimits::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.tasks.v2beta2.RateLimits)
  GOOGLE_DCHECK_NE(&from, this);
  const RateLimits* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RateLimits>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.tasks.v2beta2.RateLimits)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.tasks.v2beta2.RateLimits)
    MergeFrom(*source);
  }
}

void RateLimits::MergeFrom(const RateLimits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.tasks.v2beta2.RateLimits)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_tasks_dispatched_per_second() != 0) {
    set_max_tasks_dispatched_per_second(from.max_tasks_dispatched_per_second());
  }
  if (from.max_burst_size() != 0) {
    set_max_burst_size(from.max_burst_size());
  }
  if (from.max_concurrent_tasks() != 0) {
    set_max_concurrent_tasks(from.max_concurrent_tasks());
  }
}

void RateLimits::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.tasks.v2beta2.RateLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimits::CopyFrom(const RateLimits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.tasks.v2beta2.RateLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimits::IsInitialized() const {
  return true;
}

void RateLimits::Swap(RateLimits* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RateLimits::InternalSwap(RateLimits* other) {
  using std::swap;
  swap(max_tasks_dispatched_per_second_, other->max_tasks_dispatched_per_second_);
  swap(max_burst_size_, other->max_burst_size_);
  swap(max_concurrent_tasks_, other->max_concurrent_tasks_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RateLimits::GetMetadata() const {
  protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RetryConfig::InitAsDefaultInstance() {
  ::google::cloud::tasks::v2beta2::_RetryConfig_default_instance_.max_attempts_ = 0;
  ::google::cloud::tasks::v2beta2::_RetryConfig_default_instance_.unlimited_attempts_ = false;
  ::google::cloud::tasks::v2beta2::_RetryConfig_default_instance_._instance.get_mutable()->max_retry_duration_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::google::cloud::tasks::v2beta2::_RetryConfig_default_instance_._instance.get_mutable()->min_backoff_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::google::cloud::tasks::v2beta2::_RetryConfig_default_instance_._instance.get_mutable()->max_backoff_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void RetryConfig::clear_max_retry_duration() {
  if (GetArenaNoVirtual() == NULL && max_retry_duration_ != NULL) {
    delete max_retry_duration_;
  }
  max_retry_duration_ = NULL;
}
void RetryConfig::clear_min_backoff() {
  if (GetArenaNoVirtual() == NULL && min_backoff_ != NULL) {
    delete min_backoff_;
  }
  min_backoff_ = NULL;
}
void RetryConfig::clear_max_backoff() {
  if (GetArenaNoVirtual() == NULL && max_backoff_ != NULL) {
    delete max_backoff_;
  }
  max_backoff_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RetryConfig::kMaxAttemptsFieldNumber;
const int RetryConfig::kUnlimitedAttemptsFieldNumber;
const int RetryConfig::kMaxRetryDurationFieldNumber;
const int RetryConfig::kMinBackoffFieldNumber;
const int RetryConfig::kMaxBackoffFieldNumber;
const int RetryConfig::kMaxDoublingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RetryConfig::RetryConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto::scc_info_RetryConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.tasks.v2beta2.RetryConfig)
}
RetryConfig::RetryConfig(const RetryConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_max_retry_duration()) {
    max_retry_duration_ = new ::google::protobuf::Duration(*from.max_retry_duration_);
  } else {
    max_retry_duration_ = NULL;
  }
  if (from.has_min_backoff()) {
    min_backoff_ = new ::google::protobuf::Duration(*from.min_backoff_);
  } else {
    min_backoff_ = NULL;
  }
  if (from.has_max_backoff()) {
    max_backoff_ = new ::google::protobuf::Duration(*from.max_backoff_);
  } else {
    max_backoff_ = NULL;
  }
  max_doublings_ = from.max_doublings_;
  clear_has_num_attempts();
  switch (from.num_attempts_case()) {
    case kMaxAttempts: {
      set_max_attempts(from.max_attempts());
      break;
    }
    case kUnlimitedAttempts: {
      set_unlimited_attempts(from.unlimited_attempts());
      break;
    }
    case NUM_ATTEMPTS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.tasks.v2beta2.RetryConfig)
}

void RetryConfig::SharedCtor() {
  ::memset(&max_retry_duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_doublings_) -
      reinterpret_cast<char*>(&max_retry_duration_)) + sizeof(max_doublings_));
  clear_has_num_attempts();
}

RetryConfig::~RetryConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.tasks.v2beta2.RetryConfig)
  SharedDtor();
}

void RetryConfig::SharedDtor() {
  if (this != internal_default_instance()) delete max_retry_duration_;
  if (this != internal_default_instance()) delete min_backoff_;
  if (this != internal_default_instance()) delete max_backoff_;
  if (has_num_attempts()) {
    clear_num_attempts();
  }
}

void RetryConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RetryConfig::descriptor() {
  ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RetryConfig& RetryConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto::scc_info_RetryConfig.base);
  return *internal_default_instance();
}


void RetryConfig::clear_num_attempts() {
// @@protoc_insertion_point(one_of_clear_start:google.cloud.tasks.v2beta2.RetryConfig)
  switch (num_attempts_case()) {
    case kMaxAttempts: {
      // No need to clear
      break;
    }
    case kUnlimitedAttempts: {
      // No need to clear
      break;
    }
    case NUM_ATTEMPTS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NUM_ATTEMPTS_NOT_SET;
}


void RetryConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.tasks.v2beta2.RetryConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && max_retry_duration_ != NULL) {
    delete max_retry_duration_;
  }
  max_retry_duration_ = NULL;
  if (GetArenaNoVirtual() == NULL && min_backoff_ != NULL) {
    delete min_backoff_;
  }
  min_backoff_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_backoff_ != NULL) {
    delete max_backoff_;
  }
  max_backoff_ = NULL;
  max_doublings_ = 0;
  clear_num_attempts();
  _internal_metadata_.Clear();
}

bool RetryConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.tasks.v2beta2.RetryConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 max_attempts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          clear_num_attempts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_attempts_.max_attempts_)));
          set_has_max_attempts();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool unlimited_attempts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_num_attempts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &num_attempts_.unlimited_attempts_)));
          set_has_unlimited_attempts();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration max_retry_duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max_retry_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration min_backoff = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_min_backoff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration max_backoff = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max_backoff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_doublings = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_doublings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.tasks.v2beta2.RetryConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.tasks.v2beta2.RetryConfig)
  return false;
#undef DO_
}

void RetryConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.tasks.v2beta2.RetryConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_attempts = 1;
  if (has_max_attempts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_attempts(), output);
  }

  // bool unlimited_attempts = 2;
  if (has_unlimited_attempts()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->unlimited_attempts(), output);
  }

  // .google.protobuf.Duration max_retry_duration = 3;
  if (this->has_max_retry_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_max_retry_duration(), output);
  }

  // .google.protobuf.Duration min_backoff = 4;
  if (this->has_min_backoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_min_backoff(), output);
  }

  // .google.protobuf.Duration max_backoff = 5;
  if (this->has_max_backoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_max_backoff(), output);
  }

  // int32 max_doublings = 6;
  if (this->max_doublings() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_doublings(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.tasks.v2beta2.RetryConfig)
}

::google::protobuf::uint8* RetryConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.tasks.v2beta2.RetryConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_attempts = 1;
  if (has_max_attempts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_attempts(), target);
  }

  // bool unlimited_attempts = 2;
  if (has_unlimited_attempts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->unlimited_attempts(), target);
  }

  // .google.protobuf.Duration max_retry_duration = 3;
  if (this->has_max_retry_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_max_retry_duration(), deterministic, target);
  }

  // .google.protobuf.Duration min_backoff = 4;
  if (this->has_min_backoff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_min_backoff(), deterministic, target);
  }

  // .google.protobuf.Duration max_backoff = 5;
  if (this->has_max_backoff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_max_backoff(), deterministic, target);
  }

  // int32 max_doublings = 6;
  if (this->max_doublings() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_doublings(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.tasks.v2beta2.RetryConfig)
  return target;
}

size_t RetryConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.tasks.v2beta2.RetryConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Duration max_retry_duration = 3;
  if (this->has_max_retry_duration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *max_retry_duration_);
  }

  // .google.protobuf.Duration min_backoff = 4;
  if (this->has_min_backoff()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *min_backoff_);
  }

  // .google.protobuf.Duration max_backoff = 5;
  if (this->has_max_backoff()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *max_backoff_);
  }

  // int32 max_doublings = 6;
  if (this->max_doublings() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_doublings());
  }

  switch (num_attempts_case()) {
    // int32 max_attempts = 1;
    case kMaxAttempts: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_attempts());
      break;
    }
    // bool unlimited_attempts = 2;
    case kUnlimitedAttempts: {
      total_size += 1 + 1;
      break;
    }
    case NUM_ATTEMPTS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RetryConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.tasks.v2beta2.RetryConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RetryConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RetryConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.tasks.v2beta2.RetryConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.tasks.v2beta2.RetryConfig)
    MergeFrom(*source);
  }
}

void RetryConfig::MergeFrom(const RetryConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.tasks.v2beta2.RetryConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_max_retry_duration()) {
    mutable_max_retry_duration()->::google::protobuf::Duration::MergeFrom(from.max_retry_duration());
  }
  if (from.has_min_backoff()) {
    mutable_min_backoff()->::google::protobuf::Duration::MergeFrom(from.min_backoff());
  }
  if (from.has_max_backoff()) {
    mutable_max_backoff()->::google::protobuf::Duration::MergeFrom(from.max_backoff());
  }
  if (from.max_doublings() != 0) {
    set_max_doublings(from.max_doublings());
  }
  switch (from.num_attempts_case()) {
    case kMaxAttempts: {
      set_max_attempts(from.max_attempts());
      break;
    }
    case kUnlimitedAttempts: {
      set_unlimited_attempts(from.unlimited_attempts());
      break;
    }
    case NUM_ATTEMPTS_NOT_SET: {
      break;
    }
  }
}

void RetryConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.tasks.v2beta2.RetryConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetryConfig::CopyFrom(const RetryConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.tasks.v2beta2.RetryConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetryConfig::IsInitialized() const {
  return true;
}

void RetryConfig::Swap(RetryConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RetryConfig::InternalSwap(RetryConfig* other) {
  using std::swap;
  swap(max_retry_duration_, other->max_retry_duration_);
  swap(min_backoff_, other->min_backoff_);
  swap(max_backoff_, other->max_backoff_);
  swap(max_doublings_, other->max_doublings_);
  swap(num_attempts_, other->num_attempts_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RetryConfig::GetMetadata() const {
  protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v2beta2
}  // namespace tasks
}  // namespace cloud
}  // namespace google
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::tasks::v2beta2::Queue* Arena::CreateMaybeMessage< ::google::cloud::tasks::v2beta2::Queue >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::tasks::v2beta2::Queue >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::tasks::v2beta2::RateLimits* Arena::CreateMaybeMessage< ::google::cloud::tasks::v2beta2::RateLimits >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::tasks::v2beta2::RateLimits >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::tasks::v2beta2::RetryConfig* Arena::CreateMaybeMessage< ::google::cloud::tasks::v2beta2::RetryConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::tasks::v2beta2::RetryConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
