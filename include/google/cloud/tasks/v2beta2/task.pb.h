// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/tasks/v2beta2/task.proto

#ifndef PROTOBUF_INCLUDED_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto
#define PROTOBUF_INCLUDED_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/cloud/tasks/v2beta2/target.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto 

namespace protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto
namespace google {
namespace cloud {
namespace tasks {
namespace v2beta2 {
class AttemptStatus;
class AttemptStatusDefaultTypeInternal;
extern AttemptStatusDefaultTypeInternal _AttemptStatus_default_instance_;
class Task;
class TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class TaskStatus;
class TaskStatusDefaultTypeInternal;
extern TaskStatusDefaultTypeInternal _TaskStatus_default_instance_;
}  // namespace v2beta2
}  // namespace tasks
}  // namespace cloud
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::cloud::tasks::v2beta2::AttemptStatus* Arena::CreateMaybeMessage<::google::cloud::tasks::v2beta2::AttemptStatus>(Arena*);
template<> ::google::cloud::tasks::v2beta2::Task* Arena::CreateMaybeMessage<::google::cloud::tasks::v2beta2::Task>(Arena*);
template<> ::google::cloud::tasks::v2beta2::TaskStatus* Arena::CreateMaybeMessage<::google::cloud::tasks::v2beta2::TaskStatus>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace cloud {
namespace tasks {
namespace v2beta2 {

enum Task_View {
  Task_View_VIEW_UNSPECIFIED = 0,
  Task_View_BASIC = 1,
  Task_View_FULL = 2,
  Task_View_Task_View_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Task_View_Task_View_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Task_View_IsValid(int value);
const Task_View Task_View_View_MIN = Task_View_VIEW_UNSPECIFIED;
const Task_View Task_View_View_MAX = Task_View_FULL;
const int Task_View_View_ARRAYSIZE = Task_View_View_MAX + 1;

const ::google::protobuf::EnumDescriptor* Task_View_descriptor();
inline const ::std::string& Task_View_Name(Task_View value) {
  return ::google::protobuf::internal::NameOfEnum(
    Task_View_descriptor(), value);
}
inline bool Task_View_Parse(
    const ::std::string& name, Task_View* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Task_View>(
    Task_View_descriptor(), name, value);
}
// ===================================================================

class Task : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.tasks.v2beta2.Task) */ {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(Task&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Task& default_instance();

  enum PayloadTypeCase {
    kAppEngineHttpRequest = 3,
    kPullMessage = 4,
    PAYLOAD_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Task* other);
  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const final {
    return CreateMaybeMessage<Task>(NULL);
  }

  Task* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Task_View View;
  static const View VIEW_UNSPECIFIED =
    Task_View_VIEW_UNSPECIFIED;
  static const View BASIC =
    Task_View_BASIC;
  static const View FULL =
    Task_View_FULL;
  static inline bool View_IsValid(int value) {
    return Task_View_IsValid(value);
  }
  static const View View_MIN =
    Task_View_View_MIN;
  static const View View_MAX =
    Task_View_View_MAX;
  static const int View_ARRAYSIZE =
    Task_View_View_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  View_descriptor() {
    return Task_View_descriptor();
  }
  static inline const ::std::string& View_Name(View value) {
    return Task_View_Name(value);
  }
  static inline bool View_Parse(const ::std::string& name,
      View* value) {
    return Task_View_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.protobuf.Timestamp schedule_time = 5;
  bool has_schedule_time() const;
  void clear_schedule_time();
  static const int kScheduleTimeFieldNumber = 5;
  private:
  const ::google::protobuf::Timestamp& _internal_schedule_time() const;
  public:
  const ::google::protobuf::Timestamp& schedule_time() const;
  ::google::protobuf::Timestamp* release_schedule_time();
  ::google::protobuf::Timestamp* mutable_schedule_time();
  void set_allocated_schedule_time(::google::protobuf::Timestamp* schedule_time);

  // .google.protobuf.Timestamp create_time = 6;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 6;
  private:
  const ::google::protobuf::Timestamp& _internal_create_time() const;
  public:
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.cloud.tasks.v2beta2.TaskStatus status = 7;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 7;
  private:
  const ::google::cloud::tasks::v2beta2::TaskStatus& _internal_status() const;
  public:
  const ::google::cloud::tasks::v2beta2::TaskStatus& status() const;
  ::google::cloud::tasks::v2beta2::TaskStatus* release_status();
  ::google::cloud::tasks::v2beta2::TaskStatus* mutable_status();
  void set_allocated_status(::google::cloud::tasks::v2beta2::TaskStatus* status);

  // .google.cloud.tasks.v2beta2.Task.View view = 8;
  void clear_view();
  static const int kViewFieldNumber = 8;
  ::google::cloud::tasks::v2beta2::Task_View view() const;
  void set_view(::google::cloud::tasks::v2beta2::Task_View value);

  // .google.cloud.tasks.v2beta2.AppEngineHttpRequest app_engine_http_request = 3;
  bool has_app_engine_http_request() const;
  void clear_app_engine_http_request();
  static const int kAppEngineHttpRequestFieldNumber = 3;
  private:
  const ::google::cloud::tasks::v2beta2::AppEngineHttpRequest& _internal_app_engine_http_request() const;
  public:
  const ::google::cloud::tasks::v2beta2::AppEngineHttpRequest& app_engine_http_request() const;
  ::google::cloud::tasks::v2beta2::AppEngineHttpRequest* release_app_engine_http_request();
  ::google::cloud::tasks::v2beta2::AppEngineHttpRequest* mutable_app_engine_http_request();
  void set_allocated_app_engine_http_request(::google::cloud::tasks::v2beta2::AppEngineHttpRequest* app_engine_http_request);

  // .google.cloud.tasks.v2beta2.PullMessage pull_message = 4;
  bool has_pull_message() const;
  void clear_pull_message();
  static const int kPullMessageFieldNumber = 4;
  private:
  const ::google::cloud::tasks::v2beta2::PullMessage& _internal_pull_message() const;
  public:
  const ::google::cloud::tasks::v2beta2::PullMessage& pull_message() const;
  ::google::cloud::tasks::v2beta2::PullMessage* release_pull_message();
  ::google::cloud::tasks::v2beta2::PullMessage* mutable_pull_message();
  void set_allocated_pull_message(::google::cloud::tasks::v2beta2::PullMessage* pull_message);

  void clear_payload_type();
  PayloadTypeCase payload_type_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.tasks.v2beta2.Task)
 private:
  void set_has_app_engine_http_request();
  void set_has_pull_message();

  inline bool has_payload_type() const;
  inline void clear_has_payload_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Timestamp* schedule_time_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::cloud::tasks::v2beta2::TaskStatus* status_;
  int view_;
  union PayloadTypeUnion {
    PayloadTypeUnion() {}
    ::google::cloud::tasks::v2beta2::AppEngineHttpRequest* app_engine_http_request_;
    ::google::cloud::tasks::v2beta2::PullMessage* pull_message_;
  } payload_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TaskStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.tasks.v2beta2.TaskStatus) */ {
 public:
  TaskStatus();
  virtual ~TaskStatus();

  TaskStatus(const TaskStatus& from);

  inline TaskStatus& operator=(const TaskStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskStatus(TaskStatus&& from) noexcept
    : TaskStatus() {
    *this = ::std::move(from);
  }

  inline TaskStatus& operator=(TaskStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskStatus* internal_default_instance() {
    return reinterpret_cast<const TaskStatus*>(
               &_TaskStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TaskStatus* other);
  friend void swap(TaskStatus& a, TaskStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskStatus* New() const final {
    return CreateMaybeMessage<TaskStatus>(NULL);
  }

  TaskStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskStatus& from);
  void MergeFrom(const TaskStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.tasks.v2beta2.AttemptStatus first_attempt_status = 3;
  bool has_first_attempt_status() const;
  void clear_first_attempt_status();
  static const int kFirstAttemptStatusFieldNumber = 3;
  private:
  const ::google::cloud::tasks::v2beta2::AttemptStatus& _internal_first_attempt_status() const;
  public:
  const ::google::cloud::tasks::v2beta2::AttemptStatus& first_attempt_status() const;
  ::google::cloud::tasks::v2beta2::AttemptStatus* release_first_attempt_status();
  ::google::cloud::tasks::v2beta2::AttemptStatus* mutable_first_attempt_status();
  void set_allocated_first_attempt_status(::google::cloud::tasks::v2beta2::AttemptStatus* first_attempt_status);

  // .google.cloud.tasks.v2beta2.AttemptStatus last_attempt_status = 4;
  bool has_last_attempt_status() const;
  void clear_last_attempt_status();
  static const int kLastAttemptStatusFieldNumber = 4;
  private:
  const ::google::cloud::tasks::v2beta2::AttemptStatus& _internal_last_attempt_status() const;
  public:
  const ::google::cloud::tasks::v2beta2::AttemptStatus& last_attempt_status() const;
  ::google::cloud::tasks::v2beta2::AttemptStatus* release_last_attempt_status();
  ::google::cloud::tasks::v2beta2::AttemptStatus* mutable_last_attempt_status();
  void set_allocated_last_attempt_status(::google::cloud::tasks::v2beta2::AttemptStatus* last_attempt_status);

  // int32 attempt_dispatch_count = 1;
  void clear_attempt_dispatch_count();
  static const int kAttemptDispatchCountFieldNumber = 1;
  ::google::protobuf::int32 attempt_dispatch_count() const;
  void set_attempt_dispatch_count(::google::protobuf::int32 value);

  // int32 attempt_response_count = 2;
  void clear_attempt_response_count();
  static const int kAttemptResponseCountFieldNumber = 2;
  ::google::protobuf::int32 attempt_response_count() const;
  void set_attempt_response_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.cloud.tasks.v2beta2.TaskStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::cloud::tasks::v2beta2::AttemptStatus* first_attempt_status_;
  ::google::cloud::tasks::v2beta2::AttemptStatus* last_attempt_status_;
  ::google::protobuf::int32 attempt_dispatch_count_;
  ::google::protobuf::int32 attempt_response_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AttemptStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.tasks.v2beta2.AttemptStatus) */ {
 public:
  AttemptStatus();
  virtual ~AttemptStatus();

  AttemptStatus(const AttemptStatus& from);

  inline AttemptStatus& operator=(const AttemptStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AttemptStatus(AttemptStatus&& from) noexcept
    : AttemptStatus() {
    *this = ::std::move(from);
  }

  inline AttemptStatus& operator=(AttemptStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AttemptStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttemptStatus* internal_default_instance() {
    return reinterpret_cast<const AttemptStatus*>(
               &_AttemptStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(AttemptStatus* other);
  friend void swap(AttemptStatus& a, AttemptStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AttemptStatus* New() const final {
    return CreateMaybeMessage<AttemptStatus>(NULL);
  }

  AttemptStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AttemptStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AttemptStatus& from);
  void MergeFrom(const AttemptStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttemptStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Timestamp schedule_time = 1;
  bool has_schedule_time() const;
  void clear_schedule_time();
  static const int kScheduleTimeFieldNumber = 1;
  private:
  const ::google::protobuf::Timestamp& _internal_schedule_time() const;
  public:
  const ::google::protobuf::Timestamp& schedule_time() const;
  ::google::protobuf::Timestamp* release_schedule_time();
  ::google::protobuf::Timestamp* mutable_schedule_time();
  void set_allocated_schedule_time(::google::protobuf::Timestamp* schedule_time);

  // .google.protobuf.Timestamp dispatch_time = 2;
  bool has_dispatch_time() const;
  void clear_dispatch_time();
  static const int kDispatchTimeFieldNumber = 2;
  private:
  const ::google::protobuf::Timestamp& _internal_dispatch_time() const;
  public:
  const ::google::protobuf::Timestamp& dispatch_time() const;
  ::google::protobuf::Timestamp* release_dispatch_time();
  ::google::protobuf::Timestamp* mutable_dispatch_time();
  void set_allocated_dispatch_time(::google::protobuf::Timestamp* dispatch_time);

  // .google.protobuf.Timestamp response_time = 3;
  bool has_response_time() const;
  void clear_response_time();
  static const int kResponseTimeFieldNumber = 3;
  private:
  const ::google::protobuf::Timestamp& _internal_response_time() const;
  public:
  const ::google::protobuf::Timestamp& response_time() const;
  ::google::protobuf::Timestamp* release_response_time();
  ::google::protobuf::Timestamp* mutable_response_time();
  void set_allocated_response_time(::google::protobuf::Timestamp* response_time);

  // .google.rpc.Status response_status = 4;
  bool has_response_status() const;
  void clear_response_status();
  static const int kResponseStatusFieldNumber = 4;
  private:
  const ::google::rpc::Status& _internal_response_status() const;
  public:
  const ::google::rpc::Status& response_status() const;
  ::google::rpc::Status* release_response_status();
  ::google::rpc::Status* mutable_response_status();
  void set_allocated_response_status(::google::rpc::Status* response_status);

  // @@protoc_insertion_point(class_scope:google.cloud.tasks.v2beta2.AttemptStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Timestamp* schedule_time_;
  ::google::protobuf::Timestamp* dispatch_time_;
  ::google::protobuf::Timestamp* response_time_;
  ::google::rpc::Status* response_status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Task

// string name = 1;
inline void Task::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Task::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.Task.name)
  return name_.GetNoArena();
}
inline void Task::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.Task.name)
}
#if LANG_CXX11
inline void Task::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.tasks.v2beta2.Task.name)
}
#endif
inline void Task::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.tasks.v2beta2.Task.name)
}
inline void Task::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.tasks.v2beta2.Task.name)
}
inline ::std::string* Task::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.Task.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.Task.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.Task.name)
}

// .google.cloud.tasks.v2beta2.AppEngineHttpRequest app_engine_http_request = 3;
inline bool Task::has_app_engine_http_request() const {
  return payload_type_case() == kAppEngineHttpRequest;
}
inline void Task::set_has_app_engine_http_request() {
  _oneof_case_[0] = kAppEngineHttpRequest;
}
inline const ::google::cloud::tasks::v2beta2::AppEngineHttpRequest& Task::_internal_app_engine_http_request() const {
  return *payload_type_.app_engine_http_request_;
}
inline ::google::cloud::tasks::v2beta2::AppEngineHttpRequest* Task::release_app_engine_http_request() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.Task.app_engine_http_request)
  if (has_app_engine_http_request()) {
    clear_has_payload_type();
      ::google::cloud::tasks::v2beta2::AppEngineHttpRequest* temp = payload_type_.app_engine_http_request_;
    payload_type_.app_engine_http_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::tasks::v2beta2::AppEngineHttpRequest& Task::app_engine_http_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.Task.app_engine_http_request)
  return has_app_engine_http_request()
      ? *payload_type_.app_engine_http_request_
      : *reinterpret_cast< ::google::cloud::tasks::v2beta2::AppEngineHttpRequest*>(&::google::cloud::tasks::v2beta2::_AppEngineHttpRequest_default_instance_);
}
inline ::google::cloud::tasks::v2beta2::AppEngineHttpRequest* Task::mutable_app_engine_http_request() {
  if (!has_app_engine_http_request()) {
    clear_payload_type();
    set_has_app_engine_http_request();
    payload_type_.app_engine_http_request_ = CreateMaybeMessage< ::google::cloud::tasks::v2beta2::AppEngineHttpRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.Task.app_engine_http_request)
  return payload_type_.app_engine_http_request_;
}

// .google.cloud.tasks.v2beta2.PullMessage pull_message = 4;
inline bool Task::has_pull_message() const {
  return payload_type_case() == kPullMessage;
}
inline void Task::set_has_pull_message() {
  _oneof_case_[0] = kPullMessage;
}
inline const ::google::cloud::tasks::v2beta2::PullMessage& Task::_internal_pull_message() const {
  return *payload_type_.pull_message_;
}
inline ::google::cloud::tasks::v2beta2::PullMessage* Task::release_pull_message() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.Task.pull_message)
  if (has_pull_message()) {
    clear_has_payload_type();
      ::google::cloud::tasks::v2beta2::PullMessage* temp = payload_type_.pull_message_;
    payload_type_.pull_message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::tasks::v2beta2::PullMessage& Task::pull_message() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.Task.pull_message)
  return has_pull_message()
      ? *payload_type_.pull_message_
      : *reinterpret_cast< ::google::cloud::tasks::v2beta2::PullMessage*>(&::google::cloud::tasks::v2beta2::_PullMessage_default_instance_);
}
inline ::google::cloud::tasks::v2beta2::PullMessage* Task::mutable_pull_message() {
  if (!has_pull_message()) {
    clear_payload_type();
    set_has_pull_message();
    payload_type_.pull_message_ = CreateMaybeMessage< ::google::cloud::tasks::v2beta2::PullMessage >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.Task.pull_message)
  return payload_type_.pull_message_;
}

// .google.protobuf.Timestamp schedule_time = 5;
inline bool Task::has_schedule_time() const {
  return this != internal_default_instance() && schedule_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Task::_internal_schedule_time() const {
  return *schedule_time_;
}
inline const ::google::protobuf::Timestamp& Task::schedule_time() const {
  const ::google::protobuf::Timestamp* p = schedule_time_;
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.Task.schedule_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Task::release_schedule_time() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.Task.schedule_time)
  
  ::google::protobuf::Timestamp* temp = schedule_time_;
  schedule_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Task::mutable_schedule_time() {
  
  if (schedule_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    schedule_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.Task.schedule_time)
  return schedule_time_;
}
inline void Task::set_allocated_schedule_time(::google::protobuf::Timestamp* schedule_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(schedule_time_);
  }
  if (schedule_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(schedule_time)->GetArena();
    if (message_arena != submessage_arena) {
      schedule_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, schedule_time, submessage_arena);
    }
    
  } else {
    
  }
  schedule_time_ = schedule_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.Task.schedule_time)
}

// .google.protobuf.Timestamp create_time = 6;
inline bool Task::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Task::_internal_create_time() const {
  return *create_time_;
}
inline const ::google::protobuf::Timestamp& Task::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.Task.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Task::release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.Task.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Task::mutable_create_time() {
  
  if (create_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.Task.create_time)
  return create_time_;
}
inline void Task::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.Task.create_time)
}

// .google.cloud.tasks.v2beta2.TaskStatus status = 7;
inline bool Task::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline void Task::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
}
inline const ::google::cloud::tasks::v2beta2::TaskStatus& Task::_internal_status() const {
  return *status_;
}
inline const ::google::cloud::tasks::v2beta2::TaskStatus& Task::status() const {
  const ::google::cloud::tasks::v2beta2::TaskStatus* p = status_;
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.Task.status)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::tasks::v2beta2::TaskStatus*>(
      &::google::cloud::tasks::v2beta2::_TaskStatus_default_instance_);
}
inline ::google::cloud::tasks::v2beta2::TaskStatus* Task::release_status() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.Task.status)
  
  ::google::cloud::tasks::v2beta2::TaskStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::google::cloud::tasks::v2beta2::TaskStatus* Task::mutable_status() {
  
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::tasks::v2beta2::TaskStatus>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.Task.status)
  return status_;
}
inline void Task::set_allocated_status(::google::cloud::tasks::v2beta2::TaskStatus* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.Task.status)
}

// .google.cloud.tasks.v2beta2.Task.View view = 8;
inline void Task::clear_view() {
  view_ = 0;
}
inline ::google::cloud::tasks::v2beta2::Task_View Task::view() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.Task.view)
  return static_cast< ::google::cloud::tasks::v2beta2::Task_View >(view_);
}
inline void Task::set_view(::google::cloud::tasks::v2beta2::Task_View value) {
  
  view_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.Task.view)
}

inline bool Task::has_payload_type() const {
  return payload_type_case() != PAYLOAD_TYPE_NOT_SET;
}
inline void Task::clear_has_payload_type() {
  _oneof_case_[0] = PAYLOAD_TYPE_NOT_SET;
}
inline Task::PayloadTypeCase Task::payload_type_case() const {
  return Task::PayloadTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TaskStatus

// int32 attempt_dispatch_count = 1;
inline void TaskStatus::clear_attempt_dispatch_count() {
  attempt_dispatch_count_ = 0;
}
inline ::google::protobuf::int32 TaskStatus::attempt_dispatch_count() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.TaskStatus.attempt_dispatch_count)
  return attempt_dispatch_count_;
}
inline void TaskStatus::set_attempt_dispatch_count(::google::protobuf::int32 value) {
  
  attempt_dispatch_count_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.TaskStatus.attempt_dispatch_count)
}

// int32 attempt_response_count = 2;
inline void TaskStatus::clear_attempt_response_count() {
  attempt_response_count_ = 0;
}
inline ::google::protobuf::int32 TaskStatus::attempt_response_count() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.TaskStatus.attempt_response_count)
  return attempt_response_count_;
}
inline void TaskStatus::set_attempt_response_count(::google::protobuf::int32 value) {
  
  attempt_response_count_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.TaskStatus.attempt_response_count)
}

// .google.cloud.tasks.v2beta2.AttemptStatus first_attempt_status = 3;
inline bool TaskStatus::has_first_attempt_status() const {
  return this != internal_default_instance() && first_attempt_status_ != NULL;
}
inline void TaskStatus::clear_first_attempt_status() {
  if (GetArenaNoVirtual() == NULL && first_attempt_status_ != NULL) {
    delete first_attempt_status_;
  }
  first_attempt_status_ = NULL;
}
inline const ::google::cloud::tasks::v2beta2::AttemptStatus& TaskStatus::_internal_first_attempt_status() const {
  return *first_attempt_status_;
}
inline const ::google::cloud::tasks::v2beta2::AttemptStatus& TaskStatus::first_attempt_status() const {
  const ::google::cloud::tasks::v2beta2::AttemptStatus* p = first_attempt_status_;
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.TaskStatus.first_attempt_status)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::tasks::v2beta2::AttemptStatus*>(
      &::google::cloud::tasks::v2beta2::_AttemptStatus_default_instance_);
}
inline ::google::cloud::tasks::v2beta2::AttemptStatus* TaskStatus::release_first_attempt_status() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.TaskStatus.first_attempt_status)
  
  ::google::cloud::tasks::v2beta2::AttemptStatus* temp = first_attempt_status_;
  first_attempt_status_ = NULL;
  return temp;
}
inline ::google::cloud::tasks::v2beta2::AttemptStatus* TaskStatus::mutable_first_attempt_status() {
  
  if (first_attempt_status_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::tasks::v2beta2::AttemptStatus>(GetArenaNoVirtual());
    first_attempt_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.TaskStatus.first_attempt_status)
  return first_attempt_status_;
}
inline void TaskStatus::set_allocated_first_attempt_status(::google::cloud::tasks::v2beta2::AttemptStatus* first_attempt_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete first_attempt_status_;
  }
  if (first_attempt_status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      first_attempt_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, first_attempt_status, submessage_arena);
    }
    
  } else {
    
  }
  first_attempt_status_ = first_attempt_status;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.TaskStatus.first_attempt_status)
}

// .google.cloud.tasks.v2beta2.AttemptStatus last_attempt_status = 4;
inline bool TaskStatus::has_last_attempt_status() const {
  return this != internal_default_instance() && last_attempt_status_ != NULL;
}
inline void TaskStatus::clear_last_attempt_status() {
  if (GetArenaNoVirtual() == NULL && last_attempt_status_ != NULL) {
    delete last_attempt_status_;
  }
  last_attempt_status_ = NULL;
}
inline const ::google::cloud::tasks::v2beta2::AttemptStatus& TaskStatus::_internal_last_attempt_status() const {
  return *last_attempt_status_;
}
inline const ::google::cloud::tasks::v2beta2::AttemptStatus& TaskStatus::last_attempt_status() const {
  const ::google::cloud::tasks::v2beta2::AttemptStatus* p = last_attempt_status_;
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.TaskStatus.last_attempt_status)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::tasks::v2beta2::AttemptStatus*>(
      &::google::cloud::tasks::v2beta2::_AttemptStatus_default_instance_);
}
inline ::google::cloud::tasks::v2beta2::AttemptStatus* TaskStatus::release_last_attempt_status() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.TaskStatus.last_attempt_status)
  
  ::google::cloud::tasks::v2beta2::AttemptStatus* temp = last_attempt_status_;
  last_attempt_status_ = NULL;
  return temp;
}
inline ::google::cloud::tasks::v2beta2::AttemptStatus* TaskStatus::mutable_last_attempt_status() {
  
  if (last_attempt_status_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::tasks::v2beta2::AttemptStatus>(GetArenaNoVirtual());
    last_attempt_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.TaskStatus.last_attempt_status)
  return last_attempt_status_;
}
inline void TaskStatus::set_allocated_last_attempt_status(::google::cloud::tasks::v2beta2::AttemptStatus* last_attempt_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete last_attempt_status_;
  }
  if (last_attempt_status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      last_attempt_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_attempt_status, submessage_arena);
    }
    
  } else {
    
  }
  last_attempt_status_ = last_attempt_status;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.TaskStatus.last_attempt_status)
}

// -------------------------------------------------------------------

// AttemptStatus

// .google.protobuf.Timestamp schedule_time = 1;
inline bool AttemptStatus::has_schedule_time() const {
  return this != internal_default_instance() && schedule_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& AttemptStatus::_internal_schedule_time() const {
  return *schedule_time_;
}
inline const ::google::protobuf::Timestamp& AttemptStatus::schedule_time() const {
  const ::google::protobuf::Timestamp* p = schedule_time_;
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.AttemptStatus.schedule_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* AttemptStatus::release_schedule_time() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.AttemptStatus.schedule_time)
  
  ::google::protobuf::Timestamp* temp = schedule_time_;
  schedule_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* AttemptStatus::mutable_schedule_time() {
  
  if (schedule_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    schedule_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.AttemptStatus.schedule_time)
  return schedule_time_;
}
inline void AttemptStatus::set_allocated_schedule_time(::google::protobuf::Timestamp* schedule_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(schedule_time_);
  }
  if (schedule_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(schedule_time)->GetArena();
    if (message_arena != submessage_arena) {
      schedule_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, schedule_time, submessage_arena);
    }
    
  } else {
    
  }
  schedule_time_ = schedule_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.AttemptStatus.schedule_time)
}

// .google.protobuf.Timestamp dispatch_time = 2;
inline bool AttemptStatus::has_dispatch_time() const {
  return this != internal_default_instance() && dispatch_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& AttemptStatus::_internal_dispatch_time() const {
  return *dispatch_time_;
}
inline const ::google::protobuf::Timestamp& AttemptStatus::dispatch_time() const {
  const ::google::protobuf::Timestamp* p = dispatch_time_;
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.AttemptStatus.dispatch_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* AttemptStatus::release_dispatch_time() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.AttemptStatus.dispatch_time)
  
  ::google::protobuf::Timestamp* temp = dispatch_time_;
  dispatch_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* AttemptStatus::mutable_dispatch_time() {
  
  if (dispatch_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    dispatch_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.AttemptStatus.dispatch_time)
  return dispatch_time_;
}
inline void AttemptStatus::set_allocated_dispatch_time(::google::protobuf::Timestamp* dispatch_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dispatch_time_);
  }
  if (dispatch_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(dispatch_time)->GetArena();
    if (message_arena != submessage_arena) {
      dispatch_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dispatch_time, submessage_arena);
    }
    
  } else {
    
  }
  dispatch_time_ = dispatch_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.AttemptStatus.dispatch_time)
}

// .google.protobuf.Timestamp response_time = 3;
inline bool AttemptStatus::has_response_time() const {
  return this != internal_default_instance() && response_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& AttemptStatus::_internal_response_time() const {
  return *response_time_;
}
inline const ::google::protobuf::Timestamp& AttemptStatus::response_time() const {
  const ::google::protobuf::Timestamp* p = response_time_;
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.AttemptStatus.response_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* AttemptStatus::release_response_time() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.AttemptStatus.response_time)
  
  ::google::protobuf::Timestamp* temp = response_time_;
  response_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* AttemptStatus::mutable_response_time() {
  
  if (response_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    response_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.AttemptStatus.response_time)
  return response_time_;
}
inline void AttemptStatus::set_allocated_response_time(::google::protobuf::Timestamp* response_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(response_time_);
  }
  if (response_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(response_time)->GetArena();
    if (message_arena != submessage_arena) {
      response_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, response_time, submessage_arena);
    }
    
  } else {
    
  }
  response_time_ = response_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.AttemptStatus.response_time)
}

// .google.rpc.Status response_status = 4;
inline bool AttemptStatus::has_response_status() const {
  return this != internal_default_instance() && response_status_ != NULL;
}
inline const ::google::rpc::Status& AttemptStatus::_internal_response_status() const {
  return *response_status_;
}
inline const ::google::rpc::Status& AttemptStatus::response_status() const {
  const ::google::rpc::Status* p = response_status_;
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.AttemptStatus.response_status)
  return p != NULL ? *p : *reinterpret_cast<const ::google::rpc::Status*>(
      &::google::rpc::_Status_default_instance_);
}
inline ::google::rpc::Status* AttemptStatus::release_response_status() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.AttemptStatus.response_status)
  
  ::google::rpc::Status* temp = response_status_;
  response_status_ = NULL;
  return temp;
}
inline ::google::rpc::Status* AttemptStatus::mutable_response_status() {
  
  if (response_status_ == NULL) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaNoVirtual());
    response_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.AttemptStatus.response_status)
  return response_status_;
}
inline void AttemptStatus::set_allocated_response_status(::google::rpc::Status* response_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(response_status_);
  }
  if (response_status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      response_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, response_status, submessage_arena);
    }
    
  } else {
    
  }
  response_status_ = response_status;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.AttemptStatus.response_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2beta2
}  // namespace tasks
}  // namespace cloud
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::cloud::tasks::v2beta2::Task_View> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::tasks::v2beta2::Task_View>() {
  return ::google::cloud::tasks::v2beta2::Task_View_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto
