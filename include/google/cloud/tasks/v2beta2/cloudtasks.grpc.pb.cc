// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/cloud/tasks/v2beta2/cloudtasks.proto

#include "google/cloud/tasks/v2beta2/cloudtasks.pb.h"
#include "google/cloud/tasks/v2beta2/cloudtasks.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace cloud {
namespace tasks {
namespace v2beta2 {

static const char* CloudTasks_method_names[] = {
  "/google.cloud.tasks.v2beta2.CloudTasks/ListQueues",
  "/google.cloud.tasks.v2beta2.CloudTasks/GetQueue",
  "/google.cloud.tasks.v2beta2.CloudTasks/CreateQueue",
  "/google.cloud.tasks.v2beta2.CloudTasks/UpdateQueue",
  "/google.cloud.tasks.v2beta2.CloudTasks/DeleteQueue",
  "/google.cloud.tasks.v2beta2.CloudTasks/PurgeQueue",
  "/google.cloud.tasks.v2beta2.CloudTasks/PauseQueue",
  "/google.cloud.tasks.v2beta2.CloudTasks/ResumeQueue",
  "/google.cloud.tasks.v2beta2.CloudTasks/GetIamPolicy",
  "/google.cloud.tasks.v2beta2.CloudTasks/SetIamPolicy",
  "/google.cloud.tasks.v2beta2.CloudTasks/TestIamPermissions",
  "/google.cloud.tasks.v2beta2.CloudTasks/ListTasks",
  "/google.cloud.tasks.v2beta2.CloudTasks/GetTask",
  "/google.cloud.tasks.v2beta2.CloudTasks/CreateTask",
  "/google.cloud.tasks.v2beta2.CloudTasks/DeleteTask",
  "/google.cloud.tasks.v2beta2.CloudTasks/LeaseTasks",
  "/google.cloud.tasks.v2beta2.CloudTasks/AcknowledgeTask",
  "/google.cloud.tasks.v2beta2.CloudTasks/RenewLease",
  "/google.cloud.tasks.v2beta2.CloudTasks/CancelLease",
  "/google.cloud.tasks.v2beta2.CloudTasks/RunTask",
};

std::unique_ptr< CloudTasks::Stub> CloudTasks::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CloudTasks::Stub> stub(new CloudTasks::Stub(channel));
  return stub;
}

CloudTasks::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListQueues_(CloudTasks_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetQueue_(CloudTasks_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateQueue_(CloudTasks_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateQueue_(CloudTasks_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteQueue_(CloudTasks_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PurgeQueue_(CloudTasks_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PauseQueue_(CloudTasks_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResumeQueue_(CloudTasks_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIamPolicy_(CloudTasks_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetIamPolicy_(CloudTasks_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TestIamPermissions_(CloudTasks_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListTasks_(CloudTasks_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTask_(CloudTasks_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateTask_(CloudTasks_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteTask_(CloudTasks_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LeaseTasks_(CloudTasks_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AcknowledgeTask_(CloudTasks_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RenewLease_(CloudTasks_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelLease_(CloudTasks_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RunTask_(CloudTasks_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CloudTasks::Stub::ListQueues(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::ListQueuesRequest& request, ::google::cloud::tasks::v2beta2::ListQueuesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListQueues_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta2::ListQueuesResponse>* CloudTasks::Stub::AsyncListQueuesRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::ListQueuesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::tasks::v2beta2::ListQueuesResponse>::Create(channel_.get(), cq, rpcmethod_ListQueues_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta2::ListQueuesResponse>* CloudTasks::Stub::PrepareAsyncListQueuesRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::ListQueuesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::tasks::v2beta2::ListQueuesResponse>::Create(channel_.get(), cq, rpcmethod_ListQueues_, context, request, false);
}

::grpc::Status CloudTasks::Stub::GetQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::GetQueueRequest& request, ::google::cloud::tasks::v2beta2::Queue* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetQueue_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta2::Queue>* CloudTasks::Stub::AsyncGetQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::GetQueueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::tasks::v2beta2::Queue>::Create(channel_.get(), cq, rpcmethod_GetQueue_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta2::Queue>* CloudTasks::Stub::PrepareAsyncGetQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::GetQueueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::tasks::v2beta2::Queue>::Create(channel_.get(), cq, rpcmethod_GetQueue_, context, request, false);
}

::grpc::Status CloudTasks::Stub::CreateQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::CreateQueueRequest& request, ::google::cloud::tasks::v2beta2::Queue* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateQueue_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta2::Queue>* CloudTasks::Stub::AsyncCreateQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::CreateQueueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::tasks::v2beta2::Queue>::Create(channel_.get(), cq, rpcmethod_CreateQueue_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta2::Queue>* CloudTasks::Stub::PrepareAsyncCreateQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::CreateQueueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::tasks::v2beta2::Queue>::Create(channel_.get(), cq, rpcmethod_CreateQueue_, context, request, false);
}

::grpc::Status CloudTasks::Stub::UpdateQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::UpdateQueueRequest& request, ::google::cloud::tasks::v2beta2::Queue* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateQueue_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta2::Queue>* CloudTasks::Stub::AsyncUpdateQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::UpdateQueueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::tasks::v2beta2::Queue>::Create(channel_.get(), cq, rpcmethod_UpdateQueue_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta2::Queue>* CloudTasks::Stub::PrepareAsyncUpdateQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::UpdateQueueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::tasks::v2beta2::Queue>::Create(channel_.get(), cq, rpcmethod_UpdateQueue_, context, request, false);
}

::grpc::Status CloudTasks::Stub::DeleteQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::DeleteQueueRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteQueue_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CloudTasks::Stub::AsyncDeleteQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::DeleteQueueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteQueue_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CloudTasks::Stub::PrepareAsyncDeleteQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::DeleteQueueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteQueue_, context, request, false);
}

::grpc::Status CloudTasks::Stub::PurgeQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::PurgeQueueRequest& request, ::google::cloud::tasks::v2beta2::Queue* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PurgeQueue_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta2::Queue>* CloudTasks::Stub::AsyncPurgeQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::PurgeQueueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::tasks::v2beta2::Queue>::Create(channel_.get(), cq, rpcmethod_PurgeQueue_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta2::Queue>* CloudTasks::Stub::PrepareAsyncPurgeQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::PurgeQueueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::tasks::v2beta2::Queue>::Create(channel_.get(), cq, rpcmethod_PurgeQueue_, context, request, false);
}

::grpc::Status CloudTasks::Stub::PauseQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::PauseQueueRequest& request, ::google::cloud::tasks::v2beta2::Queue* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PauseQueue_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta2::Queue>* CloudTasks::Stub::AsyncPauseQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::PauseQueueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::tasks::v2beta2::Queue>::Create(channel_.get(), cq, rpcmethod_PauseQueue_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta2::Queue>* CloudTasks::Stub::PrepareAsyncPauseQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::PauseQueueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::tasks::v2beta2::Queue>::Create(channel_.get(), cq, rpcmethod_PauseQueue_, context, request, false);
}

::grpc::Status CloudTasks::Stub::ResumeQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::ResumeQueueRequest& request, ::google::cloud::tasks::v2beta2::Queue* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ResumeQueue_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta2::Queue>* CloudTasks::Stub::AsyncResumeQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::ResumeQueueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::tasks::v2beta2::Queue>::Create(channel_.get(), cq, rpcmethod_ResumeQueue_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta2::Queue>* CloudTasks::Stub::PrepareAsyncResumeQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::ResumeQueueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::tasks::v2beta2::Queue>::Create(channel_.get(), cq, rpcmethod_ResumeQueue_, context, request, false);
}

::grpc::Status CloudTasks::Stub::GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::google::iam::v1::Policy* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetIamPolicy_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* CloudTasks::Stub::AsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::Policy>::Create(channel_.get(), cq, rpcmethod_GetIamPolicy_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* CloudTasks::Stub::PrepareAsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::Policy>::Create(channel_.get(), cq, rpcmethod_GetIamPolicy_, context, request, false);
}

::grpc::Status CloudTasks::Stub::SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::google::iam::v1::Policy* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetIamPolicy_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* CloudTasks::Stub::AsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::Policy>::Create(channel_.get(), cq, rpcmethod_SetIamPolicy_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* CloudTasks::Stub::PrepareAsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::Policy>::Create(channel_.get(), cq, rpcmethod_SetIamPolicy_, context, request, false);
}

::grpc::Status CloudTasks::Stub::TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::google::iam::v1::TestIamPermissionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TestIamPermissions_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* CloudTasks::Stub::AsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::TestIamPermissionsResponse>::Create(channel_.get(), cq, rpcmethod_TestIamPermissions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* CloudTasks::Stub::PrepareAsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::TestIamPermissionsResponse>::Create(channel_.get(), cq, rpcmethod_TestIamPermissions_, context, request, false);
}

::grpc::Status CloudTasks::Stub::ListTasks(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::ListTasksRequest& request, ::google::cloud::tasks::v2beta2::ListTasksResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListTasks_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta2::ListTasksResponse>* CloudTasks::Stub::AsyncListTasksRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::ListTasksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::tasks::v2beta2::ListTasksResponse>::Create(channel_.get(), cq, rpcmethod_ListTasks_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta2::ListTasksResponse>* CloudTasks::Stub::PrepareAsyncListTasksRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::ListTasksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::tasks::v2beta2::ListTasksResponse>::Create(channel_.get(), cq, rpcmethod_ListTasks_, context, request, false);
}

::grpc::Status CloudTasks::Stub::GetTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::GetTaskRequest& request, ::google::cloud::tasks::v2beta2::Task* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTask_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta2::Task>* CloudTasks::Stub::AsyncGetTaskRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::tasks::v2beta2::Task>::Create(channel_.get(), cq, rpcmethod_GetTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta2::Task>* CloudTasks::Stub::PrepareAsyncGetTaskRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::tasks::v2beta2::Task>::Create(channel_.get(), cq, rpcmethod_GetTask_, context, request, false);
}

::grpc::Status CloudTasks::Stub::CreateTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::CreateTaskRequest& request, ::google::cloud::tasks::v2beta2::Task* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateTask_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta2::Task>* CloudTasks::Stub::AsyncCreateTaskRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::tasks::v2beta2::Task>::Create(channel_.get(), cq, rpcmethod_CreateTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta2::Task>* CloudTasks::Stub::PrepareAsyncCreateTaskRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::tasks::v2beta2::Task>::Create(channel_.get(), cq, rpcmethod_CreateTask_, context, request, false);
}

::grpc::Status CloudTasks::Stub::DeleteTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::DeleteTaskRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteTask_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CloudTasks::Stub::AsyncDeleteTaskRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CloudTasks::Stub::PrepareAsyncDeleteTaskRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteTask_, context, request, false);
}

::grpc::Status CloudTasks::Stub::LeaseTasks(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::LeaseTasksRequest& request, ::google::cloud::tasks::v2beta2::LeaseTasksResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LeaseTasks_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta2::LeaseTasksResponse>* CloudTasks::Stub::AsyncLeaseTasksRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::LeaseTasksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::tasks::v2beta2::LeaseTasksResponse>::Create(channel_.get(), cq, rpcmethod_LeaseTasks_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta2::LeaseTasksResponse>* CloudTasks::Stub::PrepareAsyncLeaseTasksRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::LeaseTasksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::tasks::v2beta2::LeaseTasksResponse>::Create(channel_.get(), cq, rpcmethod_LeaseTasks_, context, request, false);
}

::grpc::Status CloudTasks::Stub::AcknowledgeTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::AcknowledgeTaskRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AcknowledgeTask_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CloudTasks::Stub::AsyncAcknowledgeTaskRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::AcknowledgeTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_AcknowledgeTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CloudTasks::Stub::PrepareAsyncAcknowledgeTaskRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::AcknowledgeTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_AcknowledgeTask_, context, request, false);
}

::grpc::Status CloudTasks::Stub::RenewLease(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::RenewLeaseRequest& request, ::google::cloud::tasks::v2beta2::Task* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RenewLease_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta2::Task>* CloudTasks::Stub::AsyncRenewLeaseRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::RenewLeaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::tasks::v2beta2::Task>::Create(channel_.get(), cq, rpcmethod_RenewLease_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta2::Task>* CloudTasks::Stub::PrepareAsyncRenewLeaseRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::RenewLeaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::tasks::v2beta2::Task>::Create(channel_.get(), cq, rpcmethod_RenewLease_, context, request, false);
}

::grpc::Status CloudTasks::Stub::CancelLease(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::CancelLeaseRequest& request, ::google::cloud::tasks::v2beta2::Task* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CancelLease_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta2::Task>* CloudTasks::Stub::AsyncCancelLeaseRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::CancelLeaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::tasks::v2beta2::Task>::Create(channel_.get(), cq, rpcmethod_CancelLease_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta2::Task>* CloudTasks::Stub::PrepareAsyncCancelLeaseRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::CancelLeaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::tasks::v2beta2::Task>::Create(channel_.get(), cq, rpcmethod_CancelLease_, context, request, false);
}

::grpc::Status CloudTasks::Stub::RunTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::RunTaskRequest& request, ::google::cloud::tasks::v2beta2::Task* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RunTask_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta2::Task>* CloudTasks::Stub::AsyncRunTaskRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::RunTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::tasks::v2beta2::Task>::Create(channel_.get(), cq, rpcmethod_RunTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta2::Task>* CloudTasks::Stub::PrepareAsyncRunTaskRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta2::RunTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::tasks::v2beta2::Task>::Create(channel_.get(), cq, rpcmethod_RunTask_, context, request, false);
}

CloudTasks::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudTasks_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudTasks::Service, ::google::cloud::tasks::v2beta2::ListQueuesRequest, ::google::cloud::tasks::v2beta2::ListQueuesResponse>(
          std::mem_fn(&CloudTasks::Service::ListQueues), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudTasks_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudTasks::Service, ::google::cloud::tasks::v2beta2::GetQueueRequest, ::google::cloud::tasks::v2beta2::Queue>(
          std::mem_fn(&CloudTasks::Service::GetQueue), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudTasks_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudTasks::Service, ::google::cloud::tasks::v2beta2::CreateQueueRequest, ::google::cloud::tasks::v2beta2::Queue>(
          std::mem_fn(&CloudTasks::Service::CreateQueue), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudTasks_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudTasks::Service, ::google::cloud::tasks::v2beta2::UpdateQueueRequest, ::google::cloud::tasks::v2beta2::Queue>(
          std::mem_fn(&CloudTasks::Service::UpdateQueue), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudTasks_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudTasks::Service, ::google::cloud::tasks::v2beta2::DeleteQueueRequest, ::google::protobuf::Empty>(
          std::mem_fn(&CloudTasks::Service::DeleteQueue), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudTasks_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudTasks::Service, ::google::cloud::tasks::v2beta2::PurgeQueueRequest, ::google::cloud::tasks::v2beta2::Queue>(
          std::mem_fn(&CloudTasks::Service::PurgeQueue), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudTasks_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudTasks::Service, ::google::cloud::tasks::v2beta2::PauseQueueRequest, ::google::cloud::tasks::v2beta2::Queue>(
          std::mem_fn(&CloudTasks::Service::PauseQueue), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudTasks_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudTasks::Service, ::google::cloud::tasks::v2beta2::ResumeQueueRequest, ::google::cloud::tasks::v2beta2::Queue>(
          std::mem_fn(&CloudTasks::Service::ResumeQueue), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudTasks_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudTasks::Service, ::google::iam::v1::GetIamPolicyRequest, ::google::iam::v1::Policy>(
          std::mem_fn(&CloudTasks::Service::GetIamPolicy), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudTasks_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudTasks::Service, ::google::iam::v1::SetIamPolicyRequest, ::google::iam::v1::Policy>(
          std::mem_fn(&CloudTasks::Service::SetIamPolicy), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudTasks_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudTasks::Service, ::google::iam::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse>(
          std::mem_fn(&CloudTasks::Service::TestIamPermissions), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudTasks_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudTasks::Service, ::google::cloud::tasks::v2beta2::ListTasksRequest, ::google::cloud::tasks::v2beta2::ListTasksResponse>(
          std::mem_fn(&CloudTasks::Service::ListTasks), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudTasks_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudTasks::Service, ::google::cloud::tasks::v2beta2::GetTaskRequest, ::google::cloud::tasks::v2beta2::Task>(
          std::mem_fn(&CloudTasks::Service::GetTask), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudTasks_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudTasks::Service, ::google::cloud::tasks::v2beta2::CreateTaskRequest, ::google::cloud::tasks::v2beta2::Task>(
          std::mem_fn(&CloudTasks::Service::CreateTask), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudTasks_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudTasks::Service, ::google::cloud::tasks::v2beta2::DeleteTaskRequest, ::google::protobuf::Empty>(
          std::mem_fn(&CloudTasks::Service::DeleteTask), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudTasks_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudTasks::Service, ::google::cloud::tasks::v2beta2::LeaseTasksRequest, ::google::cloud::tasks::v2beta2::LeaseTasksResponse>(
          std::mem_fn(&CloudTasks::Service::LeaseTasks), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudTasks_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudTasks::Service, ::google::cloud::tasks::v2beta2::AcknowledgeTaskRequest, ::google::protobuf::Empty>(
          std::mem_fn(&CloudTasks::Service::AcknowledgeTask), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudTasks_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudTasks::Service, ::google::cloud::tasks::v2beta2::RenewLeaseRequest, ::google::cloud::tasks::v2beta2::Task>(
          std::mem_fn(&CloudTasks::Service::RenewLease), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudTasks_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudTasks::Service, ::google::cloud::tasks::v2beta2::CancelLeaseRequest, ::google::cloud::tasks::v2beta2::Task>(
          std::mem_fn(&CloudTasks::Service::CancelLease), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudTasks_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudTasks::Service, ::google::cloud::tasks::v2beta2::RunTaskRequest, ::google::cloud::tasks::v2beta2::Task>(
          std::mem_fn(&CloudTasks::Service::RunTask), this)));
}

CloudTasks::Service::~Service() {
}

::grpc::Status CloudTasks::Service::ListQueues(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta2::ListQueuesRequest* request, ::google::cloud::tasks::v2beta2::ListQueuesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudTasks::Service::GetQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta2::GetQueueRequest* request, ::google::cloud::tasks::v2beta2::Queue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudTasks::Service::CreateQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta2::CreateQueueRequest* request, ::google::cloud::tasks::v2beta2::Queue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudTasks::Service::UpdateQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta2::UpdateQueueRequest* request, ::google::cloud::tasks::v2beta2::Queue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudTasks::Service::DeleteQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta2::DeleteQueueRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudTasks::Service::PurgeQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta2::PurgeQueueRequest* request, ::google::cloud::tasks::v2beta2::Queue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudTasks::Service::PauseQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta2::PauseQueueRequest* request, ::google::cloud::tasks::v2beta2::Queue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudTasks::Service::ResumeQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta2::ResumeQueueRequest* request, ::google::cloud::tasks::v2beta2::Queue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudTasks::Service::GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudTasks::Service::SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudTasks::Service::TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudTasks::Service::ListTasks(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta2::ListTasksRequest* request, ::google::cloud::tasks::v2beta2::ListTasksResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudTasks::Service::GetTask(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta2::GetTaskRequest* request, ::google::cloud::tasks::v2beta2::Task* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudTasks::Service::CreateTask(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta2::CreateTaskRequest* request, ::google::cloud::tasks::v2beta2::Task* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudTasks::Service::DeleteTask(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta2::DeleteTaskRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudTasks::Service::LeaseTasks(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta2::LeaseTasksRequest* request, ::google::cloud::tasks::v2beta2::LeaseTasksResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudTasks::Service::AcknowledgeTask(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta2::AcknowledgeTaskRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudTasks::Service::RenewLease(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta2::RenewLeaseRequest* request, ::google::cloud::tasks::v2beta2::Task* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudTasks::Service::CancelLease(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta2::CancelLeaseRequest* request, ::google::cloud::tasks::v2beta2::Task* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudTasks::Service::RunTask(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta2::RunTaskRequest* request, ::google::cloud::tasks::v2beta2::Task* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace cloud
}  // namespace tasks
}  // namespace v2beta2

