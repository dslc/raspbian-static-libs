// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/tasks/v2beta2/queue.proto

#ifndef PROTOBUF_INCLUDED_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto
#define PROTOBUF_INCLUDED_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/cloud/tasks/v2beta2/target.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto 

namespace protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto
namespace google {
namespace cloud {
namespace tasks {
namespace v2beta2 {
class Queue;
class QueueDefaultTypeInternal;
extern QueueDefaultTypeInternal _Queue_default_instance_;
class RateLimits;
class RateLimitsDefaultTypeInternal;
extern RateLimitsDefaultTypeInternal _RateLimits_default_instance_;
class RetryConfig;
class RetryConfigDefaultTypeInternal;
extern RetryConfigDefaultTypeInternal _RetryConfig_default_instance_;
}  // namespace v2beta2
}  // namespace tasks
}  // namespace cloud
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::cloud::tasks::v2beta2::Queue* Arena::CreateMaybeMessage<::google::cloud::tasks::v2beta2::Queue>(Arena*);
template<> ::google::cloud::tasks::v2beta2::RateLimits* Arena::CreateMaybeMessage<::google::cloud::tasks::v2beta2::RateLimits>(Arena*);
template<> ::google::cloud::tasks::v2beta2::RetryConfig* Arena::CreateMaybeMessage<::google::cloud::tasks::v2beta2::RetryConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace cloud {
namespace tasks {
namespace v2beta2 {

enum Queue_State {
  Queue_State_STATE_UNSPECIFIED = 0,
  Queue_State_RUNNING = 1,
  Queue_State_PAUSED = 2,
  Queue_State_DISABLED = 3,
  Queue_State_Queue_State_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Queue_State_Queue_State_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Queue_State_IsValid(int value);
const Queue_State Queue_State_State_MIN = Queue_State_STATE_UNSPECIFIED;
const Queue_State Queue_State_State_MAX = Queue_State_DISABLED;
const int Queue_State_State_ARRAYSIZE = Queue_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* Queue_State_descriptor();
inline const ::std::string& Queue_State_Name(Queue_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    Queue_State_descriptor(), value);
}
inline bool Queue_State_Parse(
    const ::std::string& name, Queue_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Queue_State>(
    Queue_State_descriptor(), name, value);
}
// ===================================================================

class Queue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.tasks.v2beta2.Queue) */ {
 public:
  Queue();
  virtual ~Queue();

  Queue(const Queue& from);

  inline Queue& operator=(const Queue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Queue(Queue&& from) noexcept
    : Queue() {
    *this = ::std::move(from);
  }

  inline Queue& operator=(Queue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Queue& default_instance();

  enum TargetTypeCase {
    kAppEngineHttpTarget = 3,
    kPullTarget = 4,
    TARGET_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Queue* internal_default_instance() {
    return reinterpret_cast<const Queue*>(
               &_Queue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Queue* other);
  friend void swap(Queue& a, Queue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Queue* New() const final {
    return CreateMaybeMessage<Queue>(NULL);
  }

  Queue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Queue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Queue& from);
  void MergeFrom(const Queue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Queue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Queue_State State;
  static const State STATE_UNSPECIFIED =
    Queue_State_STATE_UNSPECIFIED;
  static const State RUNNING =
    Queue_State_RUNNING;
  static const State PAUSED =
    Queue_State_PAUSED;
  static const State DISABLED =
    Queue_State_DISABLED;
  static inline bool State_IsValid(int value) {
    return Queue_State_IsValid(value);
  }
  static const State State_MIN =
    Queue_State_State_MIN;
  static const State State_MAX =
    Queue_State_State_MAX;
  static const int State_ARRAYSIZE =
    Queue_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return Queue_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return Queue_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return Queue_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.cloud.tasks.v2beta2.RateLimits rate_limits = 5;
  bool has_rate_limits() const;
  void clear_rate_limits();
  static const int kRateLimitsFieldNumber = 5;
  private:
  const ::google::cloud::tasks::v2beta2::RateLimits& _internal_rate_limits() const;
  public:
  const ::google::cloud::tasks::v2beta2::RateLimits& rate_limits() const;
  ::google::cloud::tasks::v2beta2::RateLimits* release_rate_limits();
  ::google::cloud::tasks::v2beta2::RateLimits* mutable_rate_limits();
  void set_allocated_rate_limits(::google::cloud::tasks::v2beta2::RateLimits* rate_limits);

  // .google.cloud.tasks.v2beta2.RetryConfig retry_config = 6;
  bool has_retry_config() const;
  void clear_retry_config();
  static const int kRetryConfigFieldNumber = 6;
  private:
  const ::google::cloud::tasks::v2beta2::RetryConfig& _internal_retry_config() const;
  public:
  const ::google::cloud::tasks::v2beta2::RetryConfig& retry_config() const;
  ::google::cloud::tasks::v2beta2::RetryConfig* release_retry_config();
  ::google::cloud::tasks::v2beta2::RetryConfig* mutable_retry_config();
  void set_allocated_retry_config(::google::cloud::tasks::v2beta2::RetryConfig* retry_config);

  // .google.protobuf.Timestamp purge_time = 8;
  bool has_purge_time() const;
  void clear_purge_time();
  static const int kPurgeTimeFieldNumber = 8;
  private:
  const ::google::protobuf::Timestamp& _internal_purge_time() const;
  public:
  const ::google::protobuf::Timestamp& purge_time() const;
  ::google::protobuf::Timestamp* release_purge_time();
  ::google::protobuf::Timestamp* mutable_purge_time();
  void set_allocated_purge_time(::google::protobuf::Timestamp* purge_time);

  // .google.cloud.tasks.v2beta2.Queue.State state = 7;
  void clear_state();
  static const int kStateFieldNumber = 7;
  ::google::cloud::tasks::v2beta2::Queue_State state() const;
  void set_state(::google::cloud::tasks::v2beta2::Queue_State value);

  // .google.cloud.tasks.v2beta2.AppEngineHttpTarget app_engine_http_target = 3;
  bool has_app_engine_http_target() const;
  void clear_app_engine_http_target();
  static const int kAppEngineHttpTargetFieldNumber = 3;
  private:
  const ::google::cloud::tasks::v2beta2::AppEngineHttpTarget& _internal_app_engine_http_target() const;
  public:
  const ::google::cloud::tasks::v2beta2::AppEngineHttpTarget& app_engine_http_target() const;
  ::google::cloud::tasks::v2beta2::AppEngineHttpTarget* release_app_engine_http_target();
  ::google::cloud::tasks::v2beta2::AppEngineHttpTarget* mutable_app_engine_http_target();
  void set_allocated_app_engine_http_target(::google::cloud::tasks::v2beta2::AppEngineHttpTarget* app_engine_http_target);

  // .google.cloud.tasks.v2beta2.PullTarget pull_target = 4;
  bool has_pull_target() const;
  void clear_pull_target();
  static const int kPullTargetFieldNumber = 4;
  private:
  const ::google::cloud::tasks::v2beta2::PullTarget& _internal_pull_target() const;
  public:
  const ::google::cloud::tasks::v2beta2::PullTarget& pull_target() const;
  ::google::cloud::tasks::v2beta2::PullTarget* release_pull_target();
  ::google::cloud::tasks::v2beta2::PullTarget* mutable_pull_target();
  void set_allocated_pull_target(::google::cloud::tasks::v2beta2::PullTarget* pull_target);

  void clear_target_type();
  TargetTypeCase target_type_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.tasks.v2beta2.Queue)
 private:
  void set_has_app_engine_http_target();
  void set_has_pull_target();

  inline bool has_target_type() const;
  inline void clear_has_target_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::cloud::tasks::v2beta2::RateLimits* rate_limits_;
  ::google::cloud::tasks::v2beta2::RetryConfig* retry_config_;
  ::google::protobuf::Timestamp* purge_time_;
  int state_;
  union TargetTypeUnion {
    TargetTypeUnion() {}
    ::google::cloud::tasks::v2beta2::AppEngineHttpTarget* app_engine_http_target_;
    ::google::cloud::tasks::v2beta2::PullTarget* pull_target_;
  } target_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RateLimits : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.tasks.v2beta2.RateLimits) */ {
 public:
  RateLimits();
  virtual ~RateLimits();

  RateLimits(const RateLimits& from);

  inline RateLimits& operator=(const RateLimits& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RateLimits(RateLimits&& from) noexcept
    : RateLimits() {
    *this = ::std::move(from);
  }

  inline RateLimits& operator=(RateLimits&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RateLimits& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RateLimits* internal_default_instance() {
    return reinterpret_cast<const RateLimits*>(
               &_RateLimits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RateLimits* other);
  friend void swap(RateLimits& a, RateLimits& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RateLimits* New() const final {
    return CreateMaybeMessage<RateLimits>(NULL);
  }

  RateLimits* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RateLimits>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RateLimits& from);
  void MergeFrom(const RateLimits& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RateLimits* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double max_tasks_dispatched_per_second = 1;
  void clear_max_tasks_dispatched_per_second();
  static const int kMaxTasksDispatchedPerSecondFieldNumber = 1;
  double max_tasks_dispatched_per_second() const;
  void set_max_tasks_dispatched_per_second(double value);

  // int32 max_burst_size = 2;
  void clear_max_burst_size();
  static const int kMaxBurstSizeFieldNumber = 2;
  ::google::protobuf::int32 max_burst_size() const;
  void set_max_burst_size(::google::protobuf::int32 value);

  // int32 max_concurrent_tasks = 3;
  void clear_max_concurrent_tasks();
  static const int kMaxConcurrentTasksFieldNumber = 3;
  ::google::protobuf::int32 max_concurrent_tasks() const;
  void set_max_concurrent_tasks(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.cloud.tasks.v2beta2.RateLimits)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double max_tasks_dispatched_per_second_;
  ::google::protobuf::int32 max_burst_size_;
  ::google::protobuf::int32 max_concurrent_tasks_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RetryConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.tasks.v2beta2.RetryConfig) */ {
 public:
  RetryConfig();
  virtual ~RetryConfig();

  RetryConfig(const RetryConfig& from);

  inline RetryConfig& operator=(const RetryConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RetryConfig(RetryConfig&& from) noexcept
    : RetryConfig() {
    *this = ::std::move(from);
  }

  inline RetryConfig& operator=(RetryConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RetryConfig& default_instance();

  enum NumAttemptsCase {
    kMaxAttempts = 1,
    kUnlimitedAttempts = 2,
    NUM_ATTEMPTS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RetryConfig* internal_default_instance() {
    return reinterpret_cast<const RetryConfig*>(
               &_RetryConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RetryConfig* other);
  friend void swap(RetryConfig& a, RetryConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RetryConfig* New() const final {
    return CreateMaybeMessage<RetryConfig>(NULL);
  }

  RetryConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RetryConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RetryConfig& from);
  void MergeFrom(const RetryConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetryConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Duration max_retry_duration = 3;
  bool has_max_retry_duration() const;
  void clear_max_retry_duration();
  static const int kMaxRetryDurationFieldNumber = 3;
  private:
  const ::google::protobuf::Duration& _internal_max_retry_duration() const;
  public:
  const ::google::protobuf::Duration& max_retry_duration() const;
  ::google::protobuf::Duration* release_max_retry_duration();
  ::google::protobuf::Duration* mutable_max_retry_duration();
  void set_allocated_max_retry_duration(::google::protobuf::Duration* max_retry_duration);

  // .google.protobuf.Duration min_backoff = 4;
  bool has_min_backoff() const;
  void clear_min_backoff();
  static const int kMinBackoffFieldNumber = 4;
  private:
  const ::google::protobuf::Duration& _internal_min_backoff() const;
  public:
  const ::google::protobuf::Duration& min_backoff() const;
  ::google::protobuf::Duration* release_min_backoff();
  ::google::protobuf::Duration* mutable_min_backoff();
  void set_allocated_min_backoff(::google::protobuf::Duration* min_backoff);

  // .google.protobuf.Duration max_backoff = 5;
  bool has_max_backoff() const;
  void clear_max_backoff();
  static const int kMaxBackoffFieldNumber = 5;
  private:
  const ::google::protobuf::Duration& _internal_max_backoff() const;
  public:
  const ::google::protobuf::Duration& max_backoff() const;
  ::google::protobuf::Duration* release_max_backoff();
  ::google::protobuf::Duration* mutable_max_backoff();
  void set_allocated_max_backoff(::google::protobuf::Duration* max_backoff);

  // int32 max_doublings = 6;
  void clear_max_doublings();
  static const int kMaxDoublingsFieldNumber = 6;
  ::google::protobuf::int32 max_doublings() const;
  void set_max_doublings(::google::protobuf::int32 value);

  // int32 max_attempts = 1;
  private:
  bool has_max_attempts() const;
  public:
  void clear_max_attempts();
  static const int kMaxAttemptsFieldNumber = 1;
  ::google::protobuf::int32 max_attempts() const;
  void set_max_attempts(::google::protobuf::int32 value);

  // bool unlimited_attempts = 2;
  private:
  bool has_unlimited_attempts() const;
  public:
  void clear_unlimited_attempts();
  static const int kUnlimitedAttemptsFieldNumber = 2;
  bool unlimited_attempts() const;
  void set_unlimited_attempts(bool value);

  void clear_num_attempts();
  NumAttemptsCase num_attempts_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.tasks.v2beta2.RetryConfig)
 private:
  void set_has_max_attempts();
  void set_has_unlimited_attempts();

  inline bool has_num_attempts() const;
  inline void clear_has_num_attempts();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Duration* max_retry_duration_;
  ::google::protobuf::Duration* min_backoff_;
  ::google::protobuf::Duration* max_backoff_;
  ::google::protobuf::int32 max_doublings_;
  union NumAttemptsUnion {
    NumAttemptsUnion() {}
    ::google::protobuf::int32 max_attempts_;
    bool unlimited_attempts_;
  } num_attempts_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Queue

// string name = 1;
inline void Queue::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Queue::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.Queue.name)
  return name_.GetNoArena();
}
inline void Queue::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.Queue.name)
}
#if LANG_CXX11
inline void Queue::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.tasks.v2beta2.Queue.name)
}
#endif
inline void Queue::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.tasks.v2beta2.Queue.name)
}
inline void Queue::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.tasks.v2beta2.Queue.name)
}
inline ::std::string* Queue::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.Queue.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Queue::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.Queue.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Queue::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.Queue.name)
}

// .google.cloud.tasks.v2beta2.AppEngineHttpTarget app_engine_http_target = 3;
inline bool Queue::has_app_engine_http_target() const {
  return target_type_case() == kAppEngineHttpTarget;
}
inline void Queue::set_has_app_engine_http_target() {
  _oneof_case_[0] = kAppEngineHttpTarget;
}
inline const ::google::cloud::tasks::v2beta2::AppEngineHttpTarget& Queue::_internal_app_engine_http_target() const {
  return *target_type_.app_engine_http_target_;
}
inline ::google::cloud::tasks::v2beta2::AppEngineHttpTarget* Queue::release_app_engine_http_target() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.Queue.app_engine_http_target)
  if (has_app_engine_http_target()) {
    clear_has_target_type();
      ::google::cloud::tasks::v2beta2::AppEngineHttpTarget* temp = target_type_.app_engine_http_target_;
    target_type_.app_engine_http_target_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::tasks::v2beta2::AppEngineHttpTarget& Queue::app_engine_http_target() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.Queue.app_engine_http_target)
  return has_app_engine_http_target()
      ? *target_type_.app_engine_http_target_
      : *reinterpret_cast< ::google::cloud::tasks::v2beta2::AppEngineHttpTarget*>(&::google::cloud::tasks::v2beta2::_AppEngineHttpTarget_default_instance_);
}
inline ::google::cloud::tasks::v2beta2::AppEngineHttpTarget* Queue::mutable_app_engine_http_target() {
  if (!has_app_engine_http_target()) {
    clear_target_type();
    set_has_app_engine_http_target();
    target_type_.app_engine_http_target_ = CreateMaybeMessage< ::google::cloud::tasks::v2beta2::AppEngineHttpTarget >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.Queue.app_engine_http_target)
  return target_type_.app_engine_http_target_;
}

// .google.cloud.tasks.v2beta2.PullTarget pull_target = 4;
inline bool Queue::has_pull_target() const {
  return target_type_case() == kPullTarget;
}
inline void Queue::set_has_pull_target() {
  _oneof_case_[0] = kPullTarget;
}
inline const ::google::cloud::tasks::v2beta2::PullTarget& Queue::_internal_pull_target() const {
  return *target_type_.pull_target_;
}
inline ::google::cloud::tasks::v2beta2::PullTarget* Queue::release_pull_target() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.Queue.pull_target)
  if (has_pull_target()) {
    clear_has_target_type();
      ::google::cloud::tasks::v2beta2::PullTarget* temp = target_type_.pull_target_;
    target_type_.pull_target_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::tasks::v2beta2::PullTarget& Queue::pull_target() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.Queue.pull_target)
  return has_pull_target()
      ? *target_type_.pull_target_
      : *reinterpret_cast< ::google::cloud::tasks::v2beta2::PullTarget*>(&::google::cloud::tasks::v2beta2::_PullTarget_default_instance_);
}
inline ::google::cloud::tasks::v2beta2::PullTarget* Queue::mutable_pull_target() {
  if (!has_pull_target()) {
    clear_target_type();
    set_has_pull_target();
    target_type_.pull_target_ = CreateMaybeMessage< ::google::cloud::tasks::v2beta2::PullTarget >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.Queue.pull_target)
  return target_type_.pull_target_;
}

// .google.cloud.tasks.v2beta2.RateLimits rate_limits = 5;
inline bool Queue::has_rate_limits() const {
  return this != internal_default_instance() && rate_limits_ != NULL;
}
inline void Queue::clear_rate_limits() {
  if (GetArenaNoVirtual() == NULL && rate_limits_ != NULL) {
    delete rate_limits_;
  }
  rate_limits_ = NULL;
}
inline const ::google::cloud::tasks::v2beta2::RateLimits& Queue::_internal_rate_limits() const {
  return *rate_limits_;
}
inline const ::google::cloud::tasks::v2beta2::RateLimits& Queue::rate_limits() const {
  const ::google::cloud::tasks::v2beta2::RateLimits* p = rate_limits_;
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.Queue.rate_limits)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::tasks::v2beta2::RateLimits*>(
      &::google::cloud::tasks::v2beta2::_RateLimits_default_instance_);
}
inline ::google::cloud::tasks::v2beta2::RateLimits* Queue::release_rate_limits() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.Queue.rate_limits)
  
  ::google::cloud::tasks::v2beta2::RateLimits* temp = rate_limits_;
  rate_limits_ = NULL;
  return temp;
}
inline ::google::cloud::tasks::v2beta2::RateLimits* Queue::mutable_rate_limits() {
  
  if (rate_limits_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::tasks::v2beta2::RateLimits>(GetArenaNoVirtual());
    rate_limits_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.Queue.rate_limits)
  return rate_limits_;
}
inline void Queue::set_allocated_rate_limits(::google::cloud::tasks::v2beta2::RateLimits* rate_limits) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rate_limits_;
  }
  if (rate_limits) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rate_limits = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rate_limits, submessage_arena);
    }
    
  } else {
    
  }
  rate_limits_ = rate_limits;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.Queue.rate_limits)
}

// .google.cloud.tasks.v2beta2.RetryConfig retry_config = 6;
inline bool Queue::has_retry_config() const {
  return this != internal_default_instance() && retry_config_ != NULL;
}
inline void Queue::clear_retry_config() {
  if (GetArenaNoVirtual() == NULL && retry_config_ != NULL) {
    delete retry_config_;
  }
  retry_config_ = NULL;
}
inline const ::google::cloud::tasks::v2beta2::RetryConfig& Queue::_internal_retry_config() const {
  return *retry_config_;
}
inline const ::google::cloud::tasks::v2beta2::RetryConfig& Queue::retry_config() const {
  const ::google::cloud::tasks::v2beta2::RetryConfig* p = retry_config_;
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.Queue.retry_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::tasks::v2beta2::RetryConfig*>(
      &::google::cloud::tasks::v2beta2::_RetryConfig_default_instance_);
}
inline ::google::cloud::tasks::v2beta2::RetryConfig* Queue::release_retry_config() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.Queue.retry_config)
  
  ::google::cloud::tasks::v2beta2::RetryConfig* temp = retry_config_;
  retry_config_ = NULL;
  return temp;
}
inline ::google::cloud::tasks::v2beta2::RetryConfig* Queue::mutable_retry_config() {
  
  if (retry_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::tasks::v2beta2::RetryConfig>(GetArenaNoVirtual());
    retry_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.Queue.retry_config)
  return retry_config_;
}
inline void Queue::set_allocated_retry_config(::google::cloud::tasks::v2beta2::RetryConfig* retry_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete retry_config_;
  }
  if (retry_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      retry_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, retry_config, submessage_arena);
    }
    
  } else {
    
  }
  retry_config_ = retry_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.Queue.retry_config)
}

// .google.cloud.tasks.v2beta2.Queue.State state = 7;
inline void Queue::clear_state() {
  state_ = 0;
}
inline ::google::cloud::tasks::v2beta2::Queue_State Queue::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.Queue.state)
  return static_cast< ::google::cloud::tasks::v2beta2::Queue_State >(state_);
}
inline void Queue::set_state(::google::cloud::tasks::v2beta2::Queue_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.Queue.state)
}

// .google.protobuf.Timestamp purge_time = 8;
inline bool Queue::has_purge_time() const {
  return this != internal_default_instance() && purge_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Queue::_internal_purge_time() const {
  return *purge_time_;
}
inline const ::google::protobuf::Timestamp& Queue::purge_time() const {
  const ::google::protobuf::Timestamp* p = purge_time_;
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.Queue.purge_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Queue::release_purge_time() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.Queue.purge_time)
  
  ::google::protobuf::Timestamp* temp = purge_time_;
  purge_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Queue::mutable_purge_time() {
  
  if (purge_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    purge_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.Queue.purge_time)
  return purge_time_;
}
inline void Queue::set_allocated_purge_time(::google::protobuf::Timestamp* purge_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(purge_time_);
  }
  if (purge_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(purge_time)->GetArena();
    if (message_arena != submessage_arena) {
      purge_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, purge_time, submessage_arena);
    }
    
  } else {
    
  }
  purge_time_ = purge_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.Queue.purge_time)
}

inline bool Queue::has_target_type() const {
  return target_type_case() != TARGET_TYPE_NOT_SET;
}
inline void Queue::clear_has_target_type() {
  _oneof_case_[0] = TARGET_TYPE_NOT_SET;
}
inline Queue::TargetTypeCase Queue::target_type_case() const {
  return Queue::TargetTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RateLimits

// double max_tasks_dispatched_per_second = 1;
inline void RateLimits::clear_max_tasks_dispatched_per_second() {
  max_tasks_dispatched_per_second_ = 0;
}
inline double RateLimits::max_tasks_dispatched_per_second() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.RateLimits.max_tasks_dispatched_per_second)
  return max_tasks_dispatched_per_second_;
}
inline void RateLimits::set_max_tasks_dispatched_per_second(double value) {
  
  max_tasks_dispatched_per_second_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.RateLimits.max_tasks_dispatched_per_second)
}

// int32 max_burst_size = 2;
inline void RateLimits::clear_max_burst_size() {
  max_burst_size_ = 0;
}
inline ::google::protobuf::int32 RateLimits::max_burst_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.RateLimits.max_burst_size)
  return max_burst_size_;
}
inline void RateLimits::set_max_burst_size(::google::protobuf::int32 value) {
  
  max_burst_size_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.RateLimits.max_burst_size)
}

// int32 max_concurrent_tasks = 3;
inline void RateLimits::clear_max_concurrent_tasks() {
  max_concurrent_tasks_ = 0;
}
inline ::google::protobuf::int32 RateLimits::max_concurrent_tasks() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.RateLimits.max_concurrent_tasks)
  return max_concurrent_tasks_;
}
inline void RateLimits::set_max_concurrent_tasks(::google::protobuf::int32 value) {
  
  max_concurrent_tasks_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.RateLimits.max_concurrent_tasks)
}

// -------------------------------------------------------------------

// RetryConfig

// int32 max_attempts = 1;
inline bool RetryConfig::has_max_attempts() const {
  return num_attempts_case() == kMaxAttempts;
}
inline void RetryConfig::set_has_max_attempts() {
  _oneof_case_[0] = kMaxAttempts;
}
inline void RetryConfig::clear_max_attempts() {
  if (has_max_attempts()) {
    num_attempts_.max_attempts_ = 0;
    clear_has_num_attempts();
  }
}
inline ::google::protobuf::int32 RetryConfig::max_attempts() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.RetryConfig.max_attempts)
  if (has_max_attempts()) {
    return num_attempts_.max_attempts_;
  }
  return 0;
}
inline void RetryConfig::set_max_attempts(::google::protobuf::int32 value) {
  if (!has_max_attempts()) {
    clear_num_attempts();
    set_has_max_attempts();
  }
  num_attempts_.max_attempts_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.RetryConfig.max_attempts)
}

// bool unlimited_attempts = 2;
inline bool RetryConfig::has_unlimited_attempts() const {
  return num_attempts_case() == kUnlimitedAttempts;
}
inline void RetryConfig::set_has_unlimited_attempts() {
  _oneof_case_[0] = kUnlimitedAttempts;
}
inline void RetryConfig::clear_unlimited_attempts() {
  if (has_unlimited_attempts()) {
    num_attempts_.unlimited_attempts_ = false;
    clear_has_num_attempts();
  }
}
inline bool RetryConfig::unlimited_attempts() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.RetryConfig.unlimited_attempts)
  if (has_unlimited_attempts()) {
    return num_attempts_.unlimited_attempts_;
  }
  return false;
}
inline void RetryConfig::set_unlimited_attempts(bool value) {
  if (!has_unlimited_attempts()) {
    clear_num_attempts();
    set_has_unlimited_attempts();
  }
  num_attempts_.unlimited_attempts_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.RetryConfig.unlimited_attempts)
}

// .google.protobuf.Duration max_retry_duration = 3;
inline bool RetryConfig::has_max_retry_duration() const {
  return this != internal_default_instance() && max_retry_duration_ != NULL;
}
inline const ::google::protobuf::Duration& RetryConfig::_internal_max_retry_duration() const {
  return *max_retry_duration_;
}
inline const ::google::protobuf::Duration& RetryConfig::max_retry_duration() const {
  const ::google::protobuf::Duration* p = max_retry_duration_;
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.RetryConfig.max_retry_duration)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* RetryConfig::release_max_retry_duration() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.RetryConfig.max_retry_duration)
  
  ::google::protobuf::Duration* temp = max_retry_duration_;
  max_retry_duration_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* RetryConfig::mutable_max_retry_duration() {
  
  if (max_retry_duration_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    max_retry_duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.RetryConfig.max_retry_duration)
  return max_retry_duration_;
}
inline void RetryConfig::set_allocated_max_retry_duration(::google::protobuf::Duration* max_retry_duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(max_retry_duration_);
  }
  if (max_retry_duration) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(max_retry_duration)->GetArena();
    if (message_arena != submessage_arena) {
      max_retry_duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_retry_duration, submessage_arena);
    }
    
  } else {
    
  }
  max_retry_duration_ = max_retry_duration;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.RetryConfig.max_retry_duration)
}

// .google.protobuf.Duration min_backoff = 4;
inline bool RetryConfig::has_min_backoff() const {
  return this != internal_default_instance() && min_backoff_ != NULL;
}
inline const ::google::protobuf::Duration& RetryConfig::_internal_min_backoff() const {
  return *min_backoff_;
}
inline const ::google::protobuf::Duration& RetryConfig::min_backoff() const {
  const ::google::protobuf::Duration* p = min_backoff_;
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.RetryConfig.min_backoff)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* RetryConfig::release_min_backoff() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.RetryConfig.min_backoff)
  
  ::google::protobuf::Duration* temp = min_backoff_;
  min_backoff_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* RetryConfig::mutable_min_backoff() {
  
  if (min_backoff_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    min_backoff_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.RetryConfig.min_backoff)
  return min_backoff_;
}
inline void RetryConfig::set_allocated_min_backoff(::google::protobuf::Duration* min_backoff) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(min_backoff_);
  }
  if (min_backoff) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(min_backoff)->GetArena();
    if (message_arena != submessage_arena) {
      min_backoff = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, min_backoff, submessage_arena);
    }
    
  } else {
    
  }
  min_backoff_ = min_backoff;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.RetryConfig.min_backoff)
}

// .google.protobuf.Duration max_backoff = 5;
inline bool RetryConfig::has_max_backoff() const {
  return this != internal_default_instance() && max_backoff_ != NULL;
}
inline const ::google::protobuf::Duration& RetryConfig::_internal_max_backoff() const {
  return *max_backoff_;
}
inline const ::google::protobuf::Duration& RetryConfig::max_backoff() const {
  const ::google::protobuf::Duration* p = max_backoff_;
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.RetryConfig.max_backoff)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* RetryConfig::release_max_backoff() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.RetryConfig.max_backoff)
  
  ::google::protobuf::Duration* temp = max_backoff_;
  max_backoff_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* RetryConfig::mutable_max_backoff() {
  
  if (max_backoff_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    max_backoff_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.RetryConfig.max_backoff)
  return max_backoff_;
}
inline void RetryConfig::set_allocated_max_backoff(::google::protobuf::Duration* max_backoff) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(max_backoff_);
  }
  if (max_backoff) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(max_backoff)->GetArena();
    if (message_arena != submessage_arena) {
      max_backoff = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_backoff, submessage_arena);
    }
    
  } else {
    
  }
  max_backoff_ = max_backoff;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.RetryConfig.max_backoff)
}

// int32 max_doublings = 6;
inline void RetryConfig::clear_max_doublings() {
  max_doublings_ = 0;
}
inline ::google::protobuf::int32 RetryConfig::max_doublings() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.RetryConfig.max_doublings)
  return max_doublings_;
}
inline void RetryConfig::set_max_doublings(::google::protobuf::int32 value) {
  
  max_doublings_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.RetryConfig.max_doublings)
}

inline bool RetryConfig::has_num_attempts() const {
  return num_attempts_case() != NUM_ATTEMPTS_NOT_SET;
}
inline void RetryConfig::clear_has_num_attempts() {
  _oneof_case_[0] = NUM_ATTEMPTS_NOT_SET;
}
inline RetryConfig::NumAttemptsCase RetryConfig::num_attempts_case() const {
  return RetryConfig::NumAttemptsCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2beta2
}  // namespace tasks
}  // namespace cloud
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::cloud::tasks::v2beta2::Queue_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::tasks::v2beta2::Queue_State>() {
  return ::google::cloud::tasks::v2beta2::Queue_State_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fcloud_2ftasks_2fv2beta2_2fqueue_2eproto
