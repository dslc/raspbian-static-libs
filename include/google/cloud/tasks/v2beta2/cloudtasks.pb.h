// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/tasks/v2beta2/cloudtasks.proto

#ifndef PROTOBUF_INCLUDED_google_2fcloud_2ftasks_2fv2beta2_2fcloudtasks_2eproto
#define PROTOBUF_INCLUDED_google_2fcloud_2ftasks_2fv2beta2_2fcloudtasks_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/cloud/tasks/v2beta2/queue.pb.h"
#include "google/cloud/tasks/v2beta2/task.pb.h"
#include "google/iam/v1/iam_policy.pb.h"
#include "google/iam/v1/policy.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/rpc/code.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2ftasks_2fv2beta2_2fcloudtasks_2eproto 

namespace protobuf_google_2fcloud_2ftasks_2fv2beta2_2fcloudtasks_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[20];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fcloud_2ftasks_2fv2beta2_2fcloudtasks_2eproto
namespace google {
namespace cloud {
namespace tasks {
namespace v2beta2 {
class AcknowledgeTaskRequest;
class AcknowledgeTaskRequestDefaultTypeInternal;
extern AcknowledgeTaskRequestDefaultTypeInternal _AcknowledgeTaskRequest_default_instance_;
class CancelLeaseRequest;
class CancelLeaseRequestDefaultTypeInternal;
extern CancelLeaseRequestDefaultTypeInternal _CancelLeaseRequest_default_instance_;
class CreateQueueRequest;
class CreateQueueRequestDefaultTypeInternal;
extern CreateQueueRequestDefaultTypeInternal _CreateQueueRequest_default_instance_;
class CreateTaskRequest;
class CreateTaskRequestDefaultTypeInternal;
extern CreateTaskRequestDefaultTypeInternal _CreateTaskRequest_default_instance_;
class DeleteQueueRequest;
class DeleteQueueRequestDefaultTypeInternal;
extern DeleteQueueRequestDefaultTypeInternal _DeleteQueueRequest_default_instance_;
class DeleteTaskRequest;
class DeleteTaskRequestDefaultTypeInternal;
extern DeleteTaskRequestDefaultTypeInternal _DeleteTaskRequest_default_instance_;
class GetQueueRequest;
class GetQueueRequestDefaultTypeInternal;
extern GetQueueRequestDefaultTypeInternal _GetQueueRequest_default_instance_;
class GetTaskRequest;
class GetTaskRequestDefaultTypeInternal;
extern GetTaskRequestDefaultTypeInternal _GetTaskRequest_default_instance_;
class LeaseTasksRequest;
class LeaseTasksRequestDefaultTypeInternal;
extern LeaseTasksRequestDefaultTypeInternal _LeaseTasksRequest_default_instance_;
class LeaseTasksResponse;
class LeaseTasksResponseDefaultTypeInternal;
extern LeaseTasksResponseDefaultTypeInternal _LeaseTasksResponse_default_instance_;
class ListQueuesRequest;
class ListQueuesRequestDefaultTypeInternal;
extern ListQueuesRequestDefaultTypeInternal _ListQueuesRequest_default_instance_;
class ListQueuesResponse;
class ListQueuesResponseDefaultTypeInternal;
extern ListQueuesResponseDefaultTypeInternal _ListQueuesResponse_default_instance_;
class ListTasksRequest;
class ListTasksRequestDefaultTypeInternal;
extern ListTasksRequestDefaultTypeInternal _ListTasksRequest_default_instance_;
class ListTasksResponse;
class ListTasksResponseDefaultTypeInternal;
extern ListTasksResponseDefaultTypeInternal _ListTasksResponse_default_instance_;
class PauseQueueRequest;
class PauseQueueRequestDefaultTypeInternal;
extern PauseQueueRequestDefaultTypeInternal _PauseQueueRequest_default_instance_;
class PurgeQueueRequest;
class PurgeQueueRequestDefaultTypeInternal;
extern PurgeQueueRequestDefaultTypeInternal _PurgeQueueRequest_default_instance_;
class RenewLeaseRequest;
class RenewLeaseRequestDefaultTypeInternal;
extern RenewLeaseRequestDefaultTypeInternal _RenewLeaseRequest_default_instance_;
class ResumeQueueRequest;
class ResumeQueueRequestDefaultTypeInternal;
extern ResumeQueueRequestDefaultTypeInternal _ResumeQueueRequest_default_instance_;
class RunTaskRequest;
class RunTaskRequestDefaultTypeInternal;
extern RunTaskRequestDefaultTypeInternal _RunTaskRequest_default_instance_;
class UpdateQueueRequest;
class UpdateQueueRequestDefaultTypeInternal;
extern UpdateQueueRequestDefaultTypeInternal _UpdateQueueRequest_default_instance_;
}  // namespace v2beta2
}  // namespace tasks
}  // namespace cloud
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::cloud::tasks::v2beta2::AcknowledgeTaskRequest* Arena::CreateMaybeMessage<::google::cloud::tasks::v2beta2::AcknowledgeTaskRequest>(Arena*);
template<> ::google::cloud::tasks::v2beta2::CancelLeaseRequest* Arena::CreateMaybeMessage<::google::cloud::tasks::v2beta2::CancelLeaseRequest>(Arena*);
template<> ::google::cloud::tasks::v2beta2::CreateQueueRequest* Arena::CreateMaybeMessage<::google::cloud::tasks::v2beta2::CreateQueueRequest>(Arena*);
template<> ::google::cloud::tasks::v2beta2::CreateTaskRequest* Arena::CreateMaybeMessage<::google::cloud::tasks::v2beta2::CreateTaskRequest>(Arena*);
template<> ::google::cloud::tasks::v2beta2::DeleteQueueRequest* Arena::CreateMaybeMessage<::google::cloud::tasks::v2beta2::DeleteQueueRequest>(Arena*);
template<> ::google::cloud::tasks::v2beta2::DeleteTaskRequest* Arena::CreateMaybeMessage<::google::cloud::tasks::v2beta2::DeleteTaskRequest>(Arena*);
template<> ::google::cloud::tasks::v2beta2::GetQueueRequest* Arena::CreateMaybeMessage<::google::cloud::tasks::v2beta2::GetQueueRequest>(Arena*);
template<> ::google::cloud::tasks::v2beta2::GetTaskRequest* Arena::CreateMaybeMessage<::google::cloud::tasks::v2beta2::GetTaskRequest>(Arena*);
template<> ::google::cloud::tasks::v2beta2::LeaseTasksRequest* Arena::CreateMaybeMessage<::google::cloud::tasks::v2beta2::LeaseTasksRequest>(Arena*);
template<> ::google::cloud::tasks::v2beta2::LeaseTasksResponse* Arena::CreateMaybeMessage<::google::cloud::tasks::v2beta2::LeaseTasksResponse>(Arena*);
template<> ::google::cloud::tasks::v2beta2::ListQueuesRequest* Arena::CreateMaybeMessage<::google::cloud::tasks::v2beta2::ListQueuesRequest>(Arena*);
template<> ::google::cloud::tasks::v2beta2::ListQueuesResponse* Arena::CreateMaybeMessage<::google::cloud::tasks::v2beta2::ListQueuesResponse>(Arena*);
template<> ::google::cloud::tasks::v2beta2::ListTasksRequest* Arena::CreateMaybeMessage<::google::cloud::tasks::v2beta2::ListTasksRequest>(Arena*);
template<> ::google::cloud::tasks::v2beta2::ListTasksResponse* Arena::CreateMaybeMessage<::google::cloud::tasks::v2beta2::ListTasksResponse>(Arena*);
template<> ::google::cloud::tasks::v2beta2::PauseQueueRequest* Arena::CreateMaybeMessage<::google::cloud::tasks::v2beta2::PauseQueueRequest>(Arena*);
template<> ::google::cloud::tasks::v2beta2::PurgeQueueRequest* Arena::CreateMaybeMessage<::google::cloud::tasks::v2beta2::PurgeQueueRequest>(Arena*);
template<> ::google::cloud::tasks::v2beta2::RenewLeaseRequest* Arena::CreateMaybeMessage<::google::cloud::tasks::v2beta2::RenewLeaseRequest>(Arena*);
template<> ::google::cloud::tasks::v2beta2::ResumeQueueRequest* Arena::CreateMaybeMessage<::google::cloud::tasks::v2beta2::ResumeQueueRequest>(Arena*);
template<> ::google::cloud::tasks::v2beta2::RunTaskRequest* Arena::CreateMaybeMessage<::google::cloud::tasks::v2beta2::RunTaskRequest>(Arena*);
template<> ::google::cloud::tasks::v2beta2::UpdateQueueRequest* Arena::CreateMaybeMessage<::google::cloud::tasks::v2beta2::UpdateQueueRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace cloud {
namespace tasks {
namespace v2beta2 {

// ===================================================================

class ListQueuesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.tasks.v2beta2.ListQueuesRequest) */ {
 public:
  ListQueuesRequest();
  virtual ~ListQueuesRequest();

  ListQueuesRequest(const ListQueuesRequest& from);

  inline ListQueuesRequest& operator=(const ListQueuesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListQueuesRequest(ListQueuesRequest&& from) noexcept
    : ListQueuesRequest() {
    *this = ::std::move(from);
  }

  inline ListQueuesRequest& operator=(ListQueuesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListQueuesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListQueuesRequest* internal_default_instance() {
    return reinterpret_cast<const ListQueuesRequest*>(
               &_ListQueuesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ListQueuesRequest* other);
  friend void swap(ListQueuesRequest& a, ListQueuesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListQueuesRequest* New() const final {
    return CreateMaybeMessage<ListQueuesRequest>(NULL);
  }

  ListQueuesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListQueuesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListQueuesRequest& from);
  void MergeFrom(const ListQueuesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListQueuesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string filter = 2;
  void clear_filter();
  static const int kFilterFieldNumber = 2;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // string page_token = 4;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 4;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int32 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.cloud.tasks.v2beta2.ListQueuesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fcloudtasks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListQueuesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.tasks.v2beta2.ListQueuesResponse) */ {
 public:
  ListQueuesResponse();
  virtual ~ListQueuesResponse();

  ListQueuesResponse(const ListQueuesResponse& from);

  inline ListQueuesResponse& operator=(const ListQueuesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListQueuesResponse(ListQueuesResponse&& from) noexcept
    : ListQueuesResponse() {
    *this = ::std::move(from);
  }

  inline ListQueuesResponse& operator=(ListQueuesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListQueuesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListQueuesResponse* internal_default_instance() {
    return reinterpret_cast<const ListQueuesResponse*>(
               &_ListQueuesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ListQueuesResponse* other);
  friend void swap(ListQueuesResponse& a, ListQueuesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListQueuesResponse* New() const final {
    return CreateMaybeMessage<ListQueuesResponse>(NULL);
  }

  ListQueuesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListQueuesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListQueuesResponse& from);
  void MergeFrom(const ListQueuesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListQueuesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.tasks.v2beta2.Queue queues = 1;
  int queues_size() const;
  void clear_queues();
  static const int kQueuesFieldNumber = 1;
  ::google::cloud::tasks::v2beta2::Queue* mutable_queues(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::tasks::v2beta2::Queue >*
      mutable_queues();
  const ::google::cloud::tasks::v2beta2::Queue& queues(int index) const;
  ::google::cloud::tasks::v2beta2::Queue* add_queues();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::tasks::v2beta2::Queue >&
      queues() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.cloud.tasks.v2beta2.ListQueuesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::tasks::v2beta2::Queue > queues_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fcloudtasks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetQueueRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.tasks.v2beta2.GetQueueRequest) */ {
 public:
  GetQueueRequest();
  virtual ~GetQueueRequest();

  GetQueueRequest(const GetQueueRequest& from);

  inline GetQueueRequest& operator=(const GetQueueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetQueueRequest(GetQueueRequest&& from) noexcept
    : GetQueueRequest() {
    *this = ::std::move(from);
  }

  inline GetQueueRequest& operator=(GetQueueRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetQueueRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetQueueRequest* internal_default_instance() {
    return reinterpret_cast<const GetQueueRequest*>(
               &_GetQueueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GetQueueRequest* other);
  friend void swap(GetQueueRequest& a, GetQueueRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetQueueRequest* New() const final {
    return CreateMaybeMessage<GetQueueRequest>(NULL);
  }

  GetQueueRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetQueueRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetQueueRequest& from);
  void MergeFrom(const GetQueueRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetQueueRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.cloud.tasks.v2beta2.GetQueueRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fcloudtasks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateQueueRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.tasks.v2beta2.CreateQueueRequest) */ {
 public:
  CreateQueueRequest();
  virtual ~CreateQueueRequest();

  CreateQueueRequest(const CreateQueueRequest& from);

  inline CreateQueueRequest& operator=(const CreateQueueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateQueueRequest(CreateQueueRequest&& from) noexcept
    : CreateQueueRequest() {
    *this = ::std::move(from);
  }

  inline CreateQueueRequest& operator=(CreateQueueRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateQueueRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateQueueRequest* internal_default_instance() {
    return reinterpret_cast<const CreateQueueRequest*>(
               &_CreateQueueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CreateQueueRequest* other);
  friend void swap(CreateQueueRequest& a, CreateQueueRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateQueueRequest* New() const final {
    return CreateMaybeMessage<CreateQueueRequest>(NULL);
  }

  CreateQueueRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateQueueRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateQueueRequest& from);
  void MergeFrom(const CreateQueueRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateQueueRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // .google.cloud.tasks.v2beta2.Queue queue = 2;
  bool has_queue() const;
  void clear_queue();
  static const int kQueueFieldNumber = 2;
  private:
  const ::google::cloud::tasks::v2beta2::Queue& _internal_queue() const;
  public:
  const ::google::cloud::tasks::v2beta2::Queue& queue() const;
  ::google::cloud::tasks::v2beta2::Queue* release_queue();
  ::google::cloud::tasks::v2beta2::Queue* mutable_queue();
  void set_allocated_queue(::google::cloud::tasks::v2beta2::Queue* queue);

  // @@protoc_insertion_point(class_scope:google.cloud.tasks.v2beta2.CreateQueueRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::cloud::tasks::v2beta2::Queue* queue_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fcloudtasks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateQueueRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.tasks.v2beta2.UpdateQueueRequest) */ {
 public:
  UpdateQueueRequest();
  virtual ~UpdateQueueRequest();

  UpdateQueueRequest(const UpdateQueueRequest& from);

  inline UpdateQueueRequest& operator=(const UpdateQueueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateQueueRequest(UpdateQueueRequest&& from) noexcept
    : UpdateQueueRequest() {
    *this = ::std::move(from);
  }

  inline UpdateQueueRequest& operator=(UpdateQueueRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateQueueRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateQueueRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateQueueRequest*>(
               &_UpdateQueueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(UpdateQueueRequest* other);
  friend void swap(UpdateQueueRequest& a, UpdateQueueRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateQueueRequest* New() const final {
    return CreateMaybeMessage<UpdateQueueRequest>(NULL);
  }

  UpdateQueueRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateQueueRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateQueueRequest& from);
  void MergeFrom(const UpdateQueueRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateQueueRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.tasks.v2beta2.Queue queue = 1;
  bool has_queue() const;
  void clear_queue();
  static const int kQueueFieldNumber = 1;
  private:
  const ::google::cloud::tasks::v2beta2::Queue& _internal_queue() const;
  public:
  const ::google::cloud::tasks::v2beta2::Queue& queue() const;
  ::google::cloud::tasks::v2beta2::Queue* release_queue();
  ::google::cloud::tasks::v2beta2::Queue* mutable_queue();
  void set_allocated_queue(::google::cloud::tasks::v2beta2::Queue* queue);

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 2;
  private:
  const ::google::protobuf::FieldMask& _internal_update_mask() const;
  public:
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);

  // @@protoc_insertion_point(class_scope:google.cloud.tasks.v2beta2.UpdateQueueRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::cloud::tasks::v2beta2::Queue* queue_;
  ::google::protobuf::FieldMask* update_mask_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fcloudtasks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteQueueRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.tasks.v2beta2.DeleteQueueRequest) */ {
 public:
  DeleteQueueRequest();
  virtual ~DeleteQueueRequest();

  DeleteQueueRequest(const DeleteQueueRequest& from);

  inline DeleteQueueRequest& operator=(const DeleteQueueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteQueueRequest(DeleteQueueRequest&& from) noexcept
    : DeleteQueueRequest() {
    *this = ::std::move(from);
  }

  inline DeleteQueueRequest& operator=(DeleteQueueRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteQueueRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteQueueRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteQueueRequest*>(
               &_DeleteQueueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DeleteQueueRequest* other);
  friend void swap(DeleteQueueRequest& a, DeleteQueueRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteQueueRequest* New() const final {
    return CreateMaybeMessage<DeleteQueueRequest>(NULL);
  }

  DeleteQueueRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteQueueRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteQueueRequest& from);
  void MergeFrom(const DeleteQueueRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteQueueRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.cloud.tasks.v2beta2.DeleteQueueRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fcloudtasks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PurgeQueueRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.tasks.v2beta2.PurgeQueueRequest) */ {
 public:
  PurgeQueueRequest();
  virtual ~PurgeQueueRequest();

  PurgeQueueRequest(const PurgeQueueRequest& from);

  inline PurgeQueueRequest& operator=(const PurgeQueueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PurgeQueueRequest(PurgeQueueRequest&& from) noexcept
    : PurgeQueueRequest() {
    *this = ::std::move(from);
  }

  inline PurgeQueueRequest& operator=(PurgeQueueRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PurgeQueueRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PurgeQueueRequest* internal_default_instance() {
    return reinterpret_cast<const PurgeQueueRequest*>(
               &_PurgeQueueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(PurgeQueueRequest* other);
  friend void swap(PurgeQueueRequest& a, PurgeQueueRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PurgeQueueRequest* New() const final {
    return CreateMaybeMessage<PurgeQueueRequest>(NULL);
  }

  PurgeQueueRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PurgeQueueRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PurgeQueueRequest& from);
  void MergeFrom(const PurgeQueueRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PurgeQueueRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.cloud.tasks.v2beta2.PurgeQueueRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fcloudtasks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PauseQueueRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.tasks.v2beta2.PauseQueueRequest) */ {
 public:
  PauseQueueRequest();
  virtual ~PauseQueueRequest();

  PauseQueueRequest(const PauseQueueRequest& from);

  inline PauseQueueRequest& operator=(const PauseQueueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PauseQueueRequest(PauseQueueRequest&& from) noexcept
    : PauseQueueRequest() {
    *this = ::std::move(from);
  }

  inline PauseQueueRequest& operator=(PauseQueueRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PauseQueueRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PauseQueueRequest* internal_default_instance() {
    return reinterpret_cast<const PauseQueueRequest*>(
               &_PauseQueueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(PauseQueueRequest* other);
  friend void swap(PauseQueueRequest& a, PauseQueueRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PauseQueueRequest* New() const final {
    return CreateMaybeMessage<PauseQueueRequest>(NULL);
  }

  PauseQueueRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PauseQueueRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PauseQueueRequest& from);
  void MergeFrom(const PauseQueueRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PauseQueueRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.cloud.tasks.v2beta2.PauseQueueRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fcloudtasks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResumeQueueRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.tasks.v2beta2.ResumeQueueRequest) */ {
 public:
  ResumeQueueRequest();
  virtual ~ResumeQueueRequest();

  ResumeQueueRequest(const ResumeQueueRequest& from);

  inline ResumeQueueRequest& operator=(const ResumeQueueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResumeQueueRequest(ResumeQueueRequest&& from) noexcept
    : ResumeQueueRequest() {
    *this = ::std::move(from);
  }

  inline ResumeQueueRequest& operator=(ResumeQueueRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResumeQueueRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResumeQueueRequest* internal_default_instance() {
    return reinterpret_cast<const ResumeQueueRequest*>(
               &_ResumeQueueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ResumeQueueRequest* other);
  friend void swap(ResumeQueueRequest& a, ResumeQueueRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResumeQueueRequest* New() const final {
    return CreateMaybeMessage<ResumeQueueRequest>(NULL);
  }

  ResumeQueueRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResumeQueueRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResumeQueueRequest& from);
  void MergeFrom(const ResumeQueueRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResumeQueueRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.cloud.tasks.v2beta2.ResumeQueueRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fcloudtasks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListTasksRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.tasks.v2beta2.ListTasksRequest) */ {
 public:
  ListTasksRequest();
  virtual ~ListTasksRequest();

  ListTasksRequest(const ListTasksRequest& from);

  inline ListTasksRequest& operator=(const ListTasksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListTasksRequest(ListTasksRequest&& from) noexcept
    : ListTasksRequest() {
    *this = ::std::move(from);
  }

  inline ListTasksRequest& operator=(ListTasksRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListTasksRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTasksRequest* internal_default_instance() {
    return reinterpret_cast<const ListTasksRequest*>(
               &_ListTasksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ListTasksRequest* other);
  friend void swap(ListTasksRequest& a, ListTasksRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListTasksRequest* New() const final {
    return CreateMaybeMessage<ListTasksRequest>(NULL);
  }

  ListTasksRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListTasksRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListTasksRequest& from);
  void MergeFrom(const ListTasksRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTasksRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string order_by = 3;
  void clear_order_by();
  static const int kOrderByFieldNumber = 3;
  const ::std::string& order_by() const;
  void set_order_by(const ::std::string& value);
  #if LANG_CXX11
  void set_order_by(::std::string&& value);
  #endif
  void set_order_by(const char* value);
  void set_order_by(const char* value, size_t size);
  ::std::string* mutable_order_by();
  ::std::string* release_order_by();
  void set_allocated_order_by(::std::string* order_by);

  // string page_token = 5;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 5;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // .google.cloud.tasks.v2beta2.Task.View response_view = 2;
  void clear_response_view();
  static const int kResponseViewFieldNumber = 2;
  ::google::cloud::tasks::v2beta2::Task_View response_view() const;
  void set_response_view(::google::cloud::tasks::v2beta2::Task_View value);

  // int32 page_size = 4;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 4;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.cloud.tasks.v2beta2.ListTasksRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr order_by_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  int response_view_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fcloudtasks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListTasksResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.tasks.v2beta2.ListTasksResponse) */ {
 public:
  ListTasksResponse();
  virtual ~ListTasksResponse();

  ListTasksResponse(const ListTasksResponse& from);

  inline ListTasksResponse& operator=(const ListTasksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListTasksResponse(ListTasksResponse&& from) noexcept
    : ListTasksResponse() {
    *this = ::std::move(from);
  }

  inline ListTasksResponse& operator=(ListTasksResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListTasksResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTasksResponse* internal_default_instance() {
    return reinterpret_cast<const ListTasksResponse*>(
               &_ListTasksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ListTasksResponse* other);
  friend void swap(ListTasksResponse& a, ListTasksResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListTasksResponse* New() const final {
    return CreateMaybeMessage<ListTasksResponse>(NULL);
  }

  ListTasksResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListTasksResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListTasksResponse& from);
  void MergeFrom(const ListTasksResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTasksResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.tasks.v2beta2.Task tasks = 1;
  int tasks_size() const;
  void clear_tasks();
  static const int kTasksFieldNumber = 1;
  ::google::cloud::tasks::v2beta2::Task* mutable_tasks(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::tasks::v2beta2::Task >*
      mutable_tasks();
  const ::google::cloud::tasks::v2beta2::Task& tasks(int index) const;
  ::google::cloud::tasks::v2beta2::Task* add_tasks();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::tasks::v2beta2::Task >&
      tasks() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.cloud.tasks.v2beta2.ListTasksResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::tasks::v2beta2::Task > tasks_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fcloudtasks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetTaskRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.tasks.v2beta2.GetTaskRequest) */ {
 public:
  GetTaskRequest();
  virtual ~GetTaskRequest();

  GetTaskRequest(const GetTaskRequest& from);

  inline GetTaskRequest& operator=(const GetTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTaskRequest(GetTaskRequest&& from) noexcept
    : GetTaskRequest() {
    *this = ::std::move(from);
  }

  inline GetTaskRequest& operator=(GetTaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTaskRequest* internal_default_instance() {
    return reinterpret_cast<const GetTaskRequest*>(
               &_GetTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(GetTaskRequest* other);
  friend void swap(GetTaskRequest& a, GetTaskRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTaskRequest* New() const final {
    return CreateMaybeMessage<GetTaskRequest>(NULL);
  }

  GetTaskRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTaskRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTaskRequest& from);
  void MergeFrom(const GetTaskRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTaskRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.cloud.tasks.v2beta2.Task.View response_view = 2;
  void clear_response_view();
  static const int kResponseViewFieldNumber = 2;
  ::google::cloud::tasks::v2beta2::Task_View response_view() const;
  void set_response_view(::google::cloud::tasks::v2beta2::Task_View value);

  // @@protoc_insertion_point(class_scope:google.cloud.tasks.v2beta2.GetTaskRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int response_view_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fcloudtasks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateTaskRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.tasks.v2beta2.CreateTaskRequest) */ {
 public:
  CreateTaskRequest();
  virtual ~CreateTaskRequest();

  CreateTaskRequest(const CreateTaskRequest& from);

  inline CreateTaskRequest& operator=(const CreateTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateTaskRequest(CreateTaskRequest&& from) noexcept
    : CreateTaskRequest() {
    *this = ::std::move(from);
  }

  inline CreateTaskRequest& operator=(CreateTaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTaskRequest* internal_default_instance() {
    return reinterpret_cast<const CreateTaskRequest*>(
               &_CreateTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CreateTaskRequest* other);
  friend void swap(CreateTaskRequest& a, CreateTaskRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateTaskRequest* New() const final {
    return CreateMaybeMessage<CreateTaskRequest>(NULL);
  }

  CreateTaskRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateTaskRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateTaskRequest& from);
  void MergeFrom(const CreateTaskRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTaskRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // .google.cloud.tasks.v2beta2.Task task = 2;
  bool has_task() const;
  void clear_task();
  static const int kTaskFieldNumber = 2;
  private:
  const ::google::cloud::tasks::v2beta2::Task& _internal_task() const;
  public:
  const ::google::cloud::tasks::v2beta2::Task& task() const;
  ::google::cloud::tasks::v2beta2::Task* release_task();
  ::google::cloud::tasks::v2beta2::Task* mutable_task();
  void set_allocated_task(::google::cloud::tasks::v2beta2::Task* task);

  // .google.cloud.tasks.v2beta2.Task.View response_view = 3;
  void clear_response_view();
  static const int kResponseViewFieldNumber = 3;
  ::google::cloud::tasks::v2beta2::Task_View response_view() const;
  void set_response_view(::google::cloud::tasks::v2beta2::Task_View value);

  // @@protoc_insertion_point(class_scope:google.cloud.tasks.v2beta2.CreateTaskRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::cloud::tasks::v2beta2::Task* task_;
  int response_view_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fcloudtasks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteTaskRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.tasks.v2beta2.DeleteTaskRequest) */ {
 public:
  DeleteTaskRequest();
  virtual ~DeleteTaskRequest();

  DeleteTaskRequest(const DeleteTaskRequest& from);

  inline DeleteTaskRequest& operator=(const DeleteTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteTaskRequest(DeleteTaskRequest&& from) noexcept
    : DeleteTaskRequest() {
    *this = ::std::move(from);
  }

  inline DeleteTaskRequest& operator=(DeleteTaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteTaskRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteTaskRequest*>(
               &_DeleteTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(DeleteTaskRequest* other);
  friend void swap(DeleteTaskRequest& a, DeleteTaskRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteTaskRequest* New() const final {
    return CreateMaybeMessage<DeleteTaskRequest>(NULL);
  }

  DeleteTaskRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteTaskRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteTaskRequest& from);
  void MergeFrom(const DeleteTaskRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTaskRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.cloud.tasks.v2beta2.DeleteTaskRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fcloudtasks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LeaseTasksRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.tasks.v2beta2.LeaseTasksRequest) */ {
 public:
  LeaseTasksRequest();
  virtual ~LeaseTasksRequest();

  LeaseTasksRequest(const LeaseTasksRequest& from);

  inline LeaseTasksRequest& operator=(const LeaseTasksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeaseTasksRequest(LeaseTasksRequest&& from) noexcept
    : LeaseTasksRequest() {
    *this = ::std::move(from);
  }

  inline LeaseTasksRequest& operator=(LeaseTasksRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaseTasksRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaseTasksRequest* internal_default_instance() {
    return reinterpret_cast<const LeaseTasksRequest*>(
               &_LeaseTasksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(LeaseTasksRequest* other);
  friend void swap(LeaseTasksRequest& a, LeaseTasksRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeaseTasksRequest* New() const final {
    return CreateMaybeMessage<LeaseTasksRequest>(NULL);
  }

  LeaseTasksRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LeaseTasksRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LeaseTasksRequest& from);
  void MergeFrom(const LeaseTasksRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaseTasksRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string filter = 5;
  void clear_filter();
  static const int kFilterFieldNumber = 5;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // .google.protobuf.Duration lease_duration = 3;
  bool has_lease_duration() const;
  void clear_lease_duration();
  static const int kLeaseDurationFieldNumber = 3;
  private:
  const ::google::protobuf::Duration& _internal_lease_duration() const;
  public:
  const ::google::protobuf::Duration& lease_duration() const;
  ::google::protobuf::Duration* release_lease_duration();
  ::google::protobuf::Duration* mutable_lease_duration();
  void set_allocated_lease_duration(::google::protobuf::Duration* lease_duration);

  // int32 max_tasks = 2;
  void clear_max_tasks();
  static const int kMaxTasksFieldNumber = 2;
  ::google::protobuf::int32 max_tasks() const;
  void set_max_tasks(::google::protobuf::int32 value);

  // .google.cloud.tasks.v2beta2.Task.View response_view = 4;
  void clear_response_view();
  static const int kResponseViewFieldNumber = 4;
  ::google::cloud::tasks::v2beta2::Task_View response_view() const;
  void set_response_view(::google::cloud::tasks::v2beta2::Task_View value);

  // @@protoc_insertion_point(class_scope:google.cloud.tasks.v2beta2.LeaseTasksRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::Duration* lease_duration_;
  ::google::protobuf::int32 max_tasks_;
  int response_view_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fcloudtasks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LeaseTasksResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.tasks.v2beta2.LeaseTasksResponse) */ {
 public:
  LeaseTasksResponse();
  virtual ~LeaseTasksResponse();

  LeaseTasksResponse(const LeaseTasksResponse& from);

  inline LeaseTasksResponse& operator=(const LeaseTasksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeaseTasksResponse(LeaseTasksResponse&& from) noexcept
    : LeaseTasksResponse() {
    *this = ::std::move(from);
  }

  inline LeaseTasksResponse& operator=(LeaseTasksResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaseTasksResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaseTasksResponse* internal_default_instance() {
    return reinterpret_cast<const LeaseTasksResponse*>(
               &_LeaseTasksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(LeaseTasksResponse* other);
  friend void swap(LeaseTasksResponse& a, LeaseTasksResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeaseTasksResponse* New() const final {
    return CreateMaybeMessage<LeaseTasksResponse>(NULL);
  }

  LeaseTasksResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LeaseTasksResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LeaseTasksResponse& from);
  void MergeFrom(const LeaseTasksResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaseTasksResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.tasks.v2beta2.Task tasks = 1;
  int tasks_size() const;
  void clear_tasks();
  static const int kTasksFieldNumber = 1;
  ::google::cloud::tasks::v2beta2::Task* mutable_tasks(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::tasks::v2beta2::Task >*
      mutable_tasks();
  const ::google::cloud::tasks::v2beta2::Task& tasks(int index) const;
  ::google::cloud::tasks::v2beta2::Task* add_tasks();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::tasks::v2beta2::Task >&
      tasks() const;

  // @@protoc_insertion_point(class_scope:google.cloud.tasks.v2beta2.LeaseTasksResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::tasks::v2beta2::Task > tasks_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fcloudtasks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AcknowledgeTaskRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.tasks.v2beta2.AcknowledgeTaskRequest) */ {
 public:
  AcknowledgeTaskRequest();
  virtual ~AcknowledgeTaskRequest();

  AcknowledgeTaskRequest(const AcknowledgeTaskRequest& from);

  inline AcknowledgeTaskRequest& operator=(const AcknowledgeTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcknowledgeTaskRequest(AcknowledgeTaskRequest&& from) noexcept
    : AcknowledgeTaskRequest() {
    *this = ::std::move(from);
  }

  inline AcknowledgeTaskRequest& operator=(AcknowledgeTaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcknowledgeTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcknowledgeTaskRequest* internal_default_instance() {
    return reinterpret_cast<const AcknowledgeTaskRequest*>(
               &_AcknowledgeTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(AcknowledgeTaskRequest* other);
  friend void swap(AcknowledgeTaskRequest& a, AcknowledgeTaskRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcknowledgeTaskRequest* New() const final {
    return CreateMaybeMessage<AcknowledgeTaskRequest>(NULL);
  }

  AcknowledgeTaskRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AcknowledgeTaskRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AcknowledgeTaskRequest& from);
  void MergeFrom(const AcknowledgeTaskRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcknowledgeTaskRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.protobuf.Timestamp schedule_time = 2;
  bool has_schedule_time() const;
  void clear_schedule_time();
  static const int kScheduleTimeFieldNumber = 2;
  private:
  const ::google::protobuf::Timestamp& _internal_schedule_time() const;
  public:
  const ::google::protobuf::Timestamp& schedule_time() const;
  ::google::protobuf::Timestamp* release_schedule_time();
  ::google::protobuf::Timestamp* mutable_schedule_time();
  void set_allocated_schedule_time(::google::protobuf::Timestamp* schedule_time);

  // @@protoc_insertion_point(class_scope:google.cloud.tasks.v2beta2.AcknowledgeTaskRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Timestamp* schedule_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fcloudtasks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RenewLeaseRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.tasks.v2beta2.RenewLeaseRequest) */ {
 public:
  RenewLeaseRequest();
  virtual ~RenewLeaseRequest();

  RenewLeaseRequest(const RenewLeaseRequest& from);

  inline RenewLeaseRequest& operator=(const RenewLeaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RenewLeaseRequest(RenewLeaseRequest&& from) noexcept
    : RenewLeaseRequest() {
    *this = ::std::move(from);
  }

  inline RenewLeaseRequest& operator=(RenewLeaseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RenewLeaseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RenewLeaseRequest* internal_default_instance() {
    return reinterpret_cast<const RenewLeaseRequest*>(
               &_RenewLeaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(RenewLeaseRequest* other);
  friend void swap(RenewLeaseRequest& a, RenewLeaseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RenewLeaseRequest* New() const final {
    return CreateMaybeMessage<RenewLeaseRequest>(NULL);
  }

  RenewLeaseRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RenewLeaseRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RenewLeaseRequest& from);
  void MergeFrom(const RenewLeaseRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenewLeaseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.protobuf.Timestamp schedule_time = 2;
  bool has_schedule_time() const;
  void clear_schedule_time();
  static const int kScheduleTimeFieldNumber = 2;
  private:
  const ::google::protobuf::Timestamp& _internal_schedule_time() const;
  public:
  const ::google::protobuf::Timestamp& schedule_time() const;
  ::google::protobuf::Timestamp* release_schedule_time();
  ::google::protobuf::Timestamp* mutable_schedule_time();
  void set_allocated_schedule_time(::google::protobuf::Timestamp* schedule_time);

  // .google.protobuf.Duration lease_duration = 3;
  bool has_lease_duration() const;
  void clear_lease_duration();
  static const int kLeaseDurationFieldNumber = 3;
  private:
  const ::google::protobuf::Duration& _internal_lease_duration() const;
  public:
  const ::google::protobuf::Duration& lease_duration() const;
  ::google::protobuf::Duration* release_lease_duration();
  ::google::protobuf::Duration* mutable_lease_duration();
  void set_allocated_lease_duration(::google::protobuf::Duration* lease_duration);

  // .google.cloud.tasks.v2beta2.Task.View response_view = 4;
  void clear_response_view();
  static const int kResponseViewFieldNumber = 4;
  ::google::cloud::tasks::v2beta2::Task_View response_view() const;
  void set_response_view(::google::cloud::tasks::v2beta2::Task_View value);

  // @@protoc_insertion_point(class_scope:google.cloud.tasks.v2beta2.RenewLeaseRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Timestamp* schedule_time_;
  ::google::protobuf::Duration* lease_duration_;
  int response_view_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fcloudtasks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CancelLeaseRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.tasks.v2beta2.CancelLeaseRequest) */ {
 public:
  CancelLeaseRequest();
  virtual ~CancelLeaseRequest();

  CancelLeaseRequest(const CancelLeaseRequest& from);

  inline CancelLeaseRequest& operator=(const CancelLeaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CancelLeaseRequest(CancelLeaseRequest&& from) noexcept
    : CancelLeaseRequest() {
    *this = ::std::move(from);
  }

  inline CancelLeaseRequest& operator=(CancelLeaseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CancelLeaseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelLeaseRequest* internal_default_instance() {
    return reinterpret_cast<const CancelLeaseRequest*>(
               &_CancelLeaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(CancelLeaseRequest* other);
  friend void swap(CancelLeaseRequest& a, CancelLeaseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CancelLeaseRequest* New() const final {
    return CreateMaybeMessage<CancelLeaseRequest>(NULL);
  }

  CancelLeaseRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CancelLeaseRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CancelLeaseRequest& from);
  void MergeFrom(const CancelLeaseRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelLeaseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.protobuf.Timestamp schedule_time = 2;
  bool has_schedule_time() const;
  void clear_schedule_time();
  static const int kScheduleTimeFieldNumber = 2;
  private:
  const ::google::protobuf::Timestamp& _internal_schedule_time() const;
  public:
  const ::google::protobuf::Timestamp& schedule_time() const;
  ::google::protobuf::Timestamp* release_schedule_time();
  ::google::protobuf::Timestamp* mutable_schedule_time();
  void set_allocated_schedule_time(::google::protobuf::Timestamp* schedule_time);

  // .google.cloud.tasks.v2beta2.Task.View response_view = 3;
  void clear_response_view();
  static const int kResponseViewFieldNumber = 3;
  ::google::cloud::tasks::v2beta2::Task_View response_view() const;
  void set_response_view(::google::cloud::tasks::v2beta2::Task_View value);

  // @@protoc_insertion_point(class_scope:google.cloud.tasks.v2beta2.CancelLeaseRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Timestamp* schedule_time_;
  int response_view_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fcloudtasks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RunTaskRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.tasks.v2beta2.RunTaskRequest) */ {
 public:
  RunTaskRequest();
  virtual ~RunTaskRequest();

  RunTaskRequest(const RunTaskRequest& from);

  inline RunTaskRequest& operator=(const RunTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RunTaskRequest(RunTaskRequest&& from) noexcept
    : RunTaskRequest() {
    *this = ::std::move(from);
  }

  inline RunTaskRequest& operator=(RunTaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RunTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunTaskRequest* internal_default_instance() {
    return reinterpret_cast<const RunTaskRequest*>(
               &_RunTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(RunTaskRequest* other);
  friend void swap(RunTaskRequest& a, RunTaskRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RunTaskRequest* New() const final {
    return CreateMaybeMessage<RunTaskRequest>(NULL);
  }

  RunTaskRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RunTaskRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RunTaskRequest& from);
  void MergeFrom(const RunTaskRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunTaskRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.cloud.tasks.v2beta2.Task.View response_view = 2;
  void clear_response_view();
  static const int kResponseViewFieldNumber = 2;
  ::google::cloud::tasks::v2beta2::Task_View response_view() const;
  void set_response_view(::google::cloud::tasks::v2beta2::Task_View value);

  // @@protoc_insertion_point(class_scope:google.cloud.tasks.v2beta2.RunTaskRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int response_view_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2fcloudtasks_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ListQueuesRequest

// string parent = 1;
inline void ListQueuesRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListQueuesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.ListQueuesRequest.parent)
  return parent_.GetNoArena();
}
inline void ListQueuesRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.ListQueuesRequest.parent)
}
#if LANG_CXX11
inline void ListQueuesRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.tasks.v2beta2.ListQueuesRequest.parent)
}
#endif
inline void ListQueuesRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.tasks.v2beta2.ListQueuesRequest.parent)
}
inline void ListQueuesRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.tasks.v2beta2.ListQueuesRequest.parent)
}
inline ::std::string* ListQueuesRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.ListQueuesRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListQueuesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.ListQueuesRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListQueuesRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.ListQueuesRequest.parent)
}

// string filter = 2;
inline void ListQueuesRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListQueuesRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.ListQueuesRequest.filter)
  return filter_.GetNoArena();
}
inline void ListQueuesRequest::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.ListQueuesRequest.filter)
}
#if LANG_CXX11
inline void ListQueuesRequest::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.tasks.v2beta2.ListQueuesRequest.filter)
}
#endif
inline void ListQueuesRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.tasks.v2beta2.ListQueuesRequest.filter)
}
inline void ListQueuesRequest::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.tasks.v2beta2.ListQueuesRequest.filter)
}
inline ::std::string* ListQueuesRequest::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.ListQueuesRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListQueuesRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.ListQueuesRequest.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListQueuesRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.ListQueuesRequest.filter)
}

// int32 page_size = 3;
inline void ListQueuesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListQueuesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.ListQueuesRequest.page_size)
  return page_size_;
}
inline void ListQueuesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.ListQueuesRequest.page_size)
}

// string page_token = 4;
inline void ListQueuesRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListQueuesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.ListQueuesRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListQueuesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.ListQueuesRequest.page_token)
}
#if LANG_CXX11
inline void ListQueuesRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.tasks.v2beta2.ListQueuesRequest.page_token)
}
#endif
inline void ListQueuesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.tasks.v2beta2.ListQueuesRequest.page_token)
}
inline void ListQueuesRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.tasks.v2beta2.ListQueuesRequest.page_token)
}
inline ::std::string* ListQueuesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.ListQueuesRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListQueuesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.ListQueuesRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListQueuesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.ListQueuesRequest.page_token)
}

// -------------------------------------------------------------------

// ListQueuesResponse

// repeated .google.cloud.tasks.v2beta2.Queue queues = 1;
inline int ListQueuesResponse::queues_size() const {
  return queues_.size();
}
inline ::google::cloud::tasks::v2beta2::Queue* ListQueuesResponse::mutable_queues(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.ListQueuesResponse.queues)
  return queues_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::tasks::v2beta2::Queue >*
ListQueuesResponse::mutable_queues() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.tasks.v2beta2.ListQueuesResponse.queues)
  return &queues_;
}
inline const ::google::cloud::tasks::v2beta2::Queue& ListQueuesResponse::queues(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.ListQueuesResponse.queues)
  return queues_.Get(index);
}
inline ::google::cloud::tasks::v2beta2::Queue* ListQueuesResponse::add_queues() {
  // @@protoc_insertion_point(field_add:google.cloud.tasks.v2beta2.ListQueuesResponse.queues)
  return queues_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::tasks::v2beta2::Queue >&
ListQueuesResponse::queues() const {
  // @@protoc_insertion_point(field_list:google.cloud.tasks.v2beta2.ListQueuesResponse.queues)
  return queues_;
}

// string next_page_token = 2;
inline void ListQueuesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListQueuesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.ListQueuesResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListQueuesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.ListQueuesResponse.next_page_token)
}
#if LANG_CXX11
inline void ListQueuesResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.tasks.v2beta2.ListQueuesResponse.next_page_token)
}
#endif
inline void ListQueuesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.tasks.v2beta2.ListQueuesResponse.next_page_token)
}
inline void ListQueuesResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.tasks.v2beta2.ListQueuesResponse.next_page_token)
}
inline ::std::string* ListQueuesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.ListQueuesResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListQueuesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.ListQueuesResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListQueuesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.ListQueuesResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetQueueRequest

// string name = 1;
inline void GetQueueRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetQueueRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.GetQueueRequest.name)
  return name_.GetNoArena();
}
inline void GetQueueRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.GetQueueRequest.name)
}
#if LANG_CXX11
inline void GetQueueRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.tasks.v2beta2.GetQueueRequest.name)
}
#endif
inline void GetQueueRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.tasks.v2beta2.GetQueueRequest.name)
}
inline void GetQueueRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.tasks.v2beta2.GetQueueRequest.name)
}
inline ::std::string* GetQueueRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.GetQueueRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetQueueRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.GetQueueRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetQueueRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.GetQueueRequest.name)
}

// -------------------------------------------------------------------

// CreateQueueRequest

// string parent = 1;
inline void CreateQueueRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateQueueRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.CreateQueueRequest.parent)
  return parent_.GetNoArena();
}
inline void CreateQueueRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.CreateQueueRequest.parent)
}
#if LANG_CXX11
inline void CreateQueueRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.tasks.v2beta2.CreateQueueRequest.parent)
}
#endif
inline void CreateQueueRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.tasks.v2beta2.CreateQueueRequest.parent)
}
inline void CreateQueueRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.tasks.v2beta2.CreateQueueRequest.parent)
}
inline ::std::string* CreateQueueRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.CreateQueueRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateQueueRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.CreateQueueRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateQueueRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.CreateQueueRequest.parent)
}

// .google.cloud.tasks.v2beta2.Queue queue = 2;
inline bool CreateQueueRequest::has_queue() const {
  return this != internal_default_instance() && queue_ != NULL;
}
inline const ::google::cloud::tasks::v2beta2::Queue& CreateQueueRequest::_internal_queue() const {
  return *queue_;
}
inline const ::google::cloud::tasks::v2beta2::Queue& CreateQueueRequest::queue() const {
  const ::google::cloud::tasks::v2beta2::Queue* p = queue_;
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.CreateQueueRequest.queue)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::tasks::v2beta2::Queue*>(
      &::google::cloud::tasks::v2beta2::_Queue_default_instance_);
}
inline ::google::cloud::tasks::v2beta2::Queue* CreateQueueRequest::release_queue() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.CreateQueueRequest.queue)
  
  ::google::cloud::tasks::v2beta2::Queue* temp = queue_;
  queue_ = NULL;
  return temp;
}
inline ::google::cloud::tasks::v2beta2::Queue* CreateQueueRequest::mutable_queue() {
  
  if (queue_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::tasks::v2beta2::Queue>(GetArenaNoVirtual());
    queue_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.CreateQueueRequest.queue)
  return queue_;
}
inline void CreateQueueRequest::set_allocated_queue(::google::cloud::tasks::v2beta2::Queue* queue) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(queue_);
  }
  if (queue) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      queue = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, queue, submessage_arena);
    }
    
  } else {
    
  }
  queue_ = queue;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.CreateQueueRequest.queue)
}

// -------------------------------------------------------------------

// UpdateQueueRequest

// .google.cloud.tasks.v2beta2.Queue queue = 1;
inline bool UpdateQueueRequest::has_queue() const {
  return this != internal_default_instance() && queue_ != NULL;
}
inline const ::google::cloud::tasks::v2beta2::Queue& UpdateQueueRequest::_internal_queue() const {
  return *queue_;
}
inline const ::google::cloud::tasks::v2beta2::Queue& UpdateQueueRequest::queue() const {
  const ::google::cloud::tasks::v2beta2::Queue* p = queue_;
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.UpdateQueueRequest.queue)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::tasks::v2beta2::Queue*>(
      &::google::cloud::tasks::v2beta2::_Queue_default_instance_);
}
inline ::google::cloud::tasks::v2beta2::Queue* UpdateQueueRequest::release_queue() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.UpdateQueueRequest.queue)
  
  ::google::cloud::tasks::v2beta2::Queue* temp = queue_;
  queue_ = NULL;
  return temp;
}
inline ::google::cloud::tasks::v2beta2::Queue* UpdateQueueRequest::mutable_queue() {
  
  if (queue_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::tasks::v2beta2::Queue>(GetArenaNoVirtual());
    queue_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.UpdateQueueRequest.queue)
  return queue_;
}
inline void UpdateQueueRequest::set_allocated_queue(::google::cloud::tasks::v2beta2::Queue* queue) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(queue_);
  }
  if (queue) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      queue = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, queue, submessage_arena);
    }
    
  } else {
    
  }
  queue_ = queue;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.UpdateQueueRequest.queue)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateQueueRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline const ::google::protobuf::FieldMask& UpdateQueueRequest::_internal_update_mask() const {
  return *update_mask_;
}
inline const ::google::protobuf::FieldMask& UpdateQueueRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.UpdateQueueRequest.update_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateQueueRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.UpdateQueueRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateQueueRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::FieldMask>(GetArenaNoVirtual());
    update_mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.UpdateQueueRequest.update_mask)
  return update_mask_;
}
inline void UpdateQueueRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.UpdateQueueRequest.update_mask)
}

// -------------------------------------------------------------------

// DeleteQueueRequest

// string name = 1;
inline void DeleteQueueRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteQueueRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.DeleteQueueRequest.name)
  return name_.GetNoArena();
}
inline void DeleteQueueRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.DeleteQueueRequest.name)
}
#if LANG_CXX11
inline void DeleteQueueRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.tasks.v2beta2.DeleteQueueRequest.name)
}
#endif
inline void DeleteQueueRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.tasks.v2beta2.DeleteQueueRequest.name)
}
inline void DeleteQueueRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.tasks.v2beta2.DeleteQueueRequest.name)
}
inline ::std::string* DeleteQueueRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.DeleteQueueRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteQueueRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.DeleteQueueRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteQueueRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.DeleteQueueRequest.name)
}

// -------------------------------------------------------------------

// PurgeQueueRequest

// string name = 1;
inline void PurgeQueueRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PurgeQueueRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.PurgeQueueRequest.name)
  return name_.GetNoArena();
}
inline void PurgeQueueRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.PurgeQueueRequest.name)
}
#if LANG_CXX11
inline void PurgeQueueRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.tasks.v2beta2.PurgeQueueRequest.name)
}
#endif
inline void PurgeQueueRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.tasks.v2beta2.PurgeQueueRequest.name)
}
inline void PurgeQueueRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.tasks.v2beta2.PurgeQueueRequest.name)
}
inline ::std::string* PurgeQueueRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.PurgeQueueRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PurgeQueueRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.PurgeQueueRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PurgeQueueRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.PurgeQueueRequest.name)
}

// -------------------------------------------------------------------

// PauseQueueRequest

// string name = 1;
inline void PauseQueueRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PauseQueueRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.PauseQueueRequest.name)
  return name_.GetNoArena();
}
inline void PauseQueueRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.PauseQueueRequest.name)
}
#if LANG_CXX11
inline void PauseQueueRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.tasks.v2beta2.PauseQueueRequest.name)
}
#endif
inline void PauseQueueRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.tasks.v2beta2.PauseQueueRequest.name)
}
inline void PauseQueueRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.tasks.v2beta2.PauseQueueRequest.name)
}
inline ::std::string* PauseQueueRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.PauseQueueRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PauseQueueRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.PauseQueueRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PauseQueueRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.PauseQueueRequest.name)
}

// -------------------------------------------------------------------

// ResumeQueueRequest

// string name = 1;
inline void ResumeQueueRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResumeQueueRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.ResumeQueueRequest.name)
  return name_.GetNoArena();
}
inline void ResumeQueueRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.ResumeQueueRequest.name)
}
#if LANG_CXX11
inline void ResumeQueueRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.tasks.v2beta2.ResumeQueueRequest.name)
}
#endif
inline void ResumeQueueRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.tasks.v2beta2.ResumeQueueRequest.name)
}
inline void ResumeQueueRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.tasks.v2beta2.ResumeQueueRequest.name)
}
inline ::std::string* ResumeQueueRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.ResumeQueueRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResumeQueueRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.ResumeQueueRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResumeQueueRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.ResumeQueueRequest.name)
}

// -------------------------------------------------------------------

// ListTasksRequest

// string parent = 1;
inline void ListTasksRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListTasksRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.ListTasksRequest.parent)
  return parent_.GetNoArena();
}
inline void ListTasksRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.ListTasksRequest.parent)
}
#if LANG_CXX11
inline void ListTasksRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.tasks.v2beta2.ListTasksRequest.parent)
}
#endif
inline void ListTasksRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.tasks.v2beta2.ListTasksRequest.parent)
}
inline void ListTasksRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.tasks.v2beta2.ListTasksRequest.parent)
}
inline ::std::string* ListTasksRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.ListTasksRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListTasksRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.ListTasksRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListTasksRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.ListTasksRequest.parent)
}

// .google.cloud.tasks.v2beta2.Task.View response_view = 2;
inline void ListTasksRequest::clear_response_view() {
  response_view_ = 0;
}
inline ::google::cloud::tasks::v2beta2::Task_View ListTasksRequest::response_view() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.ListTasksRequest.response_view)
  return static_cast< ::google::cloud::tasks::v2beta2::Task_View >(response_view_);
}
inline void ListTasksRequest::set_response_view(::google::cloud::tasks::v2beta2::Task_View value) {
  
  response_view_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.ListTasksRequest.response_view)
}

// string order_by = 3;
inline void ListTasksRequest::clear_order_by() {
  order_by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListTasksRequest::order_by() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.ListTasksRequest.order_by)
  return order_by_.GetNoArena();
}
inline void ListTasksRequest::set_order_by(const ::std::string& value) {
  
  order_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.ListTasksRequest.order_by)
}
#if LANG_CXX11
inline void ListTasksRequest::set_order_by(::std::string&& value) {
  
  order_by_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.tasks.v2beta2.ListTasksRequest.order_by)
}
#endif
inline void ListTasksRequest::set_order_by(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  order_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.tasks.v2beta2.ListTasksRequest.order_by)
}
inline void ListTasksRequest::set_order_by(const char* value, size_t size) {
  
  order_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.tasks.v2beta2.ListTasksRequest.order_by)
}
inline ::std::string* ListTasksRequest::mutable_order_by() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.ListTasksRequest.order_by)
  return order_by_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListTasksRequest::release_order_by() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.ListTasksRequest.order_by)
  
  return order_by_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListTasksRequest::set_allocated_order_by(::std::string* order_by) {
  if (order_by != NULL) {
    
  } else {
    
  }
  order_by_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_by);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.ListTasksRequest.order_by)
}

// int32 page_size = 4;
inline void ListTasksRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListTasksRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.ListTasksRequest.page_size)
  return page_size_;
}
inline void ListTasksRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.ListTasksRequest.page_size)
}

// string page_token = 5;
inline void ListTasksRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListTasksRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.ListTasksRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListTasksRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.ListTasksRequest.page_token)
}
#if LANG_CXX11
inline void ListTasksRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.tasks.v2beta2.ListTasksRequest.page_token)
}
#endif
inline void ListTasksRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.tasks.v2beta2.ListTasksRequest.page_token)
}
inline void ListTasksRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.tasks.v2beta2.ListTasksRequest.page_token)
}
inline ::std::string* ListTasksRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.ListTasksRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListTasksRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.ListTasksRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListTasksRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.ListTasksRequest.page_token)
}

// -------------------------------------------------------------------

// ListTasksResponse

// repeated .google.cloud.tasks.v2beta2.Task tasks = 1;
inline int ListTasksResponse::tasks_size() const {
  return tasks_.size();
}
inline ::google::cloud::tasks::v2beta2::Task* ListTasksResponse::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.ListTasksResponse.tasks)
  return tasks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::tasks::v2beta2::Task >*
ListTasksResponse::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.tasks.v2beta2.ListTasksResponse.tasks)
  return &tasks_;
}
inline const ::google::cloud::tasks::v2beta2::Task& ListTasksResponse::tasks(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.ListTasksResponse.tasks)
  return tasks_.Get(index);
}
inline ::google::cloud::tasks::v2beta2::Task* ListTasksResponse::add_tasks() {
  // @@protoc_insertion_point(field_add:google.cloud.tasks.v2beta2.ListTasksResponse.tasks)
  return tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::tasks::v2beta2::Task >&
ListTasksResponse::tasks() const {
  // @@protoc_insertion_point(field_list:google.cloud.tasks.v2beta2.ListTasksResponse.tasks)
  return tasks_;
}

// string next_page_token = 2;
inline void ListTasksResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListTasksResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.ListTasksResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListTasksResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.ListTasksResponse.next_page_token)
}
#if LANG_CXX11
inline void ListTasksResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.tasks.v2beta2.ListTasksResponse.next_page_token)
}
#endif
inline void ListTasksResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.tasks.v2beta2.ListTasksResponse.next_page_token)
}
inline void ListTasksResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.tasks.v2beta2.ListTasksResponse.next_page_token)
}
inline ::std::string* ListTasksResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.ListTasksResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListTasksResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.ListTasksResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListTasksResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.ListTasksResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetTaskRequest

// string name = 1;
inline void GetTaskRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetTaskRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.GetTaskRequest.name)
  return name_.GetNoArena();
}
inline void GetTaskRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.GetTaskRequest.name)
}
#if LANG_CXX11
inline void GetTaskRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.tasks.v2beta2.GetTaskRequest.name)
}
#endif
inline void GetTaskRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.tasks.v2beta2.GetTaskRequest.name)
}
inline void GetTaskRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.tasks.v2beta2.GetTaskRequest.name)
}
inline ::std::string* GetTaskRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.GetTaskRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTaskRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.GetTaskRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTaskRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.GetTaskRequest.name)
}

// .google.cloud.tasks.v2beta2.Task.View response_view = 2;
inline void GetTaskRequest::clear_response_view() {
  response_view_ = 0;
}
inline ::google::cloud::tasks::v2beta2::Task_View GetTaskRequest::response_view() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.GetTaskRequest.response_view)
  return static_cast< ::google::cloud::tasks::v2beta2::Task_View >(response_view_);
}
inline void GetTaskRequest::set_response_view(::google::cloud::tasks::v2beta2::Task_View value) {
  
  response_view_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.GetTaskRequest.response_view)
}

// -------------------------------------------------------------------

// CreateTaskRequest

// string parent = 1;
inline void CreateTaskRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateTaskRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.CreateTaskRequest.parent)
  return parent_.GetNoArena();
}
inline void CreateTaskRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.CreateTaskRequest.parent)
}
#if LANG_CXX11
inline void CreateTaskRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.tasks.v2beta2.CreateTaskRequest.parent)
}
#endif
inline void CreateTaskRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.tasks.v2beta2.CreateTaskRequest.parent)
}
inline void CreateTaskRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.tasks.v2beta2.CreateTaskRequest.parent)
}
inline ::std::string* CreateTaskRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.CreateTaskRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateTaskRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.CreateTaskRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTaskRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.CreateTaskRequest.parent)
}

// .google.cloud.tasks.v2beta2.Task task = 2;
inline bool CreateTaskRequest::has_task() const {
  return this != internal_default_instance() && task_ != NULL;
}
inline const ::google::cloud::tasks::v2beta2::Task& CreateTaskRequest::_internal_task() const {
  return *task_;
}
inline const ::google::cloud::tasks::v2beta2::Task& CreateTaskRequest::task() const {
  const ::google::cloud::tasks::v2beta2::Task* p = task_;
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.CreateTaskRequest.task)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::tasks::v2beta2::Task*>(
      &::google::cloud::tasks::v2beta2::_Task_default_instance_);
}
inline ::google::cloud::tasks::v2beta2::Task* CreateTaskRequest::release_task() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.CreateTaskRequest.task)
  
  ::google::cloud::tasks::v2beta2::Task* temp = task_;
  task_ = NULL;
  return temp;
}
inline ::google::cloud::tasks::v2beta2::Task* CreateTaskRequest::mutable_task() {
  
  if (task_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::tasks::v2beta2::Task>(GetArenaNoVirtual());
    task_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.CreateTaskRequest.task)
  return task_;
}
inline void CreateTaskRequest::set_allocated_task(::google::cloud::tasks::v2beta2::Task* task) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(task_);
  }
  if (task) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      task = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    
  } else {
    
  }
  task_ = task;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.CreateTaskRequest.task)
}

// .google.cloud.tasks.v2beta2.Task.View response_view = 3;
inline void CreateTaskRequest::clear_response_view() {
  response_view_ = 0;
}
inline ::google::cloud::tasks::v2beta2::Task_View CreateTaskRequest::response_view() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.CreateTaskRequest.response_view)
  return static_cast< ::google::cloud::tasks::v2beta2::Task_View >(response_view_);
}
inline void CreateTaskRequest::set_response_view(::google::cloud::tasks::v2beta2::Task_View value) {
  
  response_view_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.CreateTaskRequest.response_view)
}

// -------------------------------------------------------------------

// DeleteTaskRequest

// string name = 1;
inline void DeleteTaskRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteTaskRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.DeleteTaskRequest.name)
  return name_.GetNoArena();
}
inline void DeleteTaskRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.DeleteTaskRequest.name)
}
#if LANG_CXX11
inline void DeleteTaskRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.tasks.v2beta2.DeleteTaskRequest.name)
}
#endif
inline void DeleteTaskRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.tasks.v2beta2.DeleteTaskRequest.name)
}
inline void DeleteTaskRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.tasks.v2beta2.DeleteTaskRequest.name)
}
inline ::std::string* DeleteTaskRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.DeleteTaskRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteTaskRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.DeleteTaskRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteTaskRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.DeleteTaskRequest.name)
}

// -------------------------------------------------------------------

// LeaseTasksRequest

// string parent = 1;
inline void LeaseTasksRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LeaseTasksRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.LeaseTasksRequest.parent)
  return parent_.GetNoArena();
}
inline void LeaseTasksRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.LeaseTasksRequest.parent)
}
#if LANG_CXX11
inline void LeaseTasksRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.tasks.v2beta2.LeaseTasksRequest.parent)
}
#endif
inline void LeaseTasksRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.tasks.v2beta2.LeaseTasksRequest.parent)
}
inline void LeaseTasksRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.tasks.v2beta2.LeaseTasksRequest.parent)
}
inline ::std::string* LeaseTasksRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.LeaseTasksRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaseTasksRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.LeaseTasksRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaseTasksRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.LeaseTasksRequest.parent)
}

// int32 max_tasks = 2;
inline void LeaseTasksRequest::clear_max_tasks() {
  max_tasks_ = 0;
}
inline ::google::protobuf::int32 LeaseTasksRequest::max_tasks() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.LeaseTasksRequest.max_tasks)
  return max_tasks_;
}
inline void LeaseTasksRequest::set_max_tasks(::google::protobuf::int32 value) {
  
  max_tasks_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.LeaseTasksRequest.max_tasks)
}

// .google.protobuf.Duration lease_duration = 3;
inline bool LeaseTasksRequest::has_lease_duration() const {
  return this != internal_default_instance() && lease_duration_ != NULL;
}
inline const ::google::protobuf::Duration& LeaseTasksRequest::_internal_lease_duration() const {
  return *lease_duration_;
}
inline const ::google::protobuf::Duration& LeaseTasksRequest::lease_duration() const {
  const ::google::protobuf::Duration* p = lease_duration_;
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.LeaseTasksRequest.lease_duration)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* LeaseTasksRequest::release_lease_duration() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.LeaseTasksRequest.lease_duration)
  
  ::google::protobuf::Duration* temp = lease_duration_;
  lease_duration_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* LeaseTasksRequest::mutable_lease_duration() {
  
  if (lease_duration_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    lease_duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.LeaseTasksRequest.lease_duration)
  return lease_duration_;
}
inline void LeaseTasksRequest::set_allocated_lease_duration(::google::protobuf::Duration* lease_duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lease_duration_);
  }
  if (lease_duration) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(lease_duration)->GetArena();
    if (message_arena != submessage_arena) {
      lease_duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lease_duration, submessage_arena);
    }
    
  } else {
    
  }
  lease_duration_ = lease_duration;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.LeaseTasksRequest.lease_duration)
}

// .google.cloud.tasks.v2beta2.Task.View response_view = 4;
inline void LeaseTasksRequest::clear_response_view() {
  response_view_ = 0;
}
inline ::google::cloud::tasks::v2beta2::Task_View LeaseTasksRequest::response_view() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.LeaseTasksRequest.response_view)
  return static_cast< ::google::cloud::tasks::v2beta2::Task_View >(response_view_);
}
inline void LeaseTasksRequest::set_response_view(::google::cloud::tasks::v2beta2::Task_View value) {
  
  response_view_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.LeaseTasksRequest.response_view)
}

// string filter = 5;
inline void LeaseTasksRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LeaseTasksRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.LeaseTasksRequest.filter)
  return filter_.GetNoArena();
}
inline void LeaseTasksRequest::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.LeaseTasksRequest.filter)
}
#if LANG_CXX11
inline void LeaseTasksRequest::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.tasks.v2beta2.LeaseTasksRequest.filter)
}
#endif
inline void LeaseTasksRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.tasks.v2beta2.LeaseTasksRequest.filter)
}
inline void LeaseTasksRequest::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.tasks.v2beta2.LeaseTasksRequest.filter)
}
inline ::std::string* LeaseTasksRequest::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.LeaseTasksRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaseTasksRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.LeaseTasksRequest.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaseTasksRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.LeaseTasksRequest.filter)
}

// -------------------------------------------------------------------

// LeaseTasksResponse

// repeated .google.cloud.tasks.v2beta2.Task tasks = 1;
inline int LeaseTasksResponse::tasks_size() const {
  return tasks_.size();
}
inline ::google::cloud::tasks::v2beta2::Task* LeaseTasksResponse::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.LeaseTasksResponse.tasks)
  return tasks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::tasks::v2beta2::Task >*
LeaseTasksResponse::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.tasks.v2beta2.LeaseTasksResponse.tasks)
  return &tasks_;
}
inline const ::google::cloud::tasks::v2beta2::Task& LeaseTasksResponse::tasks(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.LeaseTasksResponse.tasks)
  return tasks_.Get(index);
}
inline ::google::cloud::tasks::v2beta2::Task* LeaseTasksResponse::add_tasks() {
  // @@protoc_insertion_point(field_add:google.cloud.tasks.v2beta2.LeaseTasksResponse.tasks)
  return tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::tasks::v2beta2::Task >&
LeaseTasksResponse::tasks() const {
  // @@protoc_insertion_point(field_list:google.cloud.tasks.v2beta2.LeaseTasksResponse.tasks)
  return tasks_;
}

// -------------------------------------------------------------------

// AcknowledgeTaskRequest

// string name = 1;
inline void AcknowledgeTaskRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcknowledgeTaskRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.AcknowledgeTaskRequest.name)
  return name_.GetNoArena();
}
inline void AcknowledgeTaskRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.AcknowledgeTaskRequest.name)
}
#if LANG_CXX11
inline void AcknowledgeTaskRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.tasks.v2beta2.AcknowledgeTaskRequest.name)
}
#endif
inline void AcknowledgeTaskRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.tasks.v2beta2.AcknowledgeTaskRequest.name)
}
inline void AcknowledgeTaskRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.tasks.v2beta2.AcknowledgeTaskRequest.name)
}
inline ::std::string* AcknowledgeTaskRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.AcknowledgeTaskRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcknowledgeTaskRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.AcknowledgeTaskRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcknowledgeTaskRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.AcknowledgeTaskRequest.name)
}

// .google.protobuf.Timestamp schedule_time = 2;
inline bool AcknowledgeTaskRequest::has_schedule_time() const {
  return this != internal_default_instance() && schedule_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& AcknowledgeTaskRequest::_internal_schedule_time() const {
  return *schedule_time_;
}
inline const ::google::protobuf::Timestamp& AcknowledgeTaskRequest::schedule_time() const {
  const ::google::protobuf::Timestamp* p = schedule_time_;
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.AcknowledgeTaskRequest.schedule_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* AcknowledgeTaskRequest::release_schedule_time() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.AcknowledgeTaskRequest.schedule_time)
  
  ::google::protobuf::Timestamp* temp = schedule_time_;
  schedule_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* AcknowledgeTaskRequest::mutable_schedule_time() {
  
  if (schedule_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    schedule_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.AcknowledgeTaskRequest.schedule_time)
  return schedule_time_;
}
inline void AcknowledgeTaskRequest::set_allocated_schedule_time(::google::protobuf::Timestamp* schedule_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(schedule_time_);
  }
  if (schedule_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(schedule_time)->GetArena();
    if (message_arena != submessage_arena) {
      schedule_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, schedule_time, submessage_arena);
    }
    
  } else {
    
  }
  schedule_time_ = schedule_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.AcknowledgeTaskRequest.schedule_time)
}

// -------------------------------------------------------------------

// RenewLeaseRequest

// string name = 1;
inline void RenewLeaseRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RenewLeaseRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.RenewLeaseRequest.name)
  return name_.GetNoArena();
}
inline void RenewLeaseRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.RenewLeaseRequest.name)
}
#if LANG_CXX11
inline void RenewLeaseRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.tasks.v2beta2.RenewLeaseRequest.name)
}
#endif
inline void RenewLeaseRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.tasks.v2beta2.RenewLeaseRequest.name)
}
inline void RenewLeaseRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.tasks.v2beta2.RenewLeaseRequest.name)
}
inline ::std::string* RenewLeaseRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.RenewLeaseRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RenewLeaseRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.RenewLeaseRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RenewLeaseRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.RenewLeaseRequest.name)
}

// .google.protobuf.Timestamp schedule_time = 2;
inline bool RenewLeaseRequest::has_schedule_time() const {
  return this != internal_default_instance() && schedule_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& RenewLeaseRequest::_internal_schedule_time() const {
  return *schedule_time_;
}
inline const ::google::protobuf::Timestamp& RenewLeaseRequest::schedule_time() const {
  const ::google::protobuf::Timestamp* p = schedule_time_;
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.RenewLeaseRequest.schedule_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* RenewLeaseRequest::release_schedule_time() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.RenewLeaseRequest.schedule_time)
  
  ::google::protobuf::Timestamp* temp = schedule_time_;
  schedule_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* RenewLeaseRequest::mutable_schedule_time() {
  
  if (schedule_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    schedule_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.RenewLeaseRequest.schedule_time)
  return schedule_time_;
}
inline void RenewLeaseRequest::set_allocated_schedule_time(::google::protobuf::Timestamp* schedule_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(schedule_time_);
  }
  if (schedule_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(schedule_time)->GetArena();
    if (message_arena != submessage_arena) {
      schedule_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, schedule_time, submessage_arena);
    }
    
  } else {
    
  }
  schedule_time_ = schedule_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.RenewLeaseRequest.schedule_time)
}

// .google.protobuf.Duration lease_duration = 3;
inline bool RenewLeaseRequest::has_lease_duration() const {
  return this != internal_default_instance() && lease_duration_ != NULL;
}
inline const ::google::protobuf::Duration& RenewLeaseRequest::_internal_lease_duration() const {
  return *lease_duration_;
}
inline const ::google::protobuf::Duration& RenewLeaseRequest::lease_duration() const {
  const ::google::protobuf::Duration* p = lease_duration_;
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.RenewLeaseRequest.lease_duration)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* RenewLeaseRequest::release_lease_duration() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.RenewLeaseRequest.lease_duration)
  
  ::google::protobuf::Duration* temp = lease_duration_;
  lease_duration_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* RenewLeaseRequest::mutable_lease_duration() {
  
  if (lease_duration_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    lease_duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.RenewLeaseRequest.lease_duration)
  return lease_duration_;
}
inline void RenewLeaseRequest::set_allocated_lease_duration(::google::protobuf::Duration* lease_duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lease_duration_);
  }
  if (lease_duration) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(lease_duration)->GetArena();
    if (message_arena != submessage_arena) {
      lease_duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lease_duration, submessage_arena);
    }
    
  } else {
    
  }
  lease_duration_ = lease_duration;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.RenewLeaseRequest.lease_duration)
}

// .google.cloud.tasks.v2beta2.Task.View response_view = 4;
inline void RenewLeaseRequest::clear_response_view() {
  response_view_ = 0;
}
inline ::google::cloud::tasks::v2beta2::Task_View RenewLeaseRequest::response_view() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.RenewLeaseRequest.response_view)
  return static_cast< ::google::cloud::tasks::v2beta2::Task_View >(response_view_);
}
inline void RenewLeaseRequest::set_response_view(::google::cloud::tasks::v2beta2::Task_View value) {
  
  response_view_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.RenewLeaseRequest.response_view)
}

// -------------------------------------------------------------------

// CancelLeaseRequest

// string name = 1;
inline void CancelLeaseRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelLeaseRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.CancelLeaseRequest.name)
  return name_.GetNoArena();
}
inline void CancelLeaseRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.CancelLeaseRequest.name)
}
#if LANG_CXX11
inline void CancelLeaseRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.tasks.v2beta2.CancelLeaseRequest.name)
}
#endif
inline void CancelLeaseRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.tasks.v2beta2.CancelLeaseRequest.name)
}
inline void CancelLeaseRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.tasks.v2beta2.CancelLeaseRequest.name)
}
inline ::std::string* CancelLeaseRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.CancelLeaseRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelLeaseRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.CancelLeaseRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelLeaseRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.CancelLeaseRequest.name)
}

// .google.protobuf.Timestamp schedule_time = 2;
inline bool CancelLeaseRequest::has_schedule_time() const {
  return this != internal_default_instance() && schedule_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& CancelLeaseRequest::_internal_schedule_time() const {
  return *schedule_time_;
}
inline const ::google::protobuf::Timestamp& CancelLeaseRequest::schedule_time() const {
  const ::google::protobuf::Timestamp* p = schedule_time_;
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.CancelLeaseRequest.schedule_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* CancelLeaseRequest::release_schedule_time() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.CancelLeaseRequest.schedule_time)
  
  ::google::protobuf::Timestamp* temp = schedule_time_;
  schedule_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* CancelLeaseRequest::mutable_schedule_time() {
  
  if (schedule_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    schedule_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.CancelLeaseRequest.schedule_time)
  return schedule_time_;
}
inline void CancelLeaseRequest::set_allocated_schedule_time(::google::protobuf::Timestamp* schedule_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(schedule_time_);
  }
  if (schedule_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(schedule_time)->GetArena();
    if (message_arena != submessage_arena) {
      schedule_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, schedule_time, submessage_arena);
    }
    
  } else {
    
  }
  schedule_time_ = schedule_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.CancelLeaseRequest.schedule_time)
}

// .google.cloud.tasks.v2beta2.Task.View response_view = 3;
inline void CancelLeaseRequest::clear_response_view() {
  response_view_ = 0;
}
inline ::google::cloud::tasks::v2beta2::Task_View CancelLeaseRequest::response_view() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.CancelLeaseRequest.response_view)
  return static_cast< ::google::cloud::tasks::v2beta2::Task_View >(response_view_);
}
inline void CancelLeaseRequest::set_response_view(::google::cloud::tasks::v2beta2::Task_View value) {
  
  response_view_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.CancelLeaseRequest.response_view)
}

// -------------------------------------------------------------------

// RunTaskRequest

// string name = 1;
inline void RunTaskRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RunTaskRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.RunTaskRequest.name)
  return name_.GetNoArena();
}
inline void RunTaskRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.RunTaskRequest.name)
}
#if LANG_CXX11
inline void RunTaskRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.tasks.v2beta2.RunTaskRequest.name)
}
#endif
inline void RunTaskRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.tasks.v2beta2.RunTaskRequest.name)
}
inline void RunTaskRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.tasks.v2beta2.RunTaskRequest.name)
}
inline ::std::string* RunTaskRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.tasks.v2beta2.RunTaskRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RunTaskRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.tasks.v2beta2.RunTaskRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RunTaskRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.RunTaskRequest.name)
}

// .google.cloud.tasks.v2beta2.Task.View response_view = 2;
inline void RunTaskRequest::clear_response_view() {
  response_view_ = 0;
}
inline ::google::cloud::tasks::v2beta2::Task_View RunTaskRequest::response_view() const {
  // @@protoc_insertion_point(field_get:google.cloud.tasks.v2beta2.RunTaskRequest.response_view)
  return static_cast< ::google::cloud::tasks::v2beta2::Task_View >(response_view_);
}
inline void RunTaskRequest::set_response_view(::google::cloud::tasks::v2beta2::Task_View value) {
  
  response_view_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.tasks.v2beta2.RunTaskRequest.response_view)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2beta2
}  // namespace tasks
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fcloud_2ftasks_2fv2beta2_2fcloudtasks_2eproto
