// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/tasks/v2beta2/task.proto

#include "google/cloud/tasks/v2beta2/task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftarget_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftarget_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PullMessage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftarget_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_AppEngineHttpRequest;
}  // namespace protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftarget_2eproto
namespace protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TaskStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_AttemptStatus;
}  // namespace protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto
namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto
namespace protobuf_google_2frpc_2fstatus_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2frpc_2fstatus_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Status;
}  // namespace protobuf_google_2frpc_2fstatus_2eproto
namespace google {
namespace cloud {
namespace tasks {
namespace v2beta2 {
class TaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Task>
      _instance;
  const ::google::cloud::tasks::v2beta2::AppEngineHttpRequest* app_engine_http_request_;
  const ::google::cloud::tasks::v2beta2::PullMessage* pull_message_;
} _Task_default_instance_;
class TaskStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskStatus>
      _instance;
} _TaskStatus_default_instance_;
class AttemptStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AttemptStatus>
      _instance;
} _AttemptStatus_default_instance_;
}  // namespace v2beta2
}  // namespace tasks
}  // namespace cloud
}  // namespace google
namespace protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto {
static void InitDefaultsTask() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::tasks::v2beta2::_Task_default_instance_;
    new (ptr) ::google::cloud::tasks::v2beta2::Task();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::tasks::v2beta2::Task::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Task =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsTask}, {
      &protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftarget_2eproto::scc_info_AppEngineHttpRequest.base,
      &protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftarget_2eproto::scc_info_PullMessage.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto::scc_info_TaskStatus.base,}};

static void InitDefaultsTaskStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::tasks::v2beta2::_TaskStatus_default_instance_;
    new (ptr) ::google::cloud::tasks::v2beta2::TaskStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::tasks::v2beta2::TaskStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TaskStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTaskStatus}, {
      &protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto::scc_info_AttemptStatus.base,}};

static void InitDefaultsAttemptStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::tasks::v2beta2::_AttemptStatus_default_instance_;
    new (ptr) ::google::cloud::tasks::v2beta2::AttemptStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::tasks::v2beta2::AttemptStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AttemptStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAttemptStatus}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_google_2frpc_2fstatus_2eproto::scc_info_Status.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Task.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AttemptStatus.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::Task, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::Task, name_),
  offsetof(::google::cloud::tasks::v2beta2::TaskDefaultTypeInternal, app_engine_http_request_),
  offsetof(::google::cloud::tasks::v2beta2::TaskDefaultTypeInternal, pull_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::Task, schedule_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::Task, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::Task, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::Task, view_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::Task, payload_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::TaskStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::TaskStatus, attempt_dispatch_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::TaskStatus, attempt_response_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::TaskStatus, first_attempt_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::TaskStatus, last_attempt_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::AttemptStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::AttemptStatus, schedule_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::AttemptStatus, dispatch_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::AttemptStatus, response_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::tasks::v2beta2::AttemptStatus, response_status_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::cloud::tasks::v2beta2::Task)},
  { 13, -1, sizeof(::google::cloud::tasks::v2beta2::TaskStatus)},
  { 22, -1, sizeof(::google::cloud::tasks::v2beta2::AttemptStatus)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::tasks::v2beta2::_Task_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::tasks::v2beta2::_TaskStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::tasks::v2beta2::_AttemptStatus_default_instance_),
};

static void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "google/cloud/tasks/v2beta2/task.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

static void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

static void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n%google/cloud/tasks/v2beta2/task.proto\022"
      "\032google.cloud.tasks.v2beta2\032\034google/api/"
      "annotations.proto\032\'google/cloud/tasks/v2"
      "beta2/target.proto\032\037google/protobuf/time"
      "stamp.proto\032\027google/rpc/status.proto\"\276\003\n"
      "\004Task\022\014\n\004name\030\001 \001(\t\022S\n\027app_engine_http_r"
      "equest\030\003 \001(\01320.google.cloud.tasks.v2beta"
      "2.AppEngineHttpRequestH\000\022\?\n\014pull_message"
      "\030\004 \001(\0132\'.google.cloud.tasks.v2beta2.Pull"
      "MessageH\000\0221\n\rschedule_time\030\005 \001(\0132\032.googl"
      "e.protobuf.Timestamp\022/\n\013create_time\030\006 \001("
      "\0132\032.google.protobuf.Timestamp\0226\n\006status\030"
      "\007 \001(\0132&.google.cloud.tasks.v2beta2.TaskS"
      "tatus\0223\n\004view\030\010 \001(\0162%.google.cloud.tasks"
      ".v2beta2.Task.View\"1\n\004View\022\024\n\020VIEW_UNSPE"
      "CIFIED\020\000\022\t\n\005BASIC\020\001\022\010\n\004FULL\020\002B\016\n\014payload"
      "_type\"\335\001\n\nTaskStatus\022\036\n\026attempt_dispatch"
      "_count\030\001 \001(\005\022\036\n\026attempt_response_count\030\002"
      " \001(\005\022G\n\024first_attempt_status\030\003 \001(\0132).goo"
      "gle.cloud.tasks.v2beta2.AttemptStatus\022F\n"
      "\023last_attempt_status\030\004 \001(\0132).google.clou"
      "d.tasks.v2beta2.AttemptStatus\"\325\001\n\rAttemp"
      "tStatus\0221\n\rschedule_time\030\001 \001(\0132\032.google."
      "protobuf.Timestamp\0221\n\rdispatch_time\030\002 \001("
      "\0132\032.google.protobuf.Timestamp\0221\n\rrespons"
      "e_time\030\003 \001(\0132\032.google.protobuf.Timestamp"
      "\022+\n\017response_status\030\004 \001(\0132\022.google.rpc.S"
      "tatusBn\n\036com.google.cloud.tasks.v2beta2B"
      "\tTaskProtoP\001Z\?google.golang.org/genproto"
      "/googleapis/cloud/tasks/v2beta2;tasksb\006p"
      "roto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1205);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/cloud/tasks/v2beta2/task.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftarget_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::protobuf_google_2frpc_2fstatus_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto
namespace google {
namespace cloud {
namespace tasks {
namespace v2beta2 {
const ::google::protobuf::EnumDescriptor* Task_View_descriptor() {
  protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto::file_level_enum_descriptors[0];
}
bool Task_View_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Task_View Task::VIEW_UNSPECIFIED;
const Task_View Task::BASIC;
const Task_View Task::FULL;
const Task_View Task::View_MIN;
const Task_View Task::View_MAX;
const int Task::View_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Task::InitAsDefaultInstance() {
  ::google::cloud::tasks::v2beta2::_Task_default_instance_.app_engine_http_request_ = const_cast< ::google::cloud::tasks::v2beta2::AppEngineHttpRequest*>(
      ::google::cloud::tasks::v2beta2::AppEngineHttpRequest::internal_default_instance());
  ::google::cloud::tasks::v2beta2::_Task_default_instance_.pull_message_ = const_cast< ::google::cloud::tasks::v2beta2::PullMessage*>(
      ::google::cloud::tasks::v2beta2::PullMessage::internal_default_instance());
  ::google::cloud::tasks::v2beta2::_Task_default_instance_._instance.get_mutable()->schedule_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::cloud::tasks::v2beta2::_Task_default_instance_._instance.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::cloud::tasks::v2beta2::_Task_default_instance_._instance.get_mutable()->status_ = const_cast< ::google::cloud::tasks::v2beta2::TaskStatus*>(
      ::google::cloud::tasks::v2beta2::TaskStatus::internal_default_instance());
}
void Task::set_allocated_app_engine_http_request(::google::cloud::tasks::v2beta2::AppEngineHttpRequest* app_engine_http_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload_type();
  if (app_engine_http_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      app_engine_http_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, app_engine_http_request, submessage_arena);
    }
    set_has_app_engine_http_request();
    payload_type_.app_engine_http_request_ = app_engine_http_request;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.Task.app_engine_http_request)
}
void Task::clear_app_engine_http_request() {
  if (has_app_engine_http_request()) {
    delete payload_type_.app_engine_http_request_;
    clear_has_payload_type();
  }
}
void Task::set_allocated_pull_message(::google::cloud::tasks::v2beta2::PullMessage* pull_message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload_type();
  if (pull_message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pull_message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pull_message, submessage_arena);
    }
    set_has_pull_message();
    payload_type_.pull_message_ = pull_message;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.tasks.v2beta2.Task.pull_message)
}
void Task::clear_pull_message() {
  if (has_pull_message()) {
    delete payload_type_.pull_message_;
    clear_has_payload_type();
  }
}
void Task::clear_schedule_time() {
  if (GetArenaNoVirtual() == NULL && schedule_time_ != NULL) {
    delete schedule_time_;
  }
  schedule_time_ = NULL;
}
void Task::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Task::kNameFieldNumber;
const int Task::kAppEngineHttpRequestFieldNumber;
const int Task::kPullMessageFieldNumber;
const int Task::kScheduleTimeFieldNumber;
const int Task::kCreateTimeFieldNumber;
const int Task::kStatusFieldNumber;
const int Task::kViewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Task::Task()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto::scc_info_Task.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.tasks.v2beta2.Task)
}
Task::Task(const Task& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_schedule_time()) {
    schedule_time_ = new ::google::protobuf::Timestamp(*from.schedule_time_);
  } else {
    schedule_time_ = NULL;
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  if (from.has_status()) {
    status_ = new ::google::cloud::tasks::v2beta2::TaskStatus(*from.status_);
  } else {
    status_ = NULL;
  }
  view_ = from.view_;
  clear_has_payload_type();
  switch (from.payload_type_case()) {
    case kAppEngineHttpRequest: {
      mutable_app_engine_http_request()->::google::cloud::tasks::v2beta2::AppEngineHttpRequest::MergeFrom(from.app_engine_http_request());
      break;
    }
    case kPullMessage: {
      mutable_pull_message()->::google::cloud::tasks::v2beta2::PullMessage::MergeFrom(from.pull_message());
      break;
    }
    case PAYLOAD_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.tasks.v2beta2.Task)
}

void Task::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&schedule_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&view_) -
      reinterpret_cast<char*>(&schedule_time_)) + sizeof(view_));
  clear_has_payload_type();
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:google.cloud.tasks.v2beta2.Task)
  SharedDtor();
}

void Task::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete schedule_time_;
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete status_;
  if (has_payload_type()) {
    clear_payload_type();
  }
}

void Task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Task::descriptor() {
  ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Task& Task::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto::scc_info_Task.base);
  return *internal_default_instance();
}


void Task::clear_payload_type() {
// @@protoc_insertion_point(one_of_clear_start:google.cloud.tasks.v2beta2.Task)
  switch (payload_type_case()) {
    case kAppEngineHttpRequest: {
      delete payload_type_.app_engine_http_request_;
      break;
    }
    case kPullMessage: {
      delete payload_type_.pull_message_;
      break;
    }
    case PAYLOAD_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_TYPE_NOT_SET;
}


void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.tasks.v2beta2.Task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && schedule_time_ != NULL) {
    delete schedule_time_;
  }
  schedule_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
  view_ = 0;
  clear_payload_type();
  _internal_metadata_.Clear();
}

bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.tasks.v2beta2.Task)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.tasks.v2beta2.Task.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.tasks.v2beta2.AppEngineHttpRequest app_engine_http_request = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_app_engine_http_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.tasks.v2beta2.PullMessage pull_message = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pull_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp schedule_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_schedule_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.tasks.v2beta2.TaskStatus status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.tasks.v2beta2.Task.View view = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_view(static_cast< ::google::cloud::tasks::v2beta2::Task_View >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.tasks.v2beta2.Task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.tasks.v2beta2.Task)
  return false;
#undef DO_
}

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.tasks.v2beta2.Task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.tasks.v2beta2.Task.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.cloud.tasks.v2beta2.AppEngineHttpRequest app_engine_http_request = 3;
  if (has_app_engine_http_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_app_engine_http_request(), output);
  }

  // .google.cloud.tasks.v2beta2.PullMessage pull_message = 4;
  if (has_pull_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_pull_message(), output);
  }

  // .google.protobuf.Timestamp schedule_time = 5;
  if (this->has_schedule_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_schedule_time(), output);
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_create_time(), output);
  }

  // .google.cloud.tasks.v2beta2.TaskStatus status = 7;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_status(), output);
  }

  // .google.cloud.tasks.v2beta2.Task.View view = 8;
  if (this->view() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->view(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.tasks.v2beta2.Task)
}

::google::protobuf::uint8* Task::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.tasks.v2beta2.Task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.tasks.v2beta2.Task.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.cloud.tasks.v2beta2.AppEngineHttpRequest app_engine_http_request = 3;
  if (has_app_engine_http_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_app_engine_http_request(), deterministic, target);
  }

  // .google.cloud.tasks.v2beta2.PullMessage pull_message = 4;
  if (has_pull_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_pull_message(), deterministic, target);
  }

  // .google.protobuf.Timestamp schedule_time = 5;
  if (this->has_schedule_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_schedule_time(), deterministic, target);
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_create_time(), deterministic, target);
  }

  // .google.cloud.tasks.v2beta2.TaskStatus status = 7;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_status(), deterministic, target);
  }

  // .google.cloud.tasks.v2beta2.Task.View view = 8;
  if (this->view() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->view(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.tasks.v2beta2.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.tasks.v2beta2.Task)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.protobuf.Timestamp schedule_time = 5;
  if (this->has_schedule_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *schedule_time_);
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.cloud.tasks.v2beta2.TaskStatus status = 7;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .google.cloud.tasks.v2beta2.Task.View view = 8;
  if (this->view() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->view());
  }

  switch (payload_type_case()) {
    // .google.cloud.tasks.v2beta2.AppEngineHttpRequest app_engine_http_request = 3;
    case kAppEngineHttpRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_type_.app_engine_http_request_);
      break;
    }
    // .google.cloud.tasks.v2beta2.PullMessage pull_message = 4;
    case kPullMessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_type_.pull_message_);
      break;
    }
    case PAYLOAD_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.tasks.v2beta2.Task)
  GOOGLE_DCHECK_NE(&from, this);
  const Task* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Task>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.tasks.v2beta2.Task)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.tasks.v2beta2.Task)
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.tasks.v2beta2.Task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_schedule_time()) {
    mutable_schedule_time()->::google::protobuf::Timestamp::MergeFrom(from.schedule_time());
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_status()) {
    mutable_status()->::google::cloud::tasks::v2beta2::TaskStatus::MergeFrom(from.status());
  }
  if (from.view() != 0) {
    set_view(from.view());
  }
  switch (from.payload_type_case()) {
    case kAppEngineHttpRequest: {
      mutable_app_engine_http_request()->::google::cloud::tasks::v2beta2::AppEngineHttpRequest::MergeFrom(from.app_engine_http_request());
      break;
    }
    case kPullMessage: {
      mutable_pull_message()->::google::cloud::tasks::v2beta2::PullMessage::MergeFrom(from.pull_message());
      break;
    }
    case PAYLOAD_TYPE_NOT_SET: {
      break;
    }
  }
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.tasks.v2beta2.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.tasks.v2beta2.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  return true;
}

void Task::Swap(Task* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Task::InternalSwap(Task* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(schedule_time_, other->schedule_time_);
  swap(create_time_, other->create_time_);
  swap(status_, other->status_);
  swap(view_, other->view_);
  swap(payload_type_, other->payload_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Task::GetMetadata() const {
  protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TaskStatus::InitAsDefaultInstance() {
  ::google::cloud::tasks::v2beta2::_TaskStatus_default_instance_._instance.get_mutable()->first_attempt_status_ = const_cast< ::google::cloud::tasks::v2beta2::AttemptStatus*>(
      ::google::cloud::tasks::v2beta2::AttemptStatus::internal_default_instance());
  ::google::cloud::tasks::v2beta2::_TaskStatus_default_instance_._instance.get_mutable()->last_attempt_status_ = const_cast< ::google::cloud::tasks::v2beta2::AttemptStatus*>(
      ::google::cloud::tasks::v2beta2::AttemptStatus::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskStatus::kAttemptDispatchCountFieldNumber;
const int TaskStatus::kAttemptResponseCountFieldNumber;
const int TaskStatus::kFirstAttemptStatusFieldNumber;
const int TaskStatus::kLastAttemptStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskStatus::TaskStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto::scc_info_TaskStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.tasks.v2beta2.TaskStatus)
}
TaskStatus::TaskStatus(const TaskStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_first_attempt_status()) {
    first_attempt_status_ = new ::google::cloud::tasks::v2beta2::AttemptStatus(*from.first_attempt_status_);
  } else {
    first_attempt_status_ = NULL;
  }
  if (from.has_last_attempt_status()) {
    last_attempt_status_ = new ::google::cloud::tasks::v2beta2::AttemptStatus(*from.last_attempt_status_);
  } else {
    last_attempt_status_ = NULL;
  }
  ::memcpy(&attempt_dispatch_count_, &from.attempt_dispatch_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&attempt_response_count_) -
    reinterpret_cast<char*>(&attempt_dispatch_count_)) + sizeof(attempt_response_count_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.tasks.v2beta2.TaskStatus)
}

void TaskStatus::SharedCtor() {
  ::memset(&first_attempt_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attempt_response_count_) -
      reinterpret_cast<char*>(&first_attempt_status_)) + sizeof(attempt_response_count_));
}

TaskStatus::~TaskStatus() {
  // @@protoc_insertion_point(destructor:google.cloud.tasks.v2beta2.TaskStatus)
  SharedDtor();
}

void TaskStatus::SharedDtor() {
  if (this != internal_default_instance()) delete first_attempt_status_;
  if (this != internal_default_instance()) delete last_attempt_status_;
}

void TaskStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TaskStatus::descriptor() {
  ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskStatus& TaskStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto::scc_info_TaskStatus.base);
  return *internal_default_instance();
}


void TaskStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.tasks.v2beta2.TaskStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && first_attempt_status_ != NULL) {
    delete first_attempt_status_;
  }
  first_attempt_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && last_attempt_status_ != NULL) {
    delete last_attempt_status_;
  }
  last_attempt_status_ = NULL;
  ::memset(&attempt_dispatch_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attempt_response_count_) -
      reinterpret_cast<char*>(&attempt_dispatch_count_)) + sizeof(attempt_response_count_));
  _internal_metadata_.Clear();
}

bool TaskStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.tasks.v2beta2.TaskStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 attempt_dispatch_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attempt_dispatch_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 attempt_response_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attempt_response_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.tasks.v2beta2.AttemptStatus first_attempt_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_first_attempt_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.tasks.v2beta2.AttemptStatus last_attempt_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_attempt_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.tasks.v2beta2.TaskStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.tasks.v2beta2.TaskStatus)
  return false;
#undef DO_
}

void TaskStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.tasks.v2beta2.TaskStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 attempt_dispatch_count = 1;
  if (this->attempt_dispatch_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attempt_dispatch_count(), output);
  }

  // int32 attempt_response_count = 2;
  if (this->attempt_response_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attempt_response_count(), output);
  }

  // .google.cloud.tasks.v2beta2.AttemptStatus first_attempt_status = 3;
  if (this->has_first_attempt_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_first_attempt_status(), output);
  }

  // .google.cloud.tasks.v2beta2.AttemptStatus last_attempt_status = 4;
  if (this->has_last_attempt_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_last_attempt_status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.tasks.v2beta2.TaskStatus)
}

::google::protobuf::uint8* TaskStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.tasks.v2beta2.TaskStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 attempt_dispatch_count = 1;
  if (this->attempt_dispatch_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->attempt_dispatch_count(), target);
  }

  // int32 attempt_response_count = 2;
  if (this->attempt_response_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attempt_response_count(), target);
  }

  // .google.cloud.tasks.v2beta2.AttemptStatus first_attempt_status = 3;
  if (this->has_first_attempt_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_first_attempt_status(), deterministic, target);
  }

  // .google.cloud.tasks.v2beta2.AttemptStatus last_attempt_status = 4;
  if (this->has_last_attempt_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_last_attempt_status(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.tasks.v2beta2.TaskStatus)
  return target;
}

size_t TaskStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.tasks.v2beta2.TaskStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.cloud.tasks.v2beta2.AttemptStatus first_attempt_status = 3;
  if (this->has_first_attempt_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *first_attempt_status_);
  }

  // .google.cloud.tasks.v2beta2.AttemptStatus last_attempt_status = 4;
  if (this->has_last_attempt_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *last_attempt_status_);
  }

  // int32 attempt_dispatch_count = 1;
  if (this->attempt_dispatch_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->attempt_dispatch_count());
  }

  // int32 attempt_response_count = 2;
  if (this->attempt_response_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->attempt_response_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.tasks.v2beta2.TaskStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.tasks.v2beta2.TaskStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.tasks.v2beta2.TaskStatus)
    MergeFrom(*source);
  }
}

void TaskStatus::MergeFrom(const TaskStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.tasks.v2beta2.TaskStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_first_attempt_status()) {
    mutable_first_attempt_status()->::google::cloud::tasks::v2beta2::AttemptStatus::MergeFrom(from.first_attempt_status());
  }
  if (from.has_last_attempt_status()) {
    mutable_last_attempt_status()->::google::cloud::tasks::v2beta2::AttemptStatus::MergeFrom(from.last_attempt_status());
  }
  if (from.attempt_dispatch_count() != 0) {
    set_attempt_dispatch_count(from.attempt_dispatch_count());
  }
  if (from.attempt_response_count() != 0) {
    set_attempt_response_count(from.attempt_response_count());
  }
}

void TaskStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.tasks.v2beta2.TaskStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskStatus::CopyFrom(const TaskStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.tasks.v2beta2.TaskStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskStatus::IsInitialized() const {
  return true;
}

void TaskStatus::Swap(TaskStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskStatus::InternalSwap(TaskStatus* other) {
  using std::swap;
  swap(first_attempt_status_, other->first_attempt_status_);
  swap(last_attempt_status_, other->last_attempt_status_);
  swap(attempt_dispatch_count_, other->attempt_dispatch_count_);
  swap(attempt_response_count_, other->attempt_response_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TaskStatus::GetMetadata() const {
  protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AttemptStatus::InitAsDefaultInstance() {
  ::google::cloud::tasks::v2beta2::_AttemptStatus_default_instance_._instance.get_mutable()->schedule_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::cloud::tasks::v2beta2::_AttemptStatus_default_instance_._instance.get_mutable()->dispatch_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::cloud::tasks::v2beta2::_AttemptStatus_default_instance_._instance.get_mutable()->response_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::cloud::tasks::v2beta2::_AttemptStatus_default_instance_._instance.get_mutable()->response_status_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
}
void AttemptStatus::clear_schedule_time() {
  if (GetArenaNoVirtual() == NULL && schedule_time_ != NULL) {
    delete schedule_time_;
  }
  schedule_time_ = NULL;
}
void AttemptStatus::clear_dispatch_time() {
  if (GetArenaNoVirtual() == NULL && dispatch_time_ != NULL) {
    delete dispatch_time_;
  }
  dispatch_time_ = NULL;
}
void AttemptStatus::clear_response_time() {
  if (GetArenaNoVirtual() == NULL && response_time_ != NULL) {
    delete response_time_;
  }
  response_time_ = NULL;
}
void AttemptStatus::clear_response_status() {
  if (GetArenaNoVirtual() == NULL && response_status_ != NULL) {
    delete response_status_;
  }
  response_status_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AttemptStatus::kScheduleTimeFieldNumber;
const int AttemptStatus::kDispatchTimeFieldNumber;
const int AttemptStatus::kResponseTimeFieldNumber;
const int AttemptStatus::kResponseStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AttemptStatus::AttemptStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto::scc_info_AttemptStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.tasks.v2beta2.AttemptStatus)
}
AttemptStatus::AttemptStatus(const AttemptStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_schedule_time()) {
    schedule_time_ = new ::google::protobuf::Timestamp(*from.schedule_time_);
  } else {
    schedule_time_ = NULL;
  }
  if (from.has_dispatch_time()) {
    dispatch_time_ = new ::google::protobuf::Timestamp(*from.dispatch_time_);
  } else {
    dispatch_time_ = NULL;
  }
  if (from.has_response_time()) {
    response_time_ = new ::google::protobuf::Timestamp(*from.response_time_);
  } else {
    response_time_ = NULL;
  }
  if (from.has_response_status()) {
    response_status_ = new ::google::rpc::Status(*from.response_status_);
  } else {
    response_status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.tasks.v2beta2.AttemptStatus)
}

void AttemptStatus::SharedCtor() {
  ::memset(&schedule_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_status_) -
      reinterpret_cast<char*>(&schedule_time_)) + sizeof(response_status_));
}

AttemptStatus::~AttemptStatus() {
  // @@protoc_insertion_point(destructor:google.cloud.tasks.v2beta2.AttemptStatus)
  SharedDtor();
}

void AttemptStatus::SharedDtor() {
  if (this != internal_default_instance()) delete schedule_time_;
  if (this != internal_default_instance()) delete dispatch_time_;
  if (this != internal_default_instance()) delete response_time_;
  if (this != internal_default_instance()) delete response_status_;
}

void AttemptStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AttemptStatus::descriptor() {
  ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AttemptStatus& AttemptStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto::scc_info_AttemptStatus.base);
  return *internal_default_instance();
}


void AttemptStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.tasks.v2beta2.AttemptStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && schedule_time_ != NULL) {
    delete schedule_time_;
  }
  schedule_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && dispatch_time_ != NULL) {
    delete dispatch_time_;
  }
  dispatch_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && response_time_ != NULL) {
    delete response_time_;
  }
  response_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && response_status_ != NULL) {
    delete response_status_;
  }
  response_status_ = NULL;
  _internal_metadata_.Clear();
}

bool AttemptStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.tasks.v2beta2.AttemptStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Timestamp schedule_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_schedule_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp dispatch_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dispatch_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp response_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.rpc.Status response_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.tasks.v2beta2.AttemptStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.tasks.v2beta2.AttemptStatus)
  return false;
#undef DO_
}

void AttemptStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.tasks.v2beta2.AttemptStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp schedule_time = 1;
  if (this->has_schedule_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_schedule_time(), output);
  }

  // .google.protobuf.Timestamp dispatch_time = 2;
  if (this->has_dispatch_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_dispatch_time(), output);
  }

  // .google.protobuf.Timestamp response_time = 3;
  if (this->has_response_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_response_time(), output);
  }

  // .google.rpc.Status response_status = 4;
  if (this->has_response_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_response_status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.tasks.v2beta2.AttemptStatus)
}

::google::protobuf::uint8* AttemptStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.tasks.v2beta2.AttemptStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp schedule_time = 1;
  if (this->has_schedule_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_schedule_time(), deterministic, target);
  }

  // .google.protobuf.Timestamp dispatch_time = 2;
  if (this->has_dispatch_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_dispatch_time(), deterministic, target);
  }

  // .google.protobuf.Timestamp response_time = 3;
  if (this->has_response_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_response_time(), deterministic, target);
  }

  // .google.rpc.Status response_status = 4;
  if (this->has_response_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_response_status(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.tasks.v2beta2.AttemptStatus)
  return target;
}

size_t AttemptStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.tasks.v2beta2.AttemptStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Timestamp schedule_time = 1;
  if (this->has_schedule_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *schedule_time_);
  }

  // .google.protobuf.Timestamp dispatch_time = 2;
  if (this->has_dispatch_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dispatch_time_);
  }

  // .google.protobuf.Timestamp response_time = 3;
  if (this->has_response_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *response_time_);
  }

  // .google.rpc.Status response_status = 4;
  if (this->has_response_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *response_status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttemptStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.tasks.v2beta2.AttemptStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const AttemptStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AttemptStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.tasks.v2beta2.AttemptStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.tasks.v2beta2.AttemptStatus)
    MergeFrom(*source);
  }
}

void AttemptStatus::MergeFrom(const AttemptStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.tasks.v2beta2.AttemptStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_schedule_time()) {
    mutable_schedule_time()->::google::protobuf::Timestamp::MergeFrom(from.schedule_time());
  }
  if (from.has_dispatch_time()) {
    mutable_dispatch_time()->::google::protobuf::Timestamp::MergeFrom(from.dispatch_time());
  }
  if (from.has_response_time()) {
    mutable_response_time()->::google::protobuf::Timestamp::MergeFrom(from.response_time());
  }
  if (from.has_response_status()) {
    mutable_response_status()->::google::rpc::Status::MergeFrom(from.response_status());
  }
}

void AttemptStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.tasks.v2beta2.AttemptStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttemptStatus::CopyFrom(const AttemptStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.tasks.v2beta2.AttemptStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttemptStatus::IsInitialized() const {
  return true;
}

void AttemptStatus::Swap(AttemptStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AttemptStatus::InternalSwap(AttemptStatus* other) {
  using std::swap;
  swap(schedule_time_, other->schedule_time_);
  swap(dispatch_time_, other->dispatch_time_);
  swap(response_time_, other->response_time_);
  swap(response_status_, other->response_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AttemptStatus::GetMetadata() const {
  protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2ftasks_2fv2beta2_2ftask_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v2beta2
}  // namespace tasks
}  // namespace cloud
}  // namespace google
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::tasks::v2beta2::Task* Arena::CreateMaybeMessage< ::google::cloud::tasks::v2beta2::Task >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::tasks::v2beta2::Task >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::tasks::v2beta2::TaskStatus* Arena::CreateMaybeMessage< ::google::cloud::tasks::v2beta2::TaskStatus >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::tasks::v2beta2::TaskStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::tasks::v2beta2::AttemptStatus* Arena::CreateMaybeMessage< ::google::cloud::tasks::v2beta2::AttemptStatus >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::tasks::v2beta2::AttemptStatus >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
