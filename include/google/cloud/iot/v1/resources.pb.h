// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/iot/v1/resources.proto

#ifndef PROTOBUF_INCLUDED_google_2fcloud_2fiot_2fv1_2fresources_2eproto
#define PROTOBUF_INCLUDED_google_2fcloud_2fiot_2fv1_2fresources_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fiot_2fv1_2fresources_2eproto 

namespace protobuf_google_2fcloud_2fiot_2fv1_2fresources_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[14];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fcloud_2fiot_2fv1_2fresources_2eproto
namespace google {
namespace cloud {
namespace iot {
namespace v1 {
class Device;
class DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class DeviceConfig;
class DeviceConfigDefaultTypeInternal;
extern DeviceConfigDefaultTypeInternal _DeviceConfig_default_instance_;
class DeviceCredential;
class DeviceCredentialDefaultTypeInternal;
extern DeviceCredentialDefaultTypeInternal _DeviceCredential_default_instance_;
class DeviceRegistry;
class DeviceRegistryDefaultTypeInternal;
extern DeviceRegistryDefaultTypeInternal _DeviceRegistry_default_instance_;
class DeviceState;
class DeviceStateDefaultTypeInternal;
extern DeviceStateDefaultTypeInternal _DeviceState_default_instance_;
class Device_MetadataEntry_DoNotUse;
class Device_MetadataEntry_DoNotUseDefaultTypeInternal;
extern Device_MetadataEntry_DoNotUseDefaultTypeInternal _Device_MetadataEntry_DoNotUse_default_instance_;
class EventNotificationConfig;
class EventNotificationConfigDefaultTypeInternal;
extern EventNotificationConfigDefaultTypeInternal _EventNotificationConfig_default_instance_;
class HttpConfig;
class HttpConfigDefaultTypeInternal;
extern HttpConfigDefaultTypeInternal _HttpConfig_default_instance_;
class MqttConfig;
class MqttConfigDefaultTypeInternal;
extern MqttConfigDefaultTypeInternal _MqttConfig_default_instance_;
class PublicKeyCertificate;
class PublicKeyCertificateDefaultTypeInternal;
extern PublicKeyCertificateDefaultTypeInternal _PublicKeyCertificate_default_instance_;
class PublicKeyCredential;
class PublicKeyCredentialDefaultTypeInternal;
extern PublicKeyCredentialDefaultTypeInternal _PublicKeyCredential_default_instance_;
class RegistryCredential;
class RegistryCredentialDefaultTypeInternal;
extern RegistryCredentialDefaultTypeInternal _RegistryCredential_default_instance_;
class StateNotificationConfig;
class StateNotificationConfigDefaultTypeInternal;
extern StateNotificationConfigDefaultTypeInternal _StateNotificationConfig_default_instance_;
class X509CertificateDetails;
class X509CertificateDetailsDefaultTypeInternal;
extern X509CertificateDetailsDefaultTypeInternal _X509CertificateDetails_default_instance_;
}  // namespace v1
}  // namespace iot
}  // namespace cloud
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::cloud::iot::v1::Device* Arena::CreateMaybeMessage<::google::cloud::iot::v1::Device>(Arena*);
template<> ::google::cloud::iot::v1::DeviceConfig* Arena::CreateMaybeMessage<::google::cloud::iot::v1::DeviceConfig>(Arena*);
template<> ::google::cloud::iot::v1::DeviceCredential* Arena::CreateMaybeMessage<::google::cloud::iot::v1::DeviceCredential>(Arena*);
template<> ::google::cloud::iot::v1::DeviceRegistry* Arena::CreateMaybeMessage<::google::cloud::iot::v1::DeviceRegistry>(Arena*);
template<> ::google::cloud::iot::v1::DeviceState* Arena::CreateMaybeMessage<::google::cloud::iot::v1::DeviceState>(Arena*);
template<> ::google::cloud::iot::v1::Device_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::google::cloud::iot::v1::Device_MetadataEntry_DoNotUse>(Arena*);
template<> ::google::cloud::iot::v1::EventNotificationConfig* Arena::CreateMaybeMessage<::google::cloud::iot::v1::EventNotificationConfig>(Arena*);
template<> ::google::cloud::iot::v1::HttpConfig* Arena::CreateMaybeMessage<::google::cloud::iot::v1::HttpConfig>(Arena*);
template<> ::google::cloud::iot::v1::MqttConfig* Arena::CreateMaybeMessage<::google::cloud::iot::v1::MqttConfig>(Arena*);
template<> ::google::cloud::iot::v1::PublicKeyCertificate* Arena::CreateMaybeMessage<::google::cloud::iot::v1::PublicKeyCertificate>(Arena*);
template<> ::google::cloud::iot::v1::PublicKeyCredential* Arena::CreateMaybeMessage<::google::cloud::iot::v1::PublicKeyCredential>(Arena*);
template<> ::google::cloud::iot::v1::RegistryCredential* Arena::CreateMaybeMessage<::google::cloud::iot::v1::RegistryCredential>(Arena*);
template<> ::google::cloud::iot::v1::StateNotificationConfig* Arena::CreateMaybeMessage<::google::cloud::iot::v1::StateNotificationConfig>(Arena*);
template<> ::google::cloud::iot::v1::X509CertificateDetails* Arena::CreateMaybeMessage<::google::cloud::iot::v1::X509CertificateDetails>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace cloud {
namespace iot {
namespace v1 {

enum MqttState {
  MQTT_STATE_UNSPECIFIED = 0,
  MQTT_ENABLED = 1,
  MQTT_DISABLED = 2,
  MqttState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MqttState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MqttState_IsValid(int value);
const MqttState MqttState_MIN = MQTT_STATE_UNSPECIFIED;
const MqttState MqttState_MAX = MQTT_DISABLED;
const int MqttState_ARRAYSIZE = MqttState_MAX + 1;

const ::google::protobuf::EnumDescriptor* MqttState_descriptor();
inline const ::std::string& MqttState_Name(MqttState value) {
  return ::google::protobuf::internal::NameOfEnum(
    MqttState_descriptor(), value);
}
inline bool MqttState_Parse(
    const ::std::string& name, MqttState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MqttState>(
    MqttState_descriptor(), name, value);
}
enum HttpState {
  HTTP_STATE_UNSPECIFIED = 0,
  HTTP_ENABLED = 1,
  HTTP_DISABLED = 2,
  HttpState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HttpState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HttpState_IsValid(int value);
const HttpState HttpState_MIN = HTTP_STATE_UNSPECIFIED;
const HttpState HttpState_MAX = HTTP_DISABLED;
const int HttpState_ARRAYSIZE = HttpState_MAX + 1;

const ::google::protobuf::EnumDescriptor* HttpState_descriptor();
inline const ::std::string& HttpState_Name(HttpState value) {
  return ::google::protobuf::internal::NameOfEnum(
    HttpState_descriptor(), value);
}
inline bool HttpState_Parse(
    const ::std::string& name, HttpState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HttpState>(
    HttpState_descriptor(), name, value);
}
enum PublicKeyCertificateFormat {
  UNSPECIFIED_PUBLIC_KEY_CERTIFICATE_FORMAT = 0,
  X509_CERTIFICATE_PEM = 1,
  PublicKeyCertificateFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PublicKeyCertificateFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PublicKeyCertificateFormat_IsValid(int value);
const PublicKeyCertificateFormat PublicKeyCertificateFormat_MIN = UNSPECIFIED_PUBLIC_KEY_CERTIFICATE_FORMAT;
const PublicKeyCertificateFormat PublicKeyCertificateFormat_MAX = X509_CERTIFICATE_PEM;
const int PublicKeyCertificateFormat_ARRAYSIZE = PublicKeyCertificateFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* PublicKeyCertificateFormat_descriptor();
inline const ::std::string& PublicKeyCertificateFormat_Name(PublicKeyCertificateFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    PublicKeyCertificateFormat_descriptor(), value);
}
inline bool PublicKeyCertificateFormat_Parse(
    const ::std::string& name, PublicKeyCertificateFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PublicKeyCertificateFormat>(
    PublicKeyCertificateFormat_descriptor(), name, value);
}
enum PublicKeyFormat {
  UNSPECIFIED_PUBLIC_KEY_FORMAT = 0,
  RSA_PEM = 3,
  RSA_X509_PEM = 1,
  ES256_PEM = 2,
  ES256_X509_PEM = 4,
  PublicKeyFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PublicKeyFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PublicKeyFormat_IsValid(int value);
const PublicKeyFormat PublicKeyFormat_MIN = UNSPECIFIED_PUBLIC_KEY_FORMAT;
const PublicKeyFormat PublicKeyFormat_MAX = ES256_X509_PEM;
const int PublicKeyFormat_ARRAYSIZE = PublicKeyFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* PublicKeyFormat_descriptor();
inline const ::std::string& PublicKeyFormat_Name(PublicKeyFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    PublicKeyFormat_descriptor(), value);
}
inline bool PublicKeyFormat_Parse(
    const ::std::string& name, PublicKeyFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PublicKeyFormat>(
    PublicKeyFormat_descriptor(), name, value);
}
// ===================================================================

class Device_MetadataEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Device_MetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Device_MetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Device_MetadataEntry_DoNotUse();
  Device_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Device_MetadataEntry_DoNotUse& other);
  static const Device_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Device_MetadataEntry_DoNotUse*>(&_Device_MetadataEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Device : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.iot.v1.Device) */ {
 public:
  Device();
  virtual ~Device();

  Device(const Device& from);

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(Device&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Device& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(Device* other);
  void Swap(Device* other);
  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Device* New() const final {
    return CreateMaybeMessage<Device>(NULL);
  }

  Device* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);
  protected:
  explicit Device(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .google.cloud.iot.v1.DeviceCredential credentials = 12;
  int credentials_size() const;
  void clear_credentials();
  static const int kCredentialsFieldNumber = 12;
  ::google::cloud::iot::v1::DeviceCredential* mutable_credentials(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::iot::v1::DeviceCredential >*
      mutable_credentials();
  const ::google::cloud::iot::v1::DeviceCredential& credentials(int index) const;
  ::google::cloud::iot::v1::DeviceCredential* add_credentials();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::iot::v1::DeviceCredential >&
      credentials() const;

  // map<string, string> metadata = 17;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 17;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      ::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // .google.protobuf.Timestamp last_heartbeat_time = 7;
  bool has_last_heartbeat_time() const;
  void clear_last_heartbeat_time();
  static const int kLastHeartbeatTimeFieldNumber = 7;
  private:
  const ::google::protobuf::Timestamp& _internal_last_heartbeat_time() const;
  public:
  const ::google::protobuf::Timestamp& last_heartbeat_time() const;
  ::google::protobuf::Timestamp* release_last_heartbeat_time();
  ::google::protobuf::Timestamp* mutable_last_heartbeat_time();
  void set_allocated_last_heartbeat_time(::google::protobuf::Timestamp* last_heartbeat_time);
  void unsafe_arena_set_allocated_last_heartbeat_time(
      ::google::protobuf::Timestamp* last_heartbeat_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_last_heartbeat_time();

  // .google.protobuf.Timestamp last_event_time = 8;
  bool has_last_event_time() const;
  void clear_last_event_time();
  static const int kLastEventTimeFieldNumber = 8;
  private:
  const ::google::protobuf::Timestamp& _internal_last_event_time() const;
  public:
  const ::google::protobuf::Timestamp& last_event_time() const;
  ::google::protobuf::Timestamp* release_last_event_time();
  ::google::protobuf::Timestamp* mutable_last_event_time();
  void set_allocated_last_event_time(::google::protobuf::Timestamp* last_event_time);
  void unsafe_arena_set_allocated_last_event_time(
      ::google::protobuf::Timestamp* last_event_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_last_event_time();

  // .google.protobuf.Timestamp last_error_time = 10;
  bool has_last_error_time() const;
  void clear_last_error_time();
  static const int kLastErrorTimeFieldNumber = 10;
  private:
  const ::google::protobuf::Timestamp& _internal_last_error_time() const;
  public:
  const ::google::protobuf::Timestamp& last_error_time() const;
  ::google::protobuf::Timestamp* release_last_error_time();
  ::google::protobuf::Timestamp* mutable_last_error_time();
  void set_allocated_last_error_time(::google::protobuf::Timestamp* last_error_time);
  void unsafe_arena_set_allocated_last_error_time(
      ::google::protobuf::Timestamp* last_error_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_last_error_time();

  // .google.rpc.Status last_error_status = 11;
  bool has_last_error_status() const;
  void clear_last_error_status();
  static const int kLastErrorStatusFieldNumber = 11;
  private:
  const ::google::rpc::Status& _internal_last_error_status() const;
  public:
  const ::google::rpc::Status& last_error_status() const;
  ::google::rpc::Status* release_last_error_status();
  ::google::rpc::Status* mutable_last_error_status();
  void set_allocated_last_error_status(::google::rpc::Status* last_error_status);
  void unsafe_arena_set_allocated_last_error_status(
      ::google::rpc::Status* last_error_status);
  ::google::rpc::Status* unsafe_arena_release_last_error_status();

  // .google.cloud.iot.v1.DeviceConfig config = 13;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 13;
  private:
  const ::google::cloud::iot::v1::DeviceConfig& _internal_config() const;
  public:
  const ::google::cloud::iot::v1::DeviceConfig& config() const;
  ::google::cloud::iot::v1::DeviceConfig* release_config();
  ::google::cloud::iot::v1::DeviceConfig* mutable_config();
  void set_allocated_config(::google::cloud::iot::v1::DeviceConfig* config);
  void unsafe_arena_set_allocated_config(
      ::google::cloud::iot::v1::DeviceConfig* config);
  ::google::cloud::iot::v1::DeviceConfig* unsafe_arena_release_config();

  // .google.protobuf.Timestamp last_config_ack_time = 14;
  bool has_last_config_ack_time() const;
  void clear_last_config_ack_time();
  static const int kLastConfigAckTimeFieldNumber = 14;
  private:
  const ::google::protobuf::Timestamp& _internal_last_config_ack_time() const;
  public:
  const ::google::protobuf::Timestamp& last_config_ack_time() const;
  ::google::protobuf::Timestamp* release_last_config_ack_time();
  ::google::protobuf::Timestamp* mutable_last_config_ack_time();
  void set_allocated_last_config_ack_time(::google::protobuf::Timestamp* last_config_ack_time);
  void unsafe_arena_set_allocated_last_config_ack_time(
      ::google::protobuf::Timestamp* last_config_ack_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_last_config_ack_time();

  // .google.cloud.iot.v1.DeviceState state = 16;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 16;
  private:
  const ::google::cloud::iot::v1::DeviceState& _internal_state() const;
  public:
  const ::google::cloud::iot::v1::DeviceState& state() const;
  ::google::cloud::iot::v1::DeviceState* release_state();
  ::google::cloud::iot::v1::DeviceState* mutable_state();
  void set_allocated_state(::google::cloud::iot::v1::DeviceState* state);
  void unsafe_arena_set_allocated_state(
      ::google::cloud::iot::v1::DeviceState* state);
  ::google::cloud::iot::v1::DeviceState* unsafe_arena_release_state();

  // .google.protobuf.Timestamp last_config_send_time = 18;
  bool has_last_config_send_time() const;
  void clear_last_config_send_time();
  static const int kLastConfigSendTimeFieldNumber = 18;
  private:
  const ::google::protobuf::Timestamp& _internal_last_config_send_time() const;
  public:
  const ::google::protobuf::Timestamp& last_config_send_time() const;
  ::google::protobuf::Timestamp* release_last_config_send_time();
  ::google::protobuf::Timestamp* mutable_last_config_send_time();
  void set_allocated_last_config_send_time(::google::protobuf::Timestamp* last_config_send_time);
  void unsafe_arena_set_allocated_last_config_send_time(
      ::google::protobuf::Timestamp* last_config_send_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_last_config_send_time();

  // .google.protobuf.Timestamp last_state_time = 20;
  bool has_last_state_time() const;
  void clear_last_state_time();
  static const int kLastStateTimeFieldNumber = 20;
  private:
  const ::google::protobuf::Timestamp& _internal_last_state_time() const;
  public:
  const ::google::protobuf::Timestamp& last_state_time() const;
  ::google::protobuf::Timestamp* release_last_state_time();
  ::google::protobuf::Timestamp* mutable_last_state_time();
  void set_allocated_last_state_time(::google::protobuf::Timestamp* last_state_time);
  void unsafe_arena_set_allocated_last_state_time(
      ::google::protobuf::Timestamp* last_state_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_last_state_time();

  // uint64 num_id = 3;
  void clear_num_id();
  static const int kNumIdFieldNumber = 3;
  ::google::protobuf::uint64 num_id() const;
  void set_num_id(::google::protobuf::uint64 value);

  // bool blocked = 19;
  void clear_blocked();
  static const int kBlockedFieldNumber = 19;
  bool blocked() const;
  void set_blocked(bool value);

  // @@protoc_insertion_point(class_scope:google.cloud.iot.v1.Device)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::iot::v1::DeviceCredential > credentials_;
  ::google::protobuf::internal::MapField<
      Device_MetadataEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Timestamp* last_heartbeat_time_;
  ::google::protobuf::Timestamp* last_event_time_;
  ::google::protobuf::Timestamp* last_error_time_;
  ::google::rpc::Status* last_error_status_;
  ::google::cloud::iot::v1::DeviceConfig* config_;
  ::google::protobuf::Timestamp* last_config_ack_time_;
  ::google::cloud::iot::v1::DeviceState* state_;
  ::google::protobuf::Timestamp* last_config_send_time_;
  ::google::protobuf::Timestamp* last_state_time_;
  ::google::protobuf::uint64 num_id_;
  bool blocked_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fiot_2fv1_2fresources_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceRegistry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.iot.v1.DeviceRegistry) */ {
 public:
  DeviceRegistry();
  virtual ~DeviceRegistry();

  DeviceRegistry(const DeviceRegistry& from);

  inline DeviceRegistry& operator=(const DeviceRegistry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceRegistry(DeviceRegistry&& from) noexcept
    : DeviceRegistry() {
    *this = ::std::move(from);
  }

  inline DeviceRegistry& operator=(DeviceRegistry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceRegistry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceRegistry* internal_default_instance() {
    return reinterpret_cast<const DeviceRegistry*>(
               &_DeviceRegistry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(DeviceRegistry* other);
  void Swap(DeviceRegistry* other);
  friend void swap(DeviceRegistry& a, DeviceRegistry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceRegistry* New() const final {
    return CreateMaybeMessage<DeviceRegistry>(NULL);
  }

  DeviceRegistry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceRegistry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceRegistry& from);
  void MergeFrom(const DeviceRegistry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceRegistry* other);
  protected:
  explicit DeviceRegistry(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.iot.v1.RegistryCredential credentials = 8;
  int credentials_size() const;
  void clear_credentials();
  static const int kCredentialsFieldNumber = 8;
  ::google::cloud::iot::v1::RegistryCredential* mutable_credentials(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::iot::v1::RegistryCredential >*
      mutable_credentials();
  const ::google::cloud::iot::v1::RegistryCredential& credentials(int index) const;
  ::google::cloud::iot::v1::RegistryCredential* add_credentials();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::iot::v1::RegistryCredential >&
      credentials() const;

  // repeated .google.cloud.iot.v1.EventNotificationConfig event_notification_configs = 10;
  int event_notification_configs_size() const;
  void clear_event_notification_configs();
  static const int kEventNotificationConfigsFieldNumber = 10;
  ::google::cloud::iot::v1::EventNotificationConfig* mutable_event_notification_configs(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::iot::v1::EventNotificationConfig >*
      mutable_event_notification_configs();
  const ::google::cloud::iot::v1::EventNotificationConfig& event_notification_configs(int index) const;
  ::google::cloud::iot::v1::EventNotificationConfig* add_event_notification_configs();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::iot::v1::EventNotificationConfig >&
      event_notification_configs() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      ::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // .google.cloud.iot.v1.MqttConfig mqtt_config = 4;
  bool has_mqtt_config() const;
  void clear_mqtt_config();
  static const int kMqttConfigFieldNumber = 4;
  private:
  const ::google::cloud::iot::v1::MqttConfig& _internal_mqtt_config() const;
  public:
  const ::google::cloud::iot::v1::MqttConfig& mqtt_config() const;
  ::google::cloud::iot::v1::MqttConfig* release_mqtt_config();
  ::google::cloud::iot::v1::MqttConfig* mutable_mqtt_config();
  void set_allocated_mqtt_config(::google::cloud::iot::v1::MqttConfig* mqtt_config);
  void unsafe_arena_set_allocated_mqtt_config(
      ::google::cloud::iot::v1::MqttConfig* mqtt_config);
  ::google::cloud::iot::v1::MqttConfig* unsafe_arena_release_mqtt_config();

  // .google.cloud.iot.v1.StateNotificationConfig state_notification_config = 7;
  bool has_state_notification_config() const;
  void clear_state_notification_config();
  static const int kStateNotificationConfigFieldNumber = 7;
  private:
  const ::google::cloud::iot::v1::StateNotificationConfig& _internal_state_notification_config() const;
  public:
  const ::google::cloud::iot::v1::StateNotificationConfig& state_notification_config() const;
  ::google::cloud::iot::v1::StateNotificationConfig* release_state_notification_config();
  ::google::cloud::iot::v1::StateNotificationConfig* mutable_state_notification_config();
  void set_allocated_state_notification_config(::google::cloud::iot::v1::StateNotificationConfig* state_notification_config);
  void unsafe_arena_set_allocated_state_notification_config(
      ::google::cloud::iot::v1::StateNotificationConfig* state_notification_config);
  ::google::cloud::iot::v1::StateNotificationConfig* unsafe_arena_release_state_notification_config();

  // .google.cloud.iot.v1.HttpConfig http_config = 9;
  bool has_http_config() const;
  void clear_http_config();
  static const int kHttpConfigFieldNumber = 9;
  private:
  const ::google::cloud::iot::v1::HttpConfig& _internal_http_config() const;
  public:
  const ::google::cloud::iot::v1::HttpConfig& http_config() const;
  ::google::cloud::iot::v1::HttpConfig* release_http_config();
  ::google::cloud::iot::v1::HttpConfig* mutable_http_config();
  void set_allocated_http_config(::google::cloud::iot::v1::HttpConfig* http_config);
  void unsafe_arena_set_allocated_http_config(
      ::google::cloud::iot::v1::HttpConfig* http_config);
  ::google::cloud::iot::v1::HttpConfig* unsafe_arena_release_http_config();

  // @@protoc_insertion_point(class_scope:google.cloud.iot.v1.DeviceRegistry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::iot::v1::RegistryCredential > credentials_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::iot::v1::EventNotificationConfig > event_notification_configs_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::cloud::iot::v1::MqttConfig* mqtt_config_;
  ::google::cloud::iot::v1::StateNotificationConfig* state_notification_config_;
  ::google::cloud::iot::v1::HttpConfig* http_config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fiot_2fv1_2fresources_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MqttConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.iot.v1.MqttConfig) */ {
 public:
  MqttConfig();
  virtual ~MqttConfig();

  MqttConfig(const MqttConfig& from);

  inline MqttConfig& operator=(const MqttConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MqttConfig(MqttConfig&& from) noexcept
    : MqttConfig() {
    *this = ::std::move(from);
  }

  inline MqttConfig& operator=(MqttConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MqttConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MqttConfig* internal_default_instance() {
    return reinterpret_cast<const MqttConfig*>(
               &_MqttConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(MqttConfig* other);
  void Swap(MqttConfig* other);
  friend void swap(MqttConfig& a, MqttConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MqttConfig* New() const final {
    return CreateMaybeMessage<MqttConfig>(NULL);
  }

  MqttConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MqttConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MqttConfig& from);
  void MergeFrom(const MqttConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MqttConfig* other);
  protected:
  explicit MqttConfig(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.iot.v1.MqttState mqtt_enabled_state = 1;
  void clear_mqtt_enabled_state();
  static const int kMqttEnabledStateFieldNumber = 1;
  ::google::cloud::iot::v1::MqttState mqtt_enabled_state() const;
  void set_mqtt_enabled_state(::google::cloud::iot::v1::MqttState value);

  // @@protoc_insertion_point(class_scope:google.cloud.iot.v1.MqttConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int mqtt_enabled_state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fiot_2fv1_2fresources_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HttpConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.iot.v1.HttpConfig) */ {
 public:
  HttpConfig();
  virtual ~HttpConfig();

  HttpConfig(const HttpConfig& from);

  inline HttpConfig& operator=(const HttpConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HttpConfig(HttpConfig&& from) noexcept
    : HttpConfig() {
    *this = ::std::move(from);
  }

  inline HttpConfig& operator=(HttpConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HttpConfig* internal_default_instance() {
    return reinterpret_cast<const HttpConfig*>(
               &_HttpConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(HttpConfig* other);
  void Swap(HttpConfig* other);
  friend void swap(HttpConfig& a, HttpConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HttpConfig* New() const final {
    return CreateMaybeMessage<HttpConfig>(NULL);
  }

  HttpConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HttpConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HttpConfig& from);
  void MergeFrom(const HttpConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HttpConfig* other);
  protected:
  explicit HttpConfig(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.iot.v1.HttpState http_enabled_state = 1;
  void clear_http_enabled_state();
  static const int kHttpEnabledStateFieldNumber = 1;
  ::google::cloud::iot::v1::HttpState http_enabled_state() const;
  void set_http_enabled_state(::google::cloud::iot::v1::HttpState value);

  // @@protoc_insertion_point(class_scope:google.cloud.iot.v1.HttpConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int http_enabled_state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fiot_2fv1_2fresources_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EventNotificationConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.iot.v1.EventNotificationConfig) */ {
 public:
  EventNotificationConfig();
  virtual ~EventNotificationConfig();

  EventNotificationConfig(const EventNotificationConfig& from);

  inline EventNotificationConfig& operator=(const EventNotificationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventNotificationConfig(EventNotificationConfig&& from) noexcept
    : EventNotificationConfig() {
    *this = ::std::move(from);
  }

  inline EventNotificationConfig& operator=(EventNotificationConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventNotificationConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventNotificationConfig* internal_default_instance() {
    return reinterpret_cast<const EventNotificationConfig*>(
               &_EventNotificationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(EventNotificationConfig* other);
  void Swap(EventNotificationConfig* other);
  friend void swap(EventNotificationConfig& a, EventNotificationConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventNotificationConfig* New() const final {
    return CreateMaybeMessage<EventNotificationConfig>(NULL);
  }

  EventNotificationConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventNotificationConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EventNotificationConfig& from);
  void MergeFrom(const EventNotificationConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventNotificationConfig* other);
  protected:
  explicit EventNotificationConfig(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string pubsub_topic_name = 1;
  void clear_pubsub_topic_name();
  static const int kPubsubTopicNameFieldNumber = 1;
  const ::std::string& pubsub_topic_name() const;
  void set_pubsub_topic_name(const ::std::string& value);
  #if LANG_CXX11
  void set_pubsub_topic_name(::std::string&& value);
  #endif
  void set_pubsub_topic_name(const char* value);
  void set_pubsub_topic_name(const char* value, size_t size);
  ::std::string* mutable_pubsub_topic_name();
  ::std::string* release_pubsub_topic_name();
  void set_allocated_pubsub_topic_name(::std::string* pubsub_topic_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_pubsub_topic_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pubsub_topic_name(
      ::std::string* pubsub_topic_name);

  // string subfolder_matches = 2;
  void clear_subfolder_matches();
  static const int kSubfolderMatchesFieldNumber = 2;
  const ::std::string& subfolder_matches() const;
  void set_subfolder_matches(const ::std::string& value);
  #if LANG_CXX11
  void set_subfolder_matches(::std::string&& value);
  #endif
  void set_subfolder_matches(const char* value);
  void set_subfolder_matches(const char* value, size_t size);
  ::std::string* mutable_subfolder_matches();
  ::std::string* release_subfolder_matches();
  void set_allocated_subfolder_matches(::std::string* subfolder_matches);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_subfolder_matches();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subfolder_matches(
      ::std::string* subfolder_matches);

  // @@protoc_insertion_point(class_scope:google.cloud.iot.v1.EventNotificationConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr pubsub_topic_name_;
  ::google::protobuf::internal::ArenaStringPtr subfolder_matches_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fiot_2fv1_2fresources_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StateNotificationConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.iot.v1.StateNotificationConfig) */ {
 public:
  StateNotificationConfig();
  virtual ~StateNotificationConfig();

  StateNotificationConfig(const StateNotificationConfig& from);

  inline StateNotificationConfig& operator=(const StateNotificationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StateNotificationConfig(StateNotificationConfig&& from) noexcept
    : StateNotificationConfig() {
    *this = ::std::move(from);
  }

  inline StateNotificationConfig& operator=(StateNotificationConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const StateNotificationConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateNotificationConfig* internal_default_instance() {
    return reinterpret_cast<const StateNotificationConfig*>(
               &_StateNotificationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(StateNotificationConfig* other);
  void Swap(StateNotificationConfig* other);
  friend void swap(StateNotificationConfig& a, StateNotificationConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StateNotificationConfig* New() const final {
    return CreateMaybeMessage<StateNotificationConfig>(NULL);
  }

  StateNotificationConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StateNotificationConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StateNotificationConfig& from);
  void MergeFrom(const StateNotificationConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateNotificationConfig* other);
  protected:
  explicit StateNotificationConfig(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string pubsub_topic_name = 1;
  void clear_pubsub_topic_name();
  static const int kPubsubTopicNameFieldNumber = 1;
  const ::std::string& pubsub_topic_name() const;
  void set_pubsub_topic_name(const ::std::string& value);
  #if LANG_CXX11
  void set_pubsub_topic_name(::std::string&& value);
  #endif
  void set_pubsub_topic_name(const char* value);
  void set_pubsub_topic_name(const char* value, size_t size);
  ::std::string* mutable_pubsub_topic_name();
  ::std::string* release_pubsub_topic_name();
  void set_allocated_pubsub_topic_name(::std::string* pubsub_topic_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_pubsub_topic_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pubsub_topic_name(
      ::std::string* pubsub_topic_name);

  // @@protoc_insertion_point(class_scope:google.cloud.iot.v1.StateNotificationConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr pubsub_topic_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fiot_2fv1_2fresources_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegistryCredential : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.iot.v1.RegistryCredential) */ {
 public:
  RegistryCredential();
  virtual ~RegistryCredential();

  RegistryCredential(const RegistryCredential& from);

  inline RegistryCredential& operator=(const RegistryCredential& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegistryCredential(RegistryCredential&& from) noexcept
    : RegistryCredential() {
    *this = ::std::move(from);
  }

  inline RegistryCredential& operator=(RegistryCredential&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegistryCredential& default_instance();

  enum CredentialCase {
    kPublicKeyCertificate = 1,
    CREDENTIAL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegistryCredential* internal_default_instance() {
    return reinterpret_cast<const RegistryCredential*>(
               &_RegistryCredential_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(RegistryCredential* other);
  void Swap(RegistryCredential* other);
  friend void swap(RegistryCredential& a, RegistryCredential& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegistryCredential* New() const final {
    return CreateMaybeMessage<RegistryCredential>(NULL);
  }

  RegistryCredential* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegistryCredential>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegistryCredential& from);
  void MergeFrom(const RegistryCredential& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegistryCredential* other);
  protected:
  explicit RegistryCredential(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.iot.v1.PublicKeyCertificate public_key_certificate = 1;
  bool has_public_key_certificate() const;
  void clear_public_key_certificate();
  static const int kPublicKeyCertificateFieldNumber = 1;
  private:
  const ::google::cloud::iot::v1::PublicKeyCertificate& _internal_public_key_certificate() const;
  public:
  const ::google::cloud::iot::v1::PublicKeyCertificate& public_key_certificate() const;
  ::google::cloud::iot::v1::PublicKeyCertificate* release_public_key_certificate();
  ::google::cloud::iot::v1::PublicKeyCertificate* mutable_public_key_certificate();
  void set_allocated_public_key_certificate(::google::cloud::iot::v1::PublicKeyCertificate* public_key_certificate);
  void unsafe_arena_set_allocated_public_key_certificate(
      ::google::cloud::iot::v1::PublicKeyCertificate* public_key_certificate);
  ::google::cloud::iot::v1::PublicKeyCertificate* unsafe_arena_release_public_key_certificate();

  void clear_credential();
  CredentialCase credential_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.iot.v1.RegistryCredential)
 private:
  void set_has_public_key_certificate();

  inline bool has_credential() const;
  inline void clear_has_credential();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union CredentialUnion {
    CredentialUnion() {}
    ::google::cloud::iot::v1::PublicKeyCertificate* public_key_certificate_;
  } credential_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fcloud_2fiot_2fv1_2fresources_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class X509CertificateDetails : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.iot.v1.X509CertificateDetails) */ {
 public:
  X509CertificateDetails();
  virtual ~X509CertificateDetails();

  X509CertificateDetails(const X509CertificateDetails& from);

  inline X509CertificateDetails& operator=(const X509CertificateDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  X509CertificateDetails(X509CertificateDetails&& from) noexcept
    : X509CertificateDetails() {
    *this = ::std::move(from);
  }

  inline X509CertificateDetails& operator=(X509CertificateDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const X509CertificateDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const X509CertificateDetails* internal_default_instance() {
    return reinterpret_cast<const X509CertificateDetails*>(
               &_X509CertificateDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(X509CertificateDetails* other);
  void Swap(X509CertificateDetails* other);
  friend void swap(X509CertificateDetails& a, X509CertificateDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline X509CertificateDetails* New() const final {
    return CreateMaybeMessage<X509CertificateDetails>(NULL);
  }

  X509CertificateDetails* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<X509CertificateDetails>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const X509CertificateDetails& from);
  void MergeFrom(const X509CertificateDetails& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(X509CertificateDetails* other);
  protected:
  explicit X509CertificateDetails(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string issuer = 1;
  void clear_issuer();
  static const int kIssuerFieldNumber = 1;
  const ::std::string& issuer() const;
  void set_issuer(const ::std::string& value);
  #if LANG_CXX11
  void set_issuer(::std::string&& value);
  #endif
  void set_issuer(const char* value);
  void set_issuer(const char* value, size_t size);
  ::std::string* mutable_issuer();
  ::std::string* release_issuer();
  void set_allocated_issuer(::std::string* issuer);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_issuer();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_issuer(
      ::std::string* issuer);

  // string subject = 2;
  void clear_subject();
  static const int kSubjectFieldNumber = 2;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  #if LANG_CXX11
  void set_subject(::std::string&& value);
  #endif
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_subject();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subject(
      ::std::string* subject);

  // string signature_algorithm = 5;
  void clear_signature_algorithm();
  static const int kSignatureAlgorithmFieldNumber = 5;
  const ::std::string& signature_algorithm() const;
  void set_signature_algorithm(const ::std::string& value);
  #if LANG_CXX11
  void set_signature_algorithm(::std::string&& value);
  #endif
  void set_signature_algorithm(const char* value);
  void set_signature_algorithm(const char* value, size_t size);
  ::std::string* mutable_signature_algorithm();
  ::std::string* release_signature_algorithm();
  void set_allocated_signature_algorithm(::std::string* signature_algorithm);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_signature_algorithm();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signature_algorithm(
      ::std::string* signature_algorithm);

  // string public_key_type = 6;
  void clear_public_key_type();
  static const int kPublicKeyTypeFieldNumber = 6;
  const ::std::string& public_key_type() const;
  void set_public_key_type(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key_type(::std::string&& value);
  #endif
  void set_public_key_type(const char* value);
  void set_public_key_type(const char* value, size_t size);
  ::std::string* mutable_public_key_type();
  ::std::string* release_public_key_type();
  void set_allocated_public_key_type(::std::string* public_key_type);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_public_key_type();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_public_key_type(
      ::std::string* public_key_type);

  // .google.protobuf.Timestamp start_time = 3;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 3;
  private:
  const ::google::protobuf::Timestamp& _internal_start_time() const;
  public:
  const ::google::protobuf::Timestamp& start_time() const;
  ::google::protobuf::Timestamp* release_start_time();
  ::google::protobuf::Timestamp* mutable_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* start_time);
  void unsafe_arena_set_allocated_start_time(
      ::google::protobuf::Timestamp* start_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp expiry_time = 4;
  bool has_expiry_time() const;
  void clear_expiry_time();
  static const int kExpiryTimeFieldNumber = 4;
  private:
  const ::google::protobuf::Timestamp& _internal_expiry_time() const;
  public:
  const ::google::protobuf::Timestamp& expiry_time() const;
  ::google::protobuf::Timestamp* release_expiry_time();
  ::google::protobuf::Timestamp* mutable_expiry_time();
  void set_allocated_expiry_time(::google::protobuf::Timestamp* expiry_time);
  void unsafe_arena_set_allocated_expiry_time(
      ::google::protobuf::Timestamp* expiry_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_expiry_time();

  // @@protoc_insertion_point(class_scope:google.cloud.iot.v1.X509CertificateDetails)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr issuer_;
  ::google::protobuf::internal::ArenaStringPtr subject_;
  ::google::protobuf::internal::ArenaStringPtr signature_algorithm_;
  ::google::protobuf::internal::ArenaStringPtr public_key_type_;
  ::google::protobuf::Timestamp* start_time_;
  ::google::protobuf::Timestamp* expiry_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fiot_2fv1_2fresources_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PublicKeyCertificate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.iot.v1.PublicKeyCertificate) */ {
 public:
  PublicKeyCertificate();
  virtual ~PublicKeyCertificate();

  PublicKeyCertificate(const PublicKeyCertificate& from);

  inline PublicKeyCertificate& operator=(const PublicKeyCertificate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublicKeyCertificate(PublicKeyCertificate&& from) noexcept
    : PublicKeyCertificate() {
    *this = ::std::move(from);
  }

  inline PublicKeyCertificate& operator=(PublicKeyCertificate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PublicKeyCertificate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublicKeyCertificate* internal_default_instance() {
    return reinterpret_cast<const PublicKeyCertificate*>(
               &_PublicKeyCertificate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void UnsafeArenaSwap(PublicKeyCertificate* other);
  void Swap(PublicKeyCertificate* other);
  friend void swap(PublicKeyCertificate& a, PublicKeyCertificate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublicKeyCertificate* New() const final {
    return CreateMaybeMessage<PublicKeyCertificate>(NULL);
  }

  PublicKeyCertificate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PublicKeyCertificate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PublicKeyCertificate& from);
  void MergeFrom(const PublicKeyCertificate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicKeyCertificate* other);
  protected:
  explicit PublicKeyCertificate(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string certificate = 2;
  void clear_certificate();
  static const int kCertificateFieldNumber = 2;
  const ::std::string& certificate() const;
  void set_certificate(const ::std::string& value);
  #if LANG_CXX11
  void set_certificate(::std::string&& value);
  #endif
  void set_certificate(const char* value);
  void set_certificate(const char* value, size_t size);
  ::std::string* mutable_certificate();
  ::std::string* release_certificate();
  void set_allocated_certificate(::std::string* certificate);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_certificate();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_certificate(
      ::std::string* certificate);

  // .google.cloud.iot.v1.X509CertificateDetails x509_details = 3;
  bool has_x509_details() const;
  void clear_x509_details();
  static const int kX509DetailsFieldNumber = 3;
  private:
  const ::google::cloud::iot::v1::X509CertificateDetails& _internal_x509_details() const;
  public:
  const ::google::cloud::iot::v1::X509CertificateDetails& x509_details() const;
  ::google::cloud::iot::v1::X509CertificateDetails* release_x509_details();
  ::google::cloud::iot::v1::X509CertificateDetails* mutable_x509_details();
  void set_allocated_x509_details(::google::cloud::iot::v1::X509CertificateDetails* x509_details);
  void unsafe_arena_set_allocated_x509_details(
      ::google::cloud::iot::v1::X509CertificateDetails* x509_details);
  ::google::cloud::iot::v1::X509CertificateDetails* unsafe_arena_release_x509_details();

  // .google.cloud.iot.v1.PublicKeyCertificateFormat format = 1;
  void clear_format();
  static const int kFormatFieldNumber = 1;
  ::google::cloud::iot::v1::PublicKeyCertificateFormat format() const;
  void set_format(::google::cloud::iot::v1::PublicKeyCertificateFormat value);

  // @@protoc_insertion_point(class_scope:google.cloud.iot.v1.PublicKeyCertificate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr certificate_;
  ::google::cloud::iot::v1::X509CertificateDetails* x509_details_;
  int format_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fiot_2fv1_2fresources_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceCredential : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.iot.v1.DeviceCredential) */ {
 public:
  DeviceCredential();
  virtual ~DeviceCredential();

  DeviceCredential(const DeviceCredential& from);

  inline DeviceCredential& operator=(const DeviceCredential& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceCredential(DeviceCredential&& from) noexcept
    : DeviceCredential() {
    *this = ::std::move(from);
  }

  inline DeviceCredential& operator=(DeviceCredential&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceCredential& default_instance();

  enum CredentialCase {
    kPublicKey = 2,
    CREDENTIAL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceCredential* internal_default_instance() {
    return reinterpret_cast<const DeviceCredential*>(
               &_DeviceCredential_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void UnsafeArenaSwap(DeviceCredential* other);
  void Swap(DeviceCredential* other);
  friend void swap(DeviceCredential& a, DeviceCredential& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceCredential* New() const final {
    return CreateMaybeMessage<DeviceCredential>(NULL);
  }

  DeviceCredential* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceCredential>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceCredential& from);
  void MergeFrom(const DeviceCredential& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceCredential* other);
  protected:
  explicit DeviceCredential(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Timestamp expiration_time = 6;
  bool has_expiration_time() const;
  void clear_expiration_time();
  static const int kExpirationTimeFieldNumber = 6;
  private:
  const ::google::protobuf::Timestamp& _internal_expiration_time() const;
  public:
  const ::google::protobuf::Timestamp& expiration_time() const;
  ::google::protobuf::Timestamp* release_expiration_time();
  ::google::protobuf::Timestamp* mutable_expiration_time();
  void set_allocated_expiration_time(::google::protobuf::Timestamp* expiration_time);
  void unsafe_arena_set_allocated_expiration_time(
      ::google::protobuf::Timestamp* expiration_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_expiration_time();

  // .google.cloud.iot.v1.PublicKeyCredential public_key = 2;
  bool has_public_key() const;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 2;
  private:
  const ::google::cloud::iot::v1::PublicKeyCredential& _internal_public_key() const;
  public:
  const ::google::cloud::iot::v1::PublicKeyCredential& public_key() const;
  ::google::cloud::iot::v1::PublicKeyCredential* release_public_key();
  ::google::cloud::iot::v1::PublicKeyCredential* mutable_public_key();
  void set_allocated_public_key(::google::cloud::iot::v1::PublicKeyCredential* public_key);
  void unsafe_arena_set_allocated_public_key(
      ::google::cloud::iot::v1::PublicKeyCredential* public_key);
  ::google::cloud::iot::v1::PublicKeyCredential* unsafe_arena_release_public_key();

  void clear_credential();
  CredentialCase credential_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.iot.v1.DeviceCredential)
 private:
  void set_has_public_key();

  inline bool has_credential() const;
  inline void clear_has_credential();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::Timestamp* expiration_time_;
  union CredentialUnion {
    CredentialUnion() {}
    ::google::cloud::iot::v1::PublicKeyCredential* public_key_;
  } credential_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fcloud_2fiot_2fv1_2fresources_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PublicKeyCredential : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.iot.v1.PublicKeyCredential) */ {
 public:
  PublicKeyCredential();
  virtual ~PublicKeyCredential();

  PublicKeyCredential(const PublicKeyCredential& from);

  inline PublicKeyCredential& operator=(const PublicKeyCredential& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublicKeyCredential(PublicKeyCredential&& from) noexcept
    : PublicKeyCredential() {
    *this = ::std::move(from);
  }

  inline PublicKeyCredential& operator=(PublicKeyCredential&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PublicKeyCredential& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublicKeyCredential* internal_default_instance() {
    return reinterpret_cast<const PublicKeyCredential*>(
               &_PublicKeyCredential_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void UnsafeArenaSwap(PublicKeyCredential* other);
  void Swap(PublicKeyCredential* other);
  friend void swap(PublicKeyCredential& a, PublicKeyCredential& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublicKeyCredential* New() const final {
    return CreateMaybeMessage<PublicKeyCredential>(NULL);
  }

  PublicKeyCredential* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PublicKeyCredential>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PublicKeyCredential& from);
  void MergeFrom(const PublicKeyCredential& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicKeyCredential* other);
  protected:
  explicit PublicKeyCredential(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_key();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      ::std::string* key);

  // .google.cloud.iot.v1.PublicKeyFormat format = 1;
  void clear_format();
  static const int kFormatFieldNumber = 1;
  ::google::cloud::iot::v1::PublicKeyFormat format() const;
  void set_format(::google::cloud::iot::v1::PublicKeyFormat value);

  // @@protoc_insertion_point(class_scope:google.cloud.iot.v1.PublicKeyCredential)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  int format_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fiot_2fv1_2fresources_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.iot.v1.DeviceConfig) */ {
 public:
  DeviceConfig();
  virtual ~DeviceConfig();

  DeviceConfig(const DeviceConfig& from);

  inline DeviceConfig& operator=(const DeviceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceConfig(DeviceConfig&& from) noexcept
    : DeviceConfig() {
    *this = ::std::move(from);
  }

  inline DeviceConfig& operator=(DeviceConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceConfig* internal_default_instance() {
    return reinterpret_cast<const DeviceConfig*>(
               &_DeviceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void UnsafeArenaSwap(DeviceConfig* other);
  void Swap(DeviceConfig* other);
  friend void swap(DeviceConfig& a, DeviceConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceConfig* New() const final {
    return CreateMaybeMessage<DeviceConfig>(NULL);
  }

  DeviceConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceConfig& from);
  void MergeFrom(const DeviceConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceConfig* other);
  protected:
  explicit DeviceConfig(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes binary_data = 4;
  void clear_binary_data();
  static const int kBinaryDataFieldNumber = 4;
  const ::std::string& binary_data() const;
  void set_binary_data(const ::std::string& value);
  #if LANG_CXX11
  void set_binary_data(::std::string&& value);
  #endif
  void set_binary_data(const char* value);
  void set_binary_data(const void* value, size_t size);
  ::std::string* mutable_binary_data();
  ::std::string* release_binary_data();
  void set_allocated_binary_data(::std::string* binary_data);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_binary_data();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_binary_data(
      ::std::string* binary_data);

  // .google.protobuf.Timestamp cloud_update_time = 2;
  bool has_cloud_update_time() const;
  void clear_cloud_update_time();
  static const int kCloudUpdateTimeFieldNumber = 2;
  private:
  const ::google::protobuf::Timestamp& _internal_cloud_update_time() const;
  public:
  const ::google::protobuf::Timestamp& cloud_update_time() const;
  ::google::protobuf::Timestamp* release_cloud_update_time();
  ::google::protobuf::Timestamp* mutable_cloud_update_time();
  void set_allocated_cloud_update_time(::google::protobuf::Timestamp* cloud_update_time);
  void unsafe_arena_set_allocated_cloud_update_time(
      ::google::protobuf::Timestamp* cloud_update_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_cloud_update_time();

  // .google.protobuf.Timestamp device_ack_time = 3;
  bool has_device_ack_time() const;
  void clear_device_ack_time();
  static const int kDeviceAckTimeFieldNumber = 3;
  private:
  const ::google::protobuf::Timestamp& _internal_device_ack_time() const;
  public:
  const ::google::protobuf::Timestamp& device_ack_time() const;
  ::google::protobuf::Timestamp* release_device_ack_time();
  ::google::protobuf::Timestamp* mutable_device_ack_time();
  void set_allocated_device_ack_time(::google::protobuf::Timestamp* device_ack_time);
  void unsafe_arena_set_allocated_device_ack_time(
      ::google::protobuf::Timestamp* device_ack_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_device_ack_time();

  // int64 version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::int64 version() const;
  void set_version(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.cloud.iot.v1.DeviceConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr binary_data_;
  ::google::protobuf::Timestamp* cloud_update_time_;
  ::google::protobuf::Timestamp* device_ack_time_;
  ::google::protobuf::int64 version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fiot_2fv1_2fresources_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.iot.v1.DeviceState) */ {
 public:
  DeviceState();
  virtual ~DeviceState();

  DeviceState(const DeviceState& from);

  inline DeviceState& operator=(const DeviceState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceState(DeviceState&& from) noexcept
    : DeviceState() {
    *this = ::std::move(from);
  }

  inline DeviceState& operator=(DeviceState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceState* internal_default_instance() {
    return reinterpret_cast<const DeviceState*>(
               &_DeviceState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void UnsafeArenaSwap(DeviceState* other);
  void Swap(DeviceState* other);
  friend void swap(DeviceState& a, DeviceState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceState* New() const final {
    return CreateMaybeMessage<DeviceState>(NULL);
  }

  DeviceState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceState& from);
  void MergeFrom(const DeviceState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceState* other);
  protected:
  explicit DeviceState(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes binary_data = 2;
  void clear_binary_data();
  static const int kBinaryDataFieldNumber = 2;
  const ::std::string& binary_data() const;
  void set_binary_data(const ::std::string& value);
  #if LANG_CXX11
  void set_binary_data(::std::string&& value);
  #endif
  void set_binary_data(const char* value);
  void set_binary_data(const void* value, size_t size);
  ::std::string* mutable_binary_data();
  ::std::string* release_binary_data();
  void set_allocated_binary_data(::std::string* binary_data);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_binary_data();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_binary_data(
      ::std::string* binary_data);

  // .google.protobuf.Timestamp update_time = 1;
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 1;
  private:
  const ::google::protobuf::Timestamp& _internal_update_time() const;
  public:
  const ::google::protobuf::Timestamp& update_time() const;
  ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* update_time);
  void unsafe_arena_set_allocated_update_time(
      ::google::protobuf::Timestamp* update_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_update_time();

  // @@protoc_insertion_point(class_scope:google.cloud.iot.v1.DeviceState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr binary_data_;
  ::google::protobuf::Timestamp* update_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fiot_2fv1_2fresources_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Device

// string id = 1;
inline void Device::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Device::id() const {
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.Device.id)
  return id_.Get();
}
inline void Device::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.iot.v1.Device.id)
}
#if LANG_CXX11
inline void Device::set_id(::std::string&& value) {
  
  id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.iot.v1.Device.id)
}
#endif
inline void Device::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.iot.v1.Device.id)
}
inline void Device::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.iot.v1.Device.id)
}
inline ::std::string* Device::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.Device.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Device::release_id() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.Device.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Device::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.Device.id)
}
inline ::std::string* Device::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.Device.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Device::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.iot.v1.Device.id)
}

// string name = 2;
inline void Device::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Device::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.Device.name)
  return name_.Get();
}
inline void Device::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.iot.v1.Device.name)
}
#if LANG_CXX11
inline void Device::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.iot.v1.Device.name)
}
#endif
inline void Device::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.iot.v1.Device.name)
}
inline void Device::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.iot.v1.Device.name)
}
inline ::std::string* Device::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.Device.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Device::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.Device.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Device::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.Device.name)
}
inline ::std::string* Device::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.Device.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Device::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.iot.v1.Device.name)
}

// uint64 num_id = 3;
inline void Device::clear_num_id() {
  num_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Device::num_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.Device.num_id)
  return num_id_;
}
inline void Device::set_num_id(::google::protobuf::uint64 value) {
  
  num_id_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.iot.v1.Device.num_id)
}

// repeated .google.cloud.iot.v1.DeviceCredential credentials = 12;
inline int Device::credentials_size() const {
  return credentials_.size();
}
inline void Device::clear_credentials() {
  credentials_.Clear();
}
inline ::google::cloud::iot::v1::DeviceCredential* Device::mutable_credentials(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.Device.credentials)
  return credentials_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::iot::v1::DeviceCredential >*
Device::mutable_credentials() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.iot.v1.Device.credentials)
  return &credentials_;
}
inline const ::google::cloud::iot::v1::DeviceCredential& Device::credentials(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.Device.credentials)
  return credentials_.Get(index);
}
inline ::google::cloud::iot::v1::DeviceCredential* Device::add_credentials() {
  // @@protoc_insertion_point(field_add:google.cloud.iot.v1.Device.credentials)
  return credentials_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::iot::v1::DeviceCredential >&
Device::credentials() const {
  // @@protoc_insertion_point(field_list:google.cloud.iot.v1.Device.credentials)
  return credentials_;
}

// .google.protobuf.Timestamp last_heartbeat_time = 7;
inline bool Device::has_last_heartbeat_time() const {
  return this != internal_default_instance() && last_heartbeat_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Device::_internal_last_heartbeat_time() const {
  return *last_heartbeat_time_;
}
inline const ::google::protobuf::Timestamp& Device::last_heartbeat_time() const {
  const ::google::protobuf::Timestamp* p = last_heartbeat_time_;
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.Device.last_heartbeat_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Device::release_last_heartbeat_time() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.Device.last_heartbeat_time)
  
  ::google::protobuf::Timestamp* temp = last_heartbeat_time_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  last_heartbeat_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Device::unsafe_arena_release_last_heartbeat_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.Device.last_heartbeat_time)
  
  ::google::protobuf::Timestamp* temp = last_heartbeat_time_;
  last_heartbeat_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Device::mutable_last_heartbeat_time() {
  
  if (last_heartbeat_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    last_heartbeat_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.Device.last_heartbeat_time)
  return last_heartbeat_time_;
}
inline void Device::set_allocated_last_heartbeat_time(::google::protobuf::Timestamp* last_heartbeat_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(last_heartbeat_time_);
  }
  if (last_heartbeat_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(last_heartbeat_time)->GetArena();
    if (message_arena != submessage_arena) {
      last_heartbeat_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_heartbeat_time, submessage_arena);
    }
    
  } else {
    
  }
  last_heartbeat_time_ = last_heartbeat_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.Device.last_heartbeat_time)
}

// .google.protobuf.Timestamp last_event_time = 8;
inline bool Device::has_last_event_time() const {
  return this != internal_default_instance() && last_event_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Device::_internal_last_event_time() const {
  return *last_event_time_;
}
inline const ::google::protobuf::Timestamp& Device::last_event_time() const {
  const ::google::protobuf::Timestamp* p = last_event_time_;
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.Device.last_event_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Device::release_last_event_time() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.Device.last_event_time)
  
  ::google::protobuf::Timestamp* temp = last_event_time_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  last_event_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Device::unsafe_arena_release_last_event_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.Device.last_event_time)
  
  ::google::protobuf::Timestamp* temp = last_event_time_;
  last_event_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Device::mutable_last_event_time() {
  
  if (last_event_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    last_event_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.Device.last_event_time)
  return last_event_time_;
}
inline void Device::set_allocated_last_event_time(::google::protobuf::Timestamp* last_event_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(last_event_time_);
  }
  if (last_event_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(last_event_time)->GetArena();
    if (message_arena != submessage_arena) {
      last_event_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_event_time, submessage_arena);
    }
    
  } else {
    
  }
  last_event_time_ = last_event_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.Device.last_event_time)
}

// .google.protobuf.Timestamp last_state_time = 20;
inline bool Device::has_last_state_time() const {
  return this != internal_default_instance() && last_state_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Device::_internal_last_state_time() const {
  return *last_state_time_;
}
inline const ::google::protobuf::Timestamp& Device::last_state_time() const {
  const ::google::protobuf::Timestamp* p = last_state_time_;
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.Device.last_state_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Device::release_last_state_time() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.Device.last_state_time)
  
  ::google::protobuf::Timestamp* temp = last_state_time_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  last_state_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Device::unsafe_arena_release_last_state_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.Device.last_state_time)
  
  ::google::protobuf::Timestamp* temp = last_state_time_;
  last_state_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Device::mutable_last_state_time() {
  
  if (last_state_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    last_state_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.Device.last_state_time)
  return last_state_time_;
}
inline void Device::set_allocated_last_state_time(::google::protobuf::Timestamp* last_state_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(last_state_time_);
  }
  if (last_state_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(last_state_time)->GetArena();
    if (message_arena != submessage_arena) {
      last_state_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_state_time, submessage_arena);
    }
    
  } else {
    
  }
  last_state_time_ = last_state_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.Device.last_state_time)
}

// .google.protobuf.Timestamp last_config_ack_time = 14;
inline bool Device::has_last_config_ack_time() const {
  return this != internal_default_instance() && last_config_ack_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Device::_internal_last_config_ack_time() const {
  return *last_config_ack_time_;
}
inline const ::google::protobuf::Timestamp& Device::last_config_ack_time() const {
  const ::google::protobuf::Timestamp* p = last_config_ack_time_;
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.Device.last_config_ack_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Device::release_last_config_ack_time() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.Device.last_config_ack_time)
  
  ::google::protobuf::Timestamp* temp = last_config_ack_time_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  last_config_ack_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Device::unsafe_arena_release_last_config_ack_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.Device.last_config_ack_time)
  
  ::google::protobuf::Timestamp* temp = last_config_ack_time_;
  last_config_ack_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Device::mutable_last_config_ack_time() {
  
  if (last_config_ack_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    last_config_ack_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.Device.last_config_ack_time)
  return last_config_ack_time_;
}
inline void Device::set_allocated_last_config_ack_time(::google::protobuf::Timestamp* last_config_ack_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(last_config_ack_time_);
  }
  if (last_config_ack_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(last_config_ack_time)->GetArena();
    if (message_arena != submessage_arena) {
      last_config_ack_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_config_ack_time, submessage_arena);
    }
    
  } else {
    
  }
  last_config_ack_time_ = last_config_ack_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.Device.last_config_ack_time)
}

// .google.protobuf.Timestamp last_config_send_time = 18;
inline bool Device::has_last_config_send_time() const {
  return this != internal_default_instance() && last_config_send_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Device::_internal_last_config_send_time() const {
  return *last_config_send_time_;
}
inline const ::google::protobuf::Timestamp& Device::last_config_send_time() const {
  const ::google::protobuf::Timestamp* p = last_config_send_time_;
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.Device.last_config_send_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Device::release_last_config_send_time() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.Device.last_config_send_time)
  
  ::google::protobuf::Timestamp* temp = last_config_send_time_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  last_config_send_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Device::unsafe_arena_release_last_config_send_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.Device.last_config_send_time)
  
  ::google::protobuf::Timestamp* temp = last_config_send_time_;
  last_config_send_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Device::mutable_last_config_send_time() {
  
  if (last_config_send_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    last_config_send_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.Device.last_config_send_time)
  return last_config_send_time_;
}
inline void Device::set_allocated_last_config_send_time(::google::protobuf::Timestamp* last_config_send_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(last_config_send_time_);
  }
  if (last_config_send_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(last_config_send_time)->GetArena();
    if (message_arena != submessage_arena) {
      last_config_send_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_config_send_time, submessage_arena);
    }
    
  } else {
    
  }
  last_config_send_time_ = last_config_send_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.Device.last_config_send_time)
}

// bool blocked = 19;
inline void Device::clear_blocked() {
  blocked_ = false;
}
inline bool Device::blocked() const {
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.Device.blocked)
  return blocked_;
}
inline void Device::set_blocked(bool value) {
  
  blocked_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.iot.v1.Device.blocked)
}

// .google.protobuf.Timestamp last_error_time = 10;
inline bool Device::has_last_error_time() const {
  return this != internal_default_instance() && last_error_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Device::_internal_last_error_time() const {
  return *last_error_time_;
}
inline const ::google::protobuf::Timestamp& Device::last_error_time() const {
  const ::google::protobuf::Timestamp* p = last_error_time_;
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.Device.last_error_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Device::release_last_error_time() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.Device.last_error_time)
  
  ::google::protobuf::Timestamp* temp = last_error_time_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  last_error_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Device::unsafe_arena_release_last_error_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.Device.last_error_time)
  
  ::google::protobuf::Timestamp* temp = last_error_time_;
  last_error_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Device::mutable_last_error_time() {
  
  if (last_error_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    last_error_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.Device.last_error_time)
  return last_error_time_;
}
inline void Device::set_allocated_last_error_time(::google::protobuf::Timestamp* last_error_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(last_error_time_);
  }
  if (last_error_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(last_error_time)->GetArena();
    if (message_arena != submessage_arena) {
      last_error_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_error_time, submessage_arena);
    }
    
  } else {
    
  }
  last_error_time_ = last_error_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.Device.last_error_time)
}

// .google.rpc.Status last_error_status = 11;
inline bool Device::has_last_error_status() const {
  return this != internal_default_instance() && last_error_status_ != NULL;
}
inline const ::google::rpc::Status& Device::_internal_last_error_status() const {
  return *last_error_status_;
}
inline const ::google::rpc::Status& Device::last_error_status() const {
  const ::google::rpc::Status* p = last_error_status_;
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.Device.last_error_status)
  return p != NULL ? *p : *reinterpret_cast<const ::google::rpc::Status*>(
      &::google::rpc::_Status_default_instance_);
}
inline ::google::rpc::Status* Device::release_last_error_status() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.Device.last_error_status)
  
  ::google::rpc::Status* temp = last_error_status_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  last_error_status_ = NULL;
  return temp;
}
inline ::google::rpc::Status* Device::unsafe_arena_release_last_error_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.Device.last_error_status)
  
  ::google::rpc::Status* temp = last_error_status_;
  last_error_status_ = NULL;
  return temp;
}
inline ::google::rpc::Status* Device::mutable_last_error_status() {
  
  if (last_error_status_ == NULL) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaNoVirtual());
    last_error_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.Device.last_error_status)
  return last_error_status_;
}
inline void Device::set_allocated_last_error_status(::google::rpc::Status* last_error_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(last_error_status_);
  }
  if (last_error_status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      last_error_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_error_status, submessage_arena);
    }
    
  } else {
    
  }
  last_error_status_ = last_error_status;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.Device.last_error_status)
}

// .google.cloud.iot.v1.DeviceConfig config = 13;
inline bool Device::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Device::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::google::cloud::iot::v1::DeviceConfig& Device::_internal_config() const {
  return *config_;
}
inline const ::google::cloud::iot::v1::DeviceConfig& Device::config() const {
  const ::google::cloud::iot::v1::DeviceConfig* p = config_;
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.Device.config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::iot::v1::DeviceConfig*>(
      &::google::cloud::iot::v1::_DeviceConfig_default_instance_);
}
inline ::google::cloud::iot::v1::DeviceConfig* Device::release_config() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.Device.config)
  
  ::google::cloud::iot::v1::DeviceConfig* temp = config_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  config_ = NULL;
  return temp;
}
inline ::google::cloud::iot::v1::DeviceConfig* Device::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.Device.config)
  
  ::google::cloud::iot::v1::DeviceConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::google::cloud::iot::v1::DeviceConfig* Device::mutable_config() {
  
  if (config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::iot::v1::DeviceConfig>(GetArenaNoVirtual());
    config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.Device.config)
  return config_;
}
inline void Device::set_allocated_config(::google::cloud::iot::v1::DeviceConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(config);
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.Device.config)
}

// .google.cloud.iot.v1.DeviceState state = 16;
inline bool Device::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Device::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::google::cloud::iot::v1::DeviceState& Device::_internal_state() const {
  return *state_;
}
inline const ::google::cloud::iot::v1::DeviceState& Device::state() const {
  const ::google::cloud::iot::v1::DeviceState* p = state_;
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.Device.state)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::iot::v1::DeviceState*>(
      &::google::cloud::iot::v1::_DeviceState_default_instance_);
}
inline ::google::cloud::iot::v1::DeviceState* Device::release_state() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.Device.state)
  
  ::google::cloud::iot::v1::DeviceState* temp = state_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  state_ = NULL;
  return temp;
}
inline ::google::cloud::iot::v1::DeviceState* Device::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.Device.state)
  
  ::google::cloud::iot::v1::DeviceState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::google::cloud::iot::v1::DeviceState* Device::mutable_state() {
  
  if (state_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::iot::v1::DeviceState>(GetArenaNoVirtual());
    state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.Device.state)
  return state_;
}
inline void Device::set_allocated_state(::google::cloud::iot::v1::DeviceState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(state);
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.Device.state)
}

// map<string, string> metadata = 17;
inline int Device::metadata_size() const {
  return metadata_.size();
}
inline void Device::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Device::metadata() const {
  // @@protoc_insertion_point(field_map:google.cloud.iot.v1.Device.metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Device::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.iot.v1.Device.metadata)
  return metadata_.MutableMap();
}

// -------------------------------------------------------------------

// DeviceRegistry

// string id = 1;
inline void DeviceRegistry::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DeviceRegistry::id() const {
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.DeviceRegistry.id)
  return id_.Get();
}
inline void DeviceRegistry::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.iot.v1.DeviceRegistry.id)
}
#if LANG_CXX11
inline void DeviceRegistry::set_id(::std::string&& value) {
  
  id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.iot.v1.DeviceRegistry.id)
}
#endif
inline void DeviceRegistry::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.iot.v1.DeviceRegistry.id)
}
inline void DeviceRegistry::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.iot.v1.DeviceRegistry.id)
}
inline ::std::string* DeviceRegistry::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.DeviceRegistry.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DeviceRegistry::release_id() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.DeviceRegistry.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DeviceRegistry::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.DeviceRegistry.id)
}
inline ::std::string* DeviceRegistry::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.DeviceRegistry.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DeviceRegistry::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.iot.v1.DeviceRegistry.id)
}

// string name = 2;
inline void DeviceRegistry::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DeviceRegistry::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.DeviceRegistry.name)
  return name_.Get();
}
inline void DeviceRegistry::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.iot.v1.DeviceRegistry.name)
}
#if LANG_CXX11
inline void DeviceRegistry::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.iot.v1.DeviceRegistry.name)
}
#endif
inline void DeviceRegistry::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.iot.v1.DeviceRegistry.name)
}
inline void DeviceRegistry::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.iot.v1.DeviceRegistry.name)
}
inline ::std::string* DeviceRegistry::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.DeviceRegistry.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DeviceRegistry::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.DeviceRegistry.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DeviceRegistry::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.DeviceRegistry.name)
}
inline ::std::string* DeviceRegistry::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.DeviceRegistry.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DeviceRegistry::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.iot.v1.DeviceRegistry.name)
}

// repeated .google.cloud.iot.v1.EventNotificationConfig event_notification_configs = 10;
inline int DeviceRegistry::event_notification_configs_size() const {
  return event_notification_configs_.size();
}
inline void DeviceRegistry::clear_event_notification_configs() {
  event_notification_configs_.Clear();
}
inline ::google::cloud::iot::v1::EventNotificationConfig* DeviceRegistry::mutable_event_notification_configs(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.DeviceRegistry.event_notification_configs)
  return event_notification_configs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::iot::v1::EventNotificationConfig >*
DeviceRegistry::mutable_event_notification_configs() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.iot.v1.DeviceRegistry.event_notification_configs)
  return &event_notification_configs_;
}
inline const ::google::cloud::iot::v1::EventNotificationConfig& DeviceRegistry::event_notification_configs(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.DeviceRegistry.event_notification_configs)
  return event_notification_configs_.Get(index);
}
inline ::google::cloud::iot::v1::EventNotificationConfig* DeviceRegistry::add_event_notification_configs() {
  // @@protoc_insertion_point(field_add:google.cloud.iot.v1.DeviceRegistry.event_notification_configs)
  return event_notification_configs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::iot::v1::EventNotificationConfig >&
DeviceRegistry::event_notification_configs() const {
  // @@protoc_insertion_point(field_list:google.cloud.iot.v1.DeviceRegistry.event_notification_configs)
  return event_notification_configs_;
}

// .google.cloud.iot.v1.StateNotificationConfig state_notification_config = 7;
inline bool DeviceRegistry::has_state_notification_config() const {
  return this != internal_default_instance() && state_notification_config_ != NULL;
}
inline void DeviceRegistry::clear_state_notification_config() {
  if (GetArenaNoVirtual() == NULL && state_notification_config_ != NULL) {
    delete state_notification_config_;
  }
  state_notification_config_ = NULL;
}
inline const ::google::cloud::iot::v1::StateNotificationConfig& DeviceRegistry::_internal_state_notification_config() const {
  return *state_notification_config_;
}
inline const ::google::cloud::iot::v1::StateNotificationConfig& DeviceRegistry::state_notification_config() const {
  const ::google::cloud::iot::v1::StateNotificationConfig* p = state_notification_config_;
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.DeviceRegistry.state_notification_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::iot::v1::StateNotificationConfig*>(
      &::google::cloud::iot::v1::_StateNotificationConfig_default_instance_);
}
inline ::google::cloud::iot::v1::StateNotificationConfig* DeviceRegistry::release_state_notification_config() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.DeviceRegistry.state_notification_config)
  
  ::google::cloud::iot::v1::StateNotificationConfig* temp = state_notification_config_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  state_notification_config_ = NULL;
  return temp;
}
inline ::google::cloud::iot::v1::StateNotificationConfig* DeviceRegistry::unsafe_arena_release_state_notification_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.DeviceRegistry.state_notification_config)
  
  ::google::cloud::iot::v1::StateNotificationConfig* temp = state_notification_config_;
  state_notification_config_ = NULL;
  return temp;
}
inline ::google::cloud::iot::v1::StateNotificationConfig* DeviceRegistry::mutable_state_notification_config() {
  
  if (state_notification_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::iot::v1::StateNotificationConfig>(GetArenaNoVirtual());
    state_notification_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.DeviceRegistry.state_notification_config)
  return state_notification_config_;
}
inline void DeviceRegistry::set_allocated_state_notification_config(::google::cloud::iot::v1::StateNotificationConfig* state_notification_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_notification_config_;
  }
  if (state_notification_config) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(state_notification_config);
    if (message_arena != submessage_arena) {
      state_notification_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state_notification_config, submessage_arena);
    }
    
  } else {
    
  }
  state_notification_config_ = state_notification_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.DeviceRegistry.state_notification_config)
}

// .google.cloud.iot.v1.MqttConfig mqtt_config = 4;
inline bool DeviceRegistry::has_mqtt_config() const {
  return this != internal_default_instance() && mqtt_config_ != NULL;
}
inline void DeviceRegistry::clear_mqtt_config() {
  if (GetArenaNoVirtual() == NULL && mqtt_config_ != NULL) {
    delete mqtt_config_;
  }
  mqtt_config_ = NULL;
}
inline const ::google::cloud::iot::v1::MqttConfig& DeviceRegistry::_internal_mqtt_config() const {
  return *mqtt_config_;
}
inline const ::google::cloud::iot::v1::MqttConfig& DeviceRegistry::mqtt_config() const {
  const ::google::cloud::iot::v1::MqttConfig* p = mqtt_config_;
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.DeviceRegistry.mqtt_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::iot::v1::MqttConfig*>(
      &::google::cloud::iot::v1::_MqttConfig_default_instance_);
}
inline ::google::cloud::iot::v1::MqttConfig* DeviceRegistry::release_mqtt_config() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.DeviceRegistry.mqtt_config)
  
  ::google::cloud::iot::v1::MqttConfig* temp = mqtt_config_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  mqtt_config_ = NULL;
  return temp;
}
inline ::google::cloud::iot::v1::MqttConfig* DeviceRegistry::unsafe_arena_release_mqtt_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.DeviceRegistry.mqtt_config)
  
  ::google::cloud::iot::v1::MqttConfig* temp = mqtt_config_;
  mqtt_config_ = NULL;
  return temp;
}
inline ::google::cloud::iot::v1::MqttConfig* DeviceRegistry::mutable_mqtt_config() {
  
  if (mqtt_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::iot::v1::MqttConfig>(GetArenaNoVirtual());
    mqtt_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.DeviceRegistry.mqtt_config)
  return mqtt_config_;
}
inline void DeviceRegistry::set_allocated_mqtt_config(::google::cloud::iot::v1::MqttConfig* mqtt_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mqtt_config_;
  }
  if (mqtt_config) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(mqtt_config);
    if (message_arena != submessage_arena) {
      mqtt_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mqtt_config, submessage_arena);
    }
    
  } else {
    
  }
  mqtt_config_ = mqtt_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.DeviceRegistry.mqtt_config)
}

// .google.cloud.iot.v1.HttpConfig http_config = 9;
inline bool DeviceRegistry::has_http_config() const {
  return this != internal_default_instance() && http_config_ != NULL;
}
inline void DeviceRegistry::clear_http_config() {
  if (GetArenaNoVirtual() == NULL && http_config_ != NULL) {
    delete http_config_;
  }
  http_config_ = NULL;
}
inline const ::google::cloud::iot::v1::HttpConfig& DeviceRegistry::_internal_http_config() const {
  return *http_config_;
}
inline const ::google::cloud::iot::v1::HttpConfig& DeviceRegistry::http_config() const {
  const ::google::cloud::iot::v1::HttpConfig* p = http_config_;
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.DeviceRegistry.http_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::iot::v1::HttpConfig*>(
      &::google::cloud::iot::v1::_HttpConfig_default_instance_);
}
inline ::google::cloud::iot::v1::HttpConfig* DeviceRegistry::release_http_config() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.DeviceRegistry.http_config)
  
  ::google::cloud::iot::v1::HttpConfig* temp = http_config_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  http_config_ = NULL;
  return temp;
}
inline ::google::cloud::iot::v1::HttpConfig* DeviceRegistry::unsafe_arena_release_http_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.DeviceRegistry.http_config)
  
  ::google::cloud::iot::v1::HttpConfig* temp = http_config_;
  http_config_ = NULL;
  return temp;
}
inline ::google::cloud::iot::v1::HttpConfig* DeviceRegistry::mutable_http_config() {
  
  if (http_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::iot::v1::HttpConfig>(GetArenaNoVirtual());
    http_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.DeviceRegistry.http_config)
  return http_config_;
}
inline void DeviceRegistry::set_allocated_http_config(::google::cloud::iot::v1::HttpConfig* http_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete http_config_;
  }
  if (http_config) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(http_config);
    if (message_arena != submessage_arena) {
      http_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, http_config, submessage_arena);
    }
    
  } else {
    
  }
  http_config_ = http_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.DeviceRegistry.http_config)
}

// repeated .google.cloud.iot.v1.RegistryCredential credentials = 8;
inline int DeviceRegistry::credentials_size() const {
  return credentials_.size();
}
inline void DeviceRegistry::clear_credentials() {
  credentials_.Clear();
}
inline ::google::cloud::iot::v1::RegistryCredential* DeviceRegistry::mutable_credentials(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.DeviceRegistry.credentials)
  return credentials_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::iot::v1::RegistryCredential >*
DeviceRegistry::mutable_credentials() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.iot.v1.DeviceRegistry.credentials)
  return &credentials_;
}
inline const ::google::cloud::iot::v1::RegistryCredential& DeviceRegistry::credentials(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.DeviceRegistry.credentials)
  return credentials_.Get(index);
}
inline ::google::cloud::iot::v1::RegistryCredential* DeviceRegistry::add_credentials() {
  // @@protoc_insertion_point(field_add:google.cloud.iot.v1.DeviceRegistry.credentials)
  return credentials_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::iot::v1::RegistryCredential >&
DeviceRegistry::credentials() const {
  // @@protoc_insertion_point(field_list:google.cloud.iot.v1.DeviceRegistry.credentials)
  return credentials_;
}

// -------------------------------------------------------------------

// MqttConfig

// .google.cloud.iot.v1.MqttState mqtt_enabled_state = 1;
inline void MqttConfig::clear_mqtt_enabled_state() {
  mqtt_enabled_state_ = 0;
}
inline ::google::cloud::iot::v1::MqttState MqttConfig::mqtt_enabled_state() const {
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.MqttConfig.mqtt_enabled_state)
  return static_cast< ::google::cloud::iot::v1::MqttState >(mqtt_enabled_state_);
}
inline void MqttConfig::set_mqtt_enabled_state(::google::cloud::iot::v1::MqttState value) {
  
  mqtt_enabled_state_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.iot.v1.MqttConfig.mqtt_enabled_state)
}

// -------------------------------------------------------------------

// HttpConfig

// .google.cloud.iot.v1.HttpState http_enabled_state = 1;
inline void HttpConfig::clear_http_enabled_state() {
  http_enabled_state_ = 0;
}
inline ::google::cloud::iot::v1::HttpState HttpConfig::http_enabled_state() const {
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.HttpConfig.http_enabled_state)
  return static_cast< ::google::cloud::iot::v1::HttpState >(http_enabled_state_);
}
inline void HttpConfig::set_http_enabled_state(::google::cloud::iot::v1::HttpState value) {
  
  http_enabled_state_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.iot.v1.HttpConfig.http_enabled_state)
}

// -------------------------------------------------------------------

// EventNotificationConfig

// string subfolder_matches = 2;
inline void EventNotificationConfig::clear_subfolder_matches() {
  subfolder_matches_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& EventNotificationConfig::subfolder_matches() const {
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.EventNotificationConfig.subfolder_matches)
  return subfolder_matches_.Get();
}
inline void EventNotificationConfig::set_subfolder_matches(const ::std::string& value) {
  
  subfolder_matches_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.iot.v1.EventNotificationConfig.subfolder_matches)
}
#if LANG_CXX11
inline void EventNotificationConfig::set_subfolder_matches(::std::string&& value) {
  
  subfolder_matches_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.iot.v1.EventNotificationConfig.subfolder_matches)
}
#endif
inline void EventNotificationConfig::set_subfolder_matches(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subfolder_matches_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.iot.v1.EventNotificationConfig.subfolder_matches)
}
inline void EventNotificationConfig::set_subfolder_matches(const char* value,
    size_t size) {
  
  subfolder_matches_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.iot.v1.EventNotificationConfig.subfolder_matches)
}
inline ::std::string* EventNotificationConfig::mutable_subfolder_matches() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.EventNotificationConfig.subfolder_matches)
  return subfolder_matches_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* EventNotificationConfig::release_subfolder_matches() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.EventNotificationConfig.subfolder_matches)
  
  return subfolder_matches_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void EventNotificationConfig::set_allocated_subfolder_matches(::std::string* subfolder_matches) {
  if (subfolder_matches != NULL) {
    
  } else {
    
  }
  subfolder_matches_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subfolder_matches,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.EventNotificationConfig.subfolder_matches)
}
inline ::std::string* EventNotificationConfig::unsafe_arena_release_subfolder_matches() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.EventNotificationConfig.subfolder_matches)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return subfolder_matches_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void EventNotificationConfig::unsafe_arena_set_allocated_subfolder_matches(
    ::std::string* subfolder_matches) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (subfolder_matches != NULL) {
    
  } else {
    
  }
  subfolder_matches_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      subfolder_matches, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.iot.v1.EventNotificationConfig.subfolder_matches)
}

// string pubsub_topic_name = 1;
inline void EventNotificationConfig::clear_pubsub_topic_name() {
  pubsub_topic_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& EventNotificationConfig::pubsub_topic_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.EventNotificationConfig.pubsub_topic_name)
  return pubsub_topic_name_.Get();
}
inline void EventNotificationConfig::set_pubsub_topic_name(const ::std::string& value) {
  
  pubsub_topic_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.iot.v1.EventNotificationConfig.pubsub_topic_name)
}
#if LANG_CXX11
inline void EventNotificationConfig::set_pubsub_topic_name(::std::string&& value) {
  
  pubsub_topic_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.iot.v1.EventNotificationConfig.pubsub_topic_name)
}
#endif
inline void EventNotificationConfig::set_pubsub_topic_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pubsub_topic_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.iot.v1.EventNotificationConfig.pubsub_topic_name)
}
inline void EventNotificationConfig::set_pubsub_topic_name(const char* value,
    size_t size) {
  
  pubsub_topic_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.iot.v1.EventNotificationConfig.pubsub_topic_name)
}
inline ::std::string* EventNotificationConfig::mutable_pubsub_topic_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.EventNotificationConfig.pubsub_topic_name)
  return pubsub_topic_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* EventNotificationConfig::release_pubsub_topic_name() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.EventNotificationConfig.pubsub_topic_name)
  
  return pubsub_topic_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void EventNotificationConfig::set_allocated_pubsub_topic_name(::std::string* pubsub_topic_name) {
  if (pubsub_topic_name != NULL) {
    
  } else {
    
  }
  pubsub_topic_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubsub_topic_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.EventNotificationConfig.pubsub_topic_name)
}
inline ::std::string* EventNotificationConfig::unsafe_arena_release_pubsub_topic_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.EventNotificationConfig.pubsub_topic_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return pubsub_topic_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void EventNotificationConfig::unsafe_arena_set_allocated_pubsub_topic_name(
    ::std::string* pubsub_topic_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (pubsub_topic_name != NULL) {
    
  } else {
    
  }
  pubsub_topic_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      pubsub_topic_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.iot.v1.EventNotificationConfig.pubsub_topic_name)
}

// -------------------------------------------------------------------

// StateNotificationConfig

// string pubsub_topic_name = 1;
inline void StateNotificationConfig::clear_pubsub_topic_name() {
  pubsub_topic_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& StateNotificationConfig::pubsub_topic_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.StateNotificationConfig.pubsub_topic_name)
  return pubsub_topic_name_.Get();
}
inline void StateNotificationConfig::set_pubsub_topic_name(const ::std::string& value) {
  
  pubsub_topic_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.iot.v1.StateNotificationConfig.pubsub_topic_name)
}
#if LANG_CXX11
inline void StateNotificationConfig::set_pubsub_topic_name(::std::string&& value) {
  
  pubsub_topic_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.iot.v1.StateNotificationConfig.pubsub_topic_name)
}
#endif
inline void StateNotificationConfig::set_pubsub_topic_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pubsub_topic_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.iot.v1.StateNotificationConfig.pubsub_topic_name)
}
inline void StateNotificationConfig::set_pubsub_topic_name(const char* value,
    size_t size) {
  
  pubsub_topic_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.iot.v1.StateNotificationConfig.pubsub_topic_name)
}
inline ::std::string* StateNotificationConfig::mutable_pubsub_topic_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.StateNotificationConfig.pubsub_topic_name)
  return pubsub_topic_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StateNotificationConfig::release_pubsub_topic_name() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.StateNotificationConfig.pubsub_topic_name)
  
  return pubsub_topic_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void StateNotificationConfig::set_allocated_pubsub_topic_name(::std::string* pubsub_topic_name) {
  if (pubsub_topic_name != NULL) {
    
  } else {
    
  }
  pubsub_topic_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubsub_topic_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.StateNotificationConfig.pubsub_topic_name)
}
inline ::std::string* StateNotificationConfig::unsafe_arena_release_pubsub_topic_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.StateNotificationConfig.pubsub_topic_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return pubsub_topic_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StateNotificationConfig::unsafe_arena_set_allocated_pubsub_topic_name(
    ::std::string* pubsub_topic_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (pubsub_topic_name != NULL) {
    
  } else {
    
  }
  pubsub_topic_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      pubsub_topic_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.iot.v1.StateNotificationConfig.pubsub_topic_name)
}

// -------------------------------------------------------------------

// RegistryCredential

// .google.cloud.iot.v1.PublicKeyCertificate public_key_certificate = 1;
inline bool RegistryCredential::has_public_key_certificate() const {
  return credential_case() == kPublicKeyCertificate;
}
inline void RegistryCredential::set_has_public_key_certificate() {
  _oneof_case_[0] = kPublicKeyCertificate;
}
inline void RegistryCredential::clear_public_key_certificate() {
  if (has_public_key_certificate()) {
    if (GetArenaNoVirtual() == NULL) {
      delete credential_.public_key_certificate_;
    }
    clear_has_credential();
  }
}
inline const ::google::cloud::iot::v1::PublicKeyCertificate& RegistryCredential::_internal_public_key_certificate() const {
  return *credential_.public_key_certificate_;
}
inline ::google::cloud::iot::v1::PublicKeyCertificate* RegistryCredential::release_public_key_certificate() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.RegistryCredential.public_key_certificate)
  if (has_public_key_certificate()) {
    clear_has_credential();
      ::google::cloud::iot::v1::PublicKeyCertificate* temp = credential_.public_key_certificate_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    credential_.public_key_certificate_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::iot::v1::PublicKeyCertificate& RegistryCredential::public_key_certificate() const {
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.RegistryCredential.public_key_certificate)
  return has_public_key_certificate()
      ? *credential_.public_key_certificate_
      : *reinterpret_cast< ::google::cloud::iot::v1::PublicKeyCertificate*>(&::google::cloud::iot::v1::_PublicKeyCertificate_default_instance_);
}
inline ::google::cloud::iot::v1::PublicKeyCertificate* RegistryCredential::unsafe_arena_release_public_key_certificate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.RegistryCredential.public_key_certificate)
  if (has_public_key_certificate()) {
    clear_has_credential();
    ::google::cloud::iot::v1::PublicKeyCertificate* temp = credential_.public_key_certificate_;
    credential_.public_key_certificate_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void RegistryCredential::unsafe_arena_set_allocated_public_key_certificate(::google::cloud::iot::v1::PublicKeyCertificate* public_key_certificate) {
  clear_credential();
  if (public_key_certificate) {
    set_has_public_key_certificate();
    credential_.public_key_certificate_ = public_key_certificate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.iot.v1.RegistryCredential.public_key_certificate)
}
inline ::google::cloud::iot::v1::PublicKeyCertificate* RegistryCredential::mutable_public_key_certificate() {
  if (!has_public_key_certificate()) {
    clear_credential();
    set_has_public_key_certificate();
    credential_.public_key_certificate_ = CreateMaybeMessage< ::google::cloud::iot::v1::PublicKeyCertificate >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.RegistryCredential.public_key_certificate)
  return credential_.public_key_certificate_;
}

inline bool RegistryCredential::has_credential() const {
  return credential_case() != CREDENTIAL_NOT_SET;
}
inline void RegistryCredential::clear_has_credential() {
  _oneof_case_[0] = CREDENTIAL_NOT_SET;
}
inline RegistryCredential::CredentialCase RegistryCredential::credential_case() const {
  return RegistryCredential::CredentialCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// X509CertificateDetails

// string issuer = 1;
inline void X509CertificateDetails::clear_issuer() {
  issuer_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& X509CertificateDetails::issuer() const {
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.X509CertificateDetails.issuer)
  return issuer_.Get();
}
inline void X509CertificateDetails::set_issuer(const ::std::string& value) {
  
  issuer_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.iot.v1.X509CertificateDetails.issuer)
}
#if LANG_CXX11
inline void X509CertificateDetails::set_issuer(::std::string&& value) {
  
  issuer_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.iot.v1.X509CertificateDetails.issuer)
}
#endif
inline void X509CertificateDetails::set_issuer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  issuer_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.iot.v1.X509CertificateDetails.issuer)
}
inline void X509CertificateDetails::set_issuer(const char* value,
    size_t size) {
  
  issuer_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.iot.v1.X509CertificateDetails.issuer)
}
inline ::std::string* X509CertificateDetails::mutable_issuer() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.X509CertificateDetails.issuer)
  return issuer_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* X509CertificateDetails::release_issuer() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.X509CertificateDetails.issuer)
  
  return issuer_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void X509CertificateDetails::set_allocated_issuer(::std::string* issuer) {
  if (issuer != NULL) {
    
  } else {
    
  }
  issuer_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issuer,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.X509CertificateDetails.issuer)
}
inline ::std::string* X509CertificateDetails::unsafe_arena_release_issuer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.X509CertificateDetails.issuer)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return issuer_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void X509CertificateDetails::unsafe_arena_set_allocated_issuer(
    ::std::string* issuer) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (issuer != NULL) {
    
  } else {
    
  }
  issuer_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      issuer, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.iot.v1.X509CertificateDetails.issuer)
}

// string subject = 2;
inline void X509CertificateDetails::clear_subject() {
  subject_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& X509CertificateDetails::subject() const {
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.X509CertificateDetails.subject)
  return subject_.Get();
}
inline void X509CertificateDetails::set_subject(const ::std::string& value) {
  
  subject_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.iot.v1.X509CertificateDetails.subject)
}
#if LANG_CXX11
inline void X509CertificateDetails::set_subject(::std::string&& value) {
  
  subject_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.iot.v1.X509CertificateDetails.subject)
}
#endif
inline void X509CertificateDetails::set_subject(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subject_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.iot.v1.X509CertificateDetails.subject)
}
inline void X509CertificateDetails::set_subject(const char* value,
    size_t size) {
  
  subject_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.iot.v1.X509CertificateDetails.subject)
}
inline ::std::string* X509CertificateDetails::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.X509CertificateDetails.subject)
  return subject_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* X509CertificateDetails::release_subject() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.X509CertificateDetails.subject)
  
  return subject_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void X509CertificateDetails::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    
  } else {
    
  }
  subject_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.X509CertificateDetails.subject)
}
inline ::std::string* X509CertificateDetails::unsafe_arena_release_subject() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.X509CertificateDetails.subject)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return subject_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void X509CertificateDetails::unsafe_arena_set_allocated_subject(
    ::std::string* subject) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (subject != NULL) {
    
  } else {
    
  }
  subject_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      subject, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.iot.v1.X509CertificateDetails.subject)
}

// .google.protobuf.Timestamp start_time = 3;
inline bool X509CertificateDetails::has_start_time() const {
  return this != internal_default_instance() && start_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& X509CertificateDetails::_internal_start_time() const {
  return *start_time_;
}
inline const ::google::protobuf::Timestamp& X509CertificateDetails::start_time() const {
  const ::google::protobuf::Timestamp* p = start_time_;
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.X509CertificateDetails.start_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* X509CertificateDetails::release_start_time() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.X509CertificateDetails.start_time)
  
  ::google::protobuf::Timestamp* temp = start_time_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  start_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* X509CertificateDetails::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.X509CertificateDetails.start_time)
  
  ::google::protobuf::Timestamp* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* X509CertificateDetails::mutable_start_time() {
  
  if (start_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    start_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.X509CertificateDetails.start_time)
  return start_time_;
}
inline void X509CertificateDetails::set_allocated_start_time(::google::protobuf::Timestamp* start_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.X509CertificateDetails.start_time)
}

// .google.protobuf.Timestamp expiry_time = 4;
inline bool X509CertificateDetails::has_expiry_time() const {
  return this != internal_default_instance() && expiry_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& X509CertificateDetails::_internal_expiry_time() const {
  return *expiry_time_;
}
inline const ::google::protobuf::Timestamp& X509CertificateDetails::expiry_time() const {
  const ::google::protobuf::Timestamp* p = expiry_time_;
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.X509CertificateDetails.expiry_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* X509CertificateDetails::release_expiry_time() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.X509CertificateDetails.expiry_time)
  
  ::google::protobuf::Timestamp* temp = expiry_time_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  expiry_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* X509CertificateDetails::unsafe_arena_release_expiry_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.X509CertificateDetails.expiry_time)
  
  ::google::protobuf::Timestamp* temp = expiry_time_;
  expiry_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* X509CertificateDetails::mutable_expiry_time() {
  
  if (expiry_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    expiry_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.X509CertificateDetails.expiry_time)
  return expiry_time_;
}
inline void X509CertificateDetails::set_allocated_expiry_time(::google::protobuf::Timestamp* expiry_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(expiry_time_);
  }
  if (expiry_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(expiry_time)->GetArena();
    if (message_arena != submessage_arena) {
      expiry_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expiry_time, submessage_arena);
    }
    
  } else {
    
  }
  expiry_time_ = expiry_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.X509CertificateDetails.expiry_time)
}

// string signature_algorithm = 5;
inline void X509CertificateDetails::clear_signature_algorithm() {
  signature_algorithm_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& X509CertificateDetails::signature_algorithm() const {
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.X509CertificateDetails.signature_algorithm)
  return signature_algorithm_.Get();
}
inline void X509CertificateDetails::set_signature_algorithm(const ::std::string& value) {
  
  signature_algorithm_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.iot.v1.X509CertificateDetails.signature_algorithm)
}
#if LANG_CXX11
inline void X509CertificateDetails::set_signature_algorithm(::std::string&& value) {
  
  signature_algorithm_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.iot.v1.X509CertificateDetails.signature_algorithm)
}
#endif
inline void X509CertificateDetails::set_signature_algorithm(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_algorithm_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.iot.v1.X509CertificateDetails.signature_algorithm)
}
inline void X509CertificateDetails::set_signature_algorithm(const char* value,
    size_t size) {
  
  signature_algorithm_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.iot.v1.X509CertificateDetails.signature_algorithm)
}
inline ::std::string* X509CertificateDetails::mutable_signature_algorithm() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.X509CertificateDetails.signature_algorithm)
  return signature_algorithm_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* X509CertificateDetails::release_signature_algorithm() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.X509CertificateDetails.signature_algorithm)
  
  return signature_algorithm_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void X509CertificateDetails::set_allocated_signature_algorithm(::std::string* signature_algorithm) {
  if (signature_algorithm != NULL) {
    
  } else {
    
  }
  signature_algorithm_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature_algorithm,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.X509CertificateDetails.signature_algorithm)
}
inline ::std::string* X509CertificateDetails::unsafe_arena_release_signature_algorithm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.X509CertificateDetails.signature_algorithm)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return signature_algorithm_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void X509CertificateDetails::unsafe_arena_set_allocated_signature_algorithm(
    ::std::string* signature_algorithm) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (signature_algorithm != NULL) {
    
  } else {
    
  }
  signature_algorithm_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      signature_algorithm, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.iot.v1.X509CertificateDetails.signature_algorithm)
}

// string public_key_type = 6;
inline void X509CertificateDetails::clear_public_key_type() {
  public_key_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& X509CertificateDetails::public_key_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.X509CertificateDetails.public_key_type)
  return public_key_type_.Get();
}
inline void X509CertificateDetails::set_public_key_type(const ::std::string& value) {
  
  public_key_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.iot.v1.X509CertificateDetails.public_key_type)
}
#if LANG_CXX11
inline void X509CertificateDetails::set_public_key_type(::std::string&& value) {
  
  public_key_type_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.iot.v1.X509CertificateDetails.public_key_type)
}
#endif
inline void X509CertificateDetails::set_public_key_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  public_key_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.iot.v1.X509CertificateDetails.public_key_type)
}
inline void X509CertificateDetails::set_public_key_type(const char* value,
    size_t size) {
  
  public_key_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.iot.v1.X509CertificateDetails.public_key_type)
}
inline ::std::string* X509CertificateDetails::mutable_public_key_type() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.X509CertificateDetails.public_key_type)
  return public_key_type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* X509CertificateDetails::release_public_key_type() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.X509CertificateDetails.public_key_type)
  
  return public_key_type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void X509CertificateDetails::set_allocated_public_key_type(::std::string* public_key_type) {
  if (public_key_type != NULL) {
    
  } else {
    
  }
  public_key_type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key_type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.X509CertificateDetails.public_key_type)
}
inline ::std::string* X509CertificateDetails::unsafe_arena_release_public_key_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.X509CertificateDetails.public_key_type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return public_key_type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void X509CertificateDetails::unsafe_arena_set_allocated_public_key_type(
    ::std::string* public_key_type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (public_key_type != NULL) {
    
  } else {
    
  }
  public_key_type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      public_key_type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.iot.v1.X509CertificateDetails.public_key_type)
}

// -------------------------------------------------------------------

// PublicKeyCertificate

// .google.cloud.iot.v1.PublicKeyCertificateFormat format = 1;
inline void PublicKeyCertificate::clear_format() {
  format_ = 0;
}
inline ::google::cloud::iot::v1::PublicKeyCertificateFormat PublicKeyCertificate::format() const {
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.PublicKeyCertificate.format)
  return static_cast< ::google::cloud::iot::v1::PublicKeyCertificateFormat >(format_);
}
inline void PublicKeyCertificate::set_format(::google::cloud::iot::v1::PublicKeyCertificateFormat value) {
  
  format_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.iot.v1.PublicKeyCertificate.format)
}

// string certificate = 2;
inline void PublicKeyCertificate::clear_certificate() {
  certificate_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PublicKeyCertificate::certificate() const {
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.PublicKeyCertificate.certificate)
  return certificate_.Get();
}
inline void PublicKeyCertificate::set_certificate(const ::std::string& value) {
  
  certificate_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.iot.v1.PublicKeyCertificate.certificate)
}
#if LANG_CXX11
inline void PublicKeyCertificate::set_certificate(::std::string&& value) {
  
  certificate_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.iot.v1.PublicKeyCertificate.certificate)
}
#endif
inline void PublicKeyCertificate::set_certificate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  certificate_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.iot.v1.PublicKeyCertificate.certificate)
}
inline void PublicKeyCertificate::set_certificate(const char* value,
    size_t size) {
  
  certificate_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.iot.v1.PublicKeyCertificate.certificate)
}
inline ::std::string* PublicKeyCertificate::mutable_certificate() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.PublicKeyCertificate.certificate)
  return certificate_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PublicKeyCertificate::release_certificate() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.PublicKeyCertificate.certificate)
  
  return certificate_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PublicKeyCertificate::set_allocated_certificate(::std::string* certificate) {
  if (certificate != NULL) {
    
  } else {
    
  }
  certificate_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certificate,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.PublicKeyCertificate.certificate)
}
inline ::std::string* PublicKeyCertificate::unsafe_arena_release_certificate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.PublicKeyCertificate.certificate)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return certificate_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PublicKeyCertificate::unsafe_arena_set_allocated_certificate(
    ::std::string* certificate) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (certificate != NULL) {
    
  } else {
    
  }
  certificate_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      certificate, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.iot.v1.PublicKeyCertificate.certificate)
}

// .google.cloud.iot.v1.X509CertificateDetails x509_details = 3;
inline bool PublicKeyCertificate::has_x509_details() const {
  return this != internal_default_instance() && x509_details_ != NULL;
}
inline void PublicKeyCertificate::clear_x509_details() {
  if (GetArenaNoVirtual() == NULL && x509_details_ != NULL) {
    delete x509_details_;
  }
  x509_details_ = NULL;
}
inline const ::google::cloud::iot::v1::X509CertificateDetails& PublicKeyCertificate::_internal_x509_details() const {
  return *x509_details_;
}
inline const ::google::cloud::iot::v1::X509CertificateDetails& PublicKeyCertificate::x509_details() const {
  const ::google::cloud::iot::v1::X509CertificateDetails* p = x509_details_;
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.PublicKeyCertificate.x509_details)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::iot::v1::X509CertificateDetails*>(
      &::google::cloud::iot::v1::_X509CertificateDetails_default_instance_);
}
inline ::google::cloud::iot::v1::X509CertificateDetails* PublicKeyCertificate::release_x509_details() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.PublicKeyCertificate.x509_details)
  
  ::google::cloud::iot::v1::X509CertificateDetails* temp = x509_details_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  x509_details_ = NULL;
  return temp;
}
inline ::google::cloud::iot::v1::X509CertificateDetails* PublicKeyCertificate::unsafe_arena_release_x509_details() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.PublicKeyCertificate.x509_details)
  
  ::google::cloud::iot::v1::X509CertificateDetails* temp = x509_details_;
  x509_details_ = NULL;
  return temp;
}
inline ::google::cloud::iot::v1::X509CertificateDetails* PublicKeyCertificate::mutable_x509_details() {
  
  if (x509_details_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::iot::v1::X509CertificateDetails>(GetArenaNoVirtual());
    x509_details_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.PublicKeyCertificate.x509_details)
  return x509_details_;
}
inline void PublicKeyCertificate::set_allocated_x509_details(::google::cloud::iot::v1::X509CertificateDetails* x509_details) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete x509_details_;
  }
  if (x509_details) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(x509_details);
    if (message_arena != submessage_arena) {
      x509_details = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, x509_details, submessage_arena);
    }
    
  } else {
    
  }
  x509_details_ = x509_details;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.PublicKeyCertificate.x509_details)
}

// -------------------------------------------------------------------

// DeviceCredential

// .google.cloud.iot.v1.PublicKeyCredential public_key = 2;
inline bool DeviceCredential::has_public_key() const {
  return credential_case() == kPublicKey;
}
inline void DeviceCredential::set_has_public_key() {
  _oneof_case_[0] = kPublicKey;
}
inline void DeviceCredential::clear_public_key() {
  if (has_public_key()) {
    if (GetArenaNoVirtual() == NULL) {
      delete credential_.public_key_;
    }
    clear_has_credential();
  }
}
inline const ::google::cloud::iot::v1::PublicKeyCredential& DeviceCredential::_internal_public_key() const {
  return *credential_.public_key_;
}
inline ::google::cloud::iot::v1::PublicKeyCredential* DeviceCredential::release_public_key() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.DeviceCredential.public_key)
  if (has_public_key()) {
    clear_has_credential();
      ::google::cloud::iot::v1::PublicKeyCredential* temp = credential_.public_key_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    credential_.public_key_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::iot::v1::PublicKeyCredential& DeviceCredential::public_key() const {
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.DeviceCredential.public_key)
  return has_public_key()
      ? *credential_.public_key_
      : *reinterpret_cast< ::google::cloud::iot::v1::PublicKeyCredential*>(&::google::cloud::iot::v1::_PublicKeyCredential_default_instance_);
}
inline ::google::cloud::iot::v1::PublicKeyCredential* DeviceCredential::unsafe_arena_release_public_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.DeviceCredential.public_key)
  if (has_public_key()) {
    clear_has_credential();
    ::google::cloud::iot::v1::PublicKeyCredential* temp = credential_.public_key_;
    credential_.public_key_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DeviceCredential::unsafe_arena_set_allocated_public_key(::google::cloud::iot::v1::PublicKeyCredential* public_key) {
  clear_credential();
  if (public_key) {
    set_has_public_key();
    credential_.public_key_ = public_key;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.iot.v1.DeviceCredential.public_key)
}
inline ::google::cloud::iot::v1::PublicKeyCredential* DeviceCredential::mutable_public_key() {
  if (!has_public_key()) {
    clear_credential();
    set_has_public_key();
    credential_.public_key_ = CreateMaybeMessage< ::google::cloud::iot::v1::PublicKeyCredential >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.DeviceCredential.public_key)
  return credential_.public_key_;
}

// .google.protobuf.Timestamp expiration_time = 6;
inline bool DeviceCredential::has_expiration_time() const {
  return this != internal_default_instance() && expiration_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& DeviceCredential::_internal_expiration_time() const {
  return *expiration_time_;
}
inline const ::google::protobuf::Timestamp& DeviceCredential::expiration_time() const {
  const ::google::protobuf::Timestamp* p = expiration_time_;
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.DeviceCredential.expiration_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* DeviceCredential::release_expiration_time() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.DeviceCredential.expiration_time)
  
  ::google::protobuf::Timestamp* temp = expiration_time_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  expiration_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* DeviceCredential::unsafe_arena_release_expiration_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.DeviceCredential.expiration_time)
  
  ::google::protobuf::Timestamp* temp = expiration_time_;
  expiration_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* DeviceCredential::mutable_expiration_time() {
  
  if (expiration_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    expiration_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.DeviceCredential.expiration_time)
  return expiration_time_;
}
inline void DeviceCredential::set_allocated_expiration_time(::google::protobuf::Timestamp* expiration_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(expiration_time_);
  }
  if (expiration_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(expiration_time)->GetArena();
    if (message_arena != submessage_arena) {
      expiration_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expiration_time, submessage_arena);
    }
    
  } else {
    
  }
  expiration_time_ = expiration_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.DeviceCredential.expiration_time)
}

inline bool DeviceCredential::has_credential() const {
  return credential_case() != CREDENTIAL_NOT_SET;
}
inline void DeviceCredential::clear_has_credential() {
  _oneof_case_[0] = CREDENTIAL_NOT_SET;
}
inline DeviceCredential::CredentialCase DeviceCredential::credential_case() const {
  return DeviceCredential::CredentialCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PublicKeyCredential

// .google.cloud.iot.v1.PublicKeyFormat format = 1;
inline void PublicKeyCredential::clear_format() {
  format_ = 0;
}
inline ::google::cloud::iot::v1::PublicKeyFormat PublicKeyCredential::format() const {
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.PublicKeyCredential.format)
  return static_cast< ::google::cloud::iot::v1::PublicKeyFormat >(format_);
}
inline void PublicKeyCredential::set_format(::google::cloud::iot::v1::PublicKeyFormat value) {
  
  format_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.iot.v1.PublicKeyCredential.format)
}

// string key = 2;
inline void PublicKeyCredential::clear_key() {
  key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PublicKeyCredential::key() const {
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.PublicKeyCredential.key)
  return key_.Get();
}
inline void PublicKeyCredential::set_key(const ::std::string& value) {
  
  key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.iot.v1.PublicKeyCredential.key)
}
#if LANG_CXX11
inline void PublicKeyCredential::set_key(::std::string&& value) {
  
  key_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.iot.v1.PublicKeyCredential.key)
}
#endif
inline void PublicKeyCredential::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.iot.v1.PublicKeyCredential.key)
}
inline void PublicKeyCredential::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.iot.v1.PublicKeyCredential.key)
}
inline ::std::string* PublicKeyCredential::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.PublicKeyCredential.key)
  return key_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PublicKeyCredential::release_key() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.PublicKeyCredential.key)
  
  return key_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PublicKeyCredential::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.PublicKeyCredential.key)
}
inline ::std::string* PublicKeyCredential::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.PublicKeyCredential.key)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return key_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PublicKeyCredential::unsafe_arena_set_allocated_key(
    ::std::string* key) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (key != NULL) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      key, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.iot.v1.PublicKeyCredential.key)
}

// -------------------------------------------------------------------

// DeviceConfig

// int64 version = 1;
inline void DeviceConfig::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DeviceConfig::version() const {
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.DeviceConfig.version)
  return version_;
}
inline void DeviceConfig::set_version(::google::protobuf::int64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.iot.v1.DeviceConfig.version)
}

// .google.protobuf.Timestamp cloud_update_time = 2;
inline bool DeviceConfig::has_cloud_update_time() const {
  return this != internal_default_instance() && cloud_update_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& DeviceConfig::_internal_cloud_update_time() const {
  return *cloud_update_time_;
}
inline const ::google::protobuf::Timestamp& DeviceConfig::cloud_update_time() const {
  const ::google::protobuf::Timestamp* p = cloud_update_time_;
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.DeviceConfig.cloud_update_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* DeviceConfig::release_cloud_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.DeviceConfig.cloud_update_time)
  
  ::google::protobuf::Timestamp* temp = cloud_update_time_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  cloud_update_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* DeviceConfig::unsafe_arena_release_cloud_update_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.DeviceConfig.cloud_update_time)
  
  ::google::protobuf::Timestamp* temp = cloud_update_time_;
  cloud_update_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* DeviceConfig::mutable_cloud_update_time() {
  
  if (cloud_update_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    cloud_update_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.DeviceConfig.cloud_update_time)
  return cloud_update_time_;
}
inline void DeviceConfig::set_allocated_cloud_update_time(::google::protobuf::Timestamp* cloud_update_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cloud_update_time_);
  }
  if (cloud_update_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(cloud_update_time)->GetArena();
    if (message_arena != submessage_arena) {
      cloud_update_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cloud_update_time, submessage_arena);
    }
    
  } else {
    
  }
  cloud_update_time_ = cloud_update_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.DeviceConfig.cloud_update_time)
}

// .google.protobuf.Timestamp device_ack_time = 3;
inline bool DeviceConfig::has_device_ack_time() const {
  return this != internal_default_instance() && device_ack_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& DeviceConfig::_internal_device_ack_time() const {
  return *device_ack_time_;
}
inline const ::google::protobuf::Timestamp& DeviceConfig::device_ack_time() const {
  const ::google::protobuf::Timestamp* p = device_ack_time_;
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.DeviceConfig.device_ack_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* DeviceConfig::release_device_ack_time() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.DeviceConfig.device_ack_time)
  
  ::google::protobuf::Timestamp* temp = device_ack_time_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  device_ack_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* DeviceConfig::unsafe_arena_release_device_ack_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.DeviceConfig.device_ack_time)
  
  ::google::protobuf::Timestamp* temp = device_ack_time_;
  device_ack_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* DeviceConfig::mutable_device_ack_time() {
  
  if (device_ack_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    device_ack_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.DeviceConfig.device_ack_time)
  return device_ack_time_;
}
inline void DeviceConfig::set_allocated_device_ack_time(::google::protobuf::Timestamp* device_ack_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(device_ack_time_);
  }
  if (device_ack_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(device_ack_time)->GetArena();
    if (message_arena != submessage_arena) {
      device_ack_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_ack_time, submessage_arena);
    }
    
  } else {
    
  }
  device_ack_time_ = device_ack_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.DeviceConfig.device_ack_time)
}

// bytes binary_data = 4;
inline void DeviceConfig::clear_binary_data() {
  binary_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DeviceConfig::binary_data() const {
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.DeviceConfig.binary_data)
  return binary_data_.Get();
}
inline void DeviceConfig::set_binary_data(const ::std::string& value) {
  
  binary_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.iot.v1.DeviceConfig.binary_data)
}
#if LANG_CXX11
inline void DeviceConfig::set_binary_data(::std::string&& value) {
  
  binary_data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.iot.v1.DeviceConfig.binary_data)
}
#endif
inline void DeviceConfig::set_binary_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  binary_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.iot.v1.DeviceConfig.binary_data)
}
inline void DeviceConfig::set_binary_data(const void* value,
    size_t size) {
  
  binary_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.iot.v1.DeviceConfig.binary_data)
}
inline ::std::string* DeviceConfig::mutable_binary_data() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.DeviceConfig.binary_data)
  return binary_data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DeviceConfig::release_binary_data() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.DeviceConfig.binary_data)
  
  return binary_data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DeviceConfig::set_allocated_binary_data(::std::string* binary_data) {
  if (binary_data != NULL) {
    
  } else {
    
  }
  binary_data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), binary_data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.DeviceConfig.binary_data)
}
inline ::std::string* DeviceConfig::unsafe_arena_release_binary_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.DeviceConfig.binary_data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return binary_data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DeviceConfig::unsafe_arena_set_allocated_binary_data(
    ::std::string* binary_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (binary_data != NULL) {
    
  } else {
    
  }
  binary_data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      binary_data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.iot.v1.DeviceConfig.binary_data)
}

// -------------------------------------------------------------------

// DeviceState

// .google.protobuf.Timestamp update_time = 1;
inline bool DeviceState::has_update_time() const {
  return this != internal_default_instance() && update_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& DeviceState::_internal_update_time() const {
  return *update_time_;
}
inline const ::google::protobuf::Timestamp& DeviceState::update_time() const {
  const ::google::protobuf::Timestamp* p = update_time_;
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.DeviceState.update_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* DeviceState::release_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.DeviceState.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  update_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* DeviceState::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.DeviceState.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* DeviceState::mutable_update_time() {
  
  if (update_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    update_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.DeviceState.update_time)
  return update_time_;
}
inline void DeviceState::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.DeviceState.update_time)
}

// bytes binary_data = 2;
inline void DeviceState::clear_binary_data() {
  binary_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DeviceState::binary_data() const {
  // @@protoc_insertion_point(field_get:google.cloud.iot.v1.DeviceState.binary_data)
  return binary_data_.Get();
}
inline void DeviceState::set_binary_data(const ::std::string& value) {
  
  binary_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.iot.v1.DeviceState.binary_data)
}
#if LANG_CXX11
inline void DeviceState::set_binary_data(::std::string&& value) {
  
  binary_data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.iot.v1.DeviceState.binary_data)
}
#endif
inline void DeviceState::set_binary_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  binary_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.iot.v1.DeviceState.binary_data)
}
inline void DeviceState::set_binary_data(const void* value,
    size_t size) {
  
  binary_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.iot.v1.DeviceState.binary_data)
}
inline ::std::string* DeviceState::mutable_binary_data() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.iot.v1.DeviceState.binary_data)
  return binary_data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DeviceState::release_binary_data() {
  // @@protoc_insertion_point(field_release:google.cloud.iot.v1.DeviceState.binary_data)
  
  return binary_data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DeviceState::set_allocated_binary_data(::std::string* binary_data) {
  if (binary_data != NULL) {
    
  } else {
    
  }
  binary_data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), binary_data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.iot.v1.DeviceState.binary_data)
}
inline ::std::string* DeviceState::unsafe_arena_release_binary_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.iot.v1.DeviceState.binary_data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return binary_data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DeviceState::unsafe_arena_set_allocated_binary_data(
    ::std::string* binary_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (binary_data != NULL) {
    
  } else {
    
  }
  binary_data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      binary_data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.iot.v1.DeviceState.binary_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace iot
}  // namespace cloud
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::cloud::iot::v1::MqttState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::iot::v1::MqttState>() {
  return ::google::cloud::iot::v1::MqttState_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::iot::v1::HttpState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::iot::v1::HttpState>() {
  return ::google::cloud::iot::v1::HttpState_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::iot::v1::PublicKeyCertificateFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::iot::v1::PublicKeyCertificateFormat>() {
  return ::google::cloud::iot::v1::PublicKeyCertificateFormat_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::iot::v1::PublicKeyFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::iot::v1::PublicKeyFormat>() {
  return ::google::cloud::iot::v1::PublicKeyFormat_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fcloud_2fiot_2fv1_2fresources_2eproto
