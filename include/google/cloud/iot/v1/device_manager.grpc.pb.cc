// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/cloud/iot/v1/device_manager.proto

#include "google/cloud/iot/v1/device_manager.pb.h"
#include "google/cloud/iot/v1/device_manager.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace cloud {
namespace iot {
namespace v1 {

static const char* DeviceManager_method_names[] = {
  "/google.cloud.iot.v1.DeviceManager/CreateDeviceRegistry",
  "/google.cloud.iot.v1.DeviceManager/GetDeviceRegistry",
  "/google.cloud.iot.v1.DeviceManager/UpdateDeviceRegistry",
  "/google.cloud.iot.v1.DeviceManager/DeleteDeviceRegistry",
  "/google.cloud.iot.v1.DeviceManager/ListDeviceRegistries",
  "/google.cloud.iot.v1.DeviceManager/CreateDevice",
  "/google.cloud.iot.v1.DeviceManager/GetDevice",
  "/google.cloud.iot.v1.DeviceManager/UpdateDevice",
  "/google.cloud.iot.v1.DeviceManager/DeleteDevice",
  "/google.cloud.iot.v1.DeviceManager/ListDevices",
  "/google.cloud.iot.v1.DeviceManager/ModifyCloudToDeviceConfig",
  "/google.cloud.iot.v1.DeviceManager/ListDeviceConfigVersions",
  "/google.cloud.iot.v1.DeviceManager/ListDeviceStates",
  "/google.cloud.iot.v1.DeviceManager/SetIamPolicy",
  "/google.cloud.iot.v1.DeviceManager/GetIamPolicy",
  "/google.cloud.iot.v1.DeviceManager/TestIamPermissions",
};

std::unique_ptr< DeviceManager::Stub> DeviceManager::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DeviceManager::Stub> stub(new DeviceManager::Stub(channel));
  return stub;
}

DeviceManager::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateDeviceRegistry_(DeviceManager_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDeviceRegistry_(DeviceManager_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateDeviceRegistry_(DeviceManager_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteDeviceRegistry_(DeviceManager_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListDeviceRegistries_(DeviceManager_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateDevice_(DeviceManager_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDevice_(DeviceManager_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateDevice_(DeviceManager_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteDevice_(DeviceManager_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListDevices_(DeviceManager_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModifyCloudToDeviceConfig_(DeviceManager_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListDeviceConfigVersions_(DeviceManager_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListDeviceStates_(DeviceManager_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetIamPolicy_(DeviceManager_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIamPolicy_(DeviceManager_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TestIamPermissions_(DeviceManager_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DeviceManager::Stub::CreateDeviceRegistry(::grpc::ClientContext* context, const ::google::cloud::iot::v1::CreateDeviceRegistryRequest& request, ::google::cloud::iot::v1::DeviceRegistry* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateDeviceRegistry_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::iot::v1::DeviceRegistry>* DeviceManager::Stub::AsyncCreateDeviceRegistryRaw(::grpc::ClientContext* context, const ::google::cloud::iot::v1::CreateDeviceRegistryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::iot::v1::DeviceRegistry>::Create(channel_.get(), cq, rpcmethod_CreateDeviceRegistry_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::iot::v1::DeviceRegistry>* DeviceManager::Stub::PrepareAsyncCreateDeviceRegistryRaw(::grpc::ClientContext* context, const ::google::cloud::iot::v1::CreateDeviceRegistryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::iot::v1::DeviceRegistry>::Create(channel_.get(), cq, rpcmethod_CreateDeviceRegistry_, context, request, false);
}

::grpc::Status DeviceManager::Stub::GetDeviceRegistry(::grpc::ClientContext* context, const ::google::cloud::iot::v1::GetDeviceRegistryRequest& request, ::google::cloud::iot::v1::DeviceRegistry* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDeviceRegistry_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::iot::v1::DeviceRegistry>* DeviceManager::Stub::AsyncGetDeviceRegistryRaw(::grpc::ClientContext* context, const ::google::cloud::iot::v1::GetDeviceRegistryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::iot::v1::DeviceRegistry>::Create(channel_.get(), cq, rpcmethod_GetDeviceRegistry_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::iot::v1::DeviceRegistry>* DeviceManager::Stub::PrepareAsyncGetDeviceRegistryRaw(::grpc::ClientContext* context, const ::google::cloud::iot::v1::GetDeviceRegistryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::iot::v1::DeviceRegistry>::Create(channel_.get(), cq, rpcmethod_GetDeviceRegistry_, context, request, false);
}

::grpc::Status DeviceManager::Stub::UpdateDeviceRegistry(::grpc::ClientContext* context, const ::google::cloud::iot::v1::UpdateDeviceRegistryRequest& request, ::google::cloud::iot::v1::DeviceRegistry* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateDeviceRegistry_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::iot::v1::DeviceRegistry>* DeviceManager::Stub::AsyncUpdateDeviceRegistryRaw(::grpc::ClientContext* context, const ::google::cloud::iot::v1::UpdateDeviceRegistryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::iot::v1::DeviceRegistry>::Create(channel_.get(), cq, rpcmethod_UpdateDeviceRegistry_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::iot::v1::DeviceRegistry>* DeviceManager::Stub::PrepareAsyncUpdateDeviceRegistryRaw(::grpc::ClientContext* context, const ::google::cloud::iot::v1::UpdateDeviceRegistryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::iot::v1::DeviceRegistry>::Create(channel_.get(), cq, rpcmethod_UpdateDeviceRegistry_, context, request, false);
}

::grpc::Status DeviceManager::Stub::DeleteDeviceRegistry(::grpc::ClientContext* context, const ::google::cloud::iot::v1::DeleteDeviceRegistryRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteDeviceRegistry_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceManager::Stub::AsyncDeleteDeviceRegistryRaw(::grpc::ClientContext* context, const ::google::cloud::iot::v1::DeleteDeviceRegistryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteDeviceRegistry_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceManager::Stub::PrepareAsyncDeleteDeviceRegistryRaw(::grpc::ClientContext* context, const ::google::cloud::iot::v1::DeleteDeviceRegistryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteDeviceRegistry_, context, request, false);
}

::grpc::Status DeviceManager::Stub::ListDeviceRegistries(::grpc::ClientContext* context, const ::google::cloud::iot::v1::ListDeviceRegistriesRequest& request, ::google::cloud::iot::v1::ListDeviceRegistriesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListDeviceRegistries_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::iot::v1::ListDeviceRegistriesResponse>* DeviceManager::Stub::AsyncListDeviceRegistriesRaw(::grpc::ClientContext* context, const ::google::cloud::iot::v1::ListDeviceRegistriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::iot::v1::ListDeviceRegistriesResponse>::Create(channel_.get(), cq, rpcmethod_ListDeviceRegistries_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::iot::v1::ListDeviceRegistriesResponse>* DeviceManager::Stub::PrepareAsyncListDeviceRegistriesRaw(::grpc::ClientContext* context, const ::google::cloud::iot::v1::ListDeviceRegistriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::iot::v1::ListDeviceRegistriesResponse>::Create(channel_.get(), cq, rpcmethod_ListDeviceRegistries_, context, request, false);
}

::grpc::Status DeviceManager::Stub::CreateDevice(::grpc::ClientContext* context, const ::google::cloud::iot::v1::CreateDeviceRequest& request, ::google::cloud::iot::v1::Device* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateDevice_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::iot::v1::Device>* DeviceManager::Stub::AsyncCreateDeviceRaw(::grpc::ClientContext* context, const ::google::cloud::iot::v1::CreateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::iot::v1::Device>::Create(channel_.get(), cq, rpcmethod_CreateDevice_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::iot::v1::Device>* DeviceManager::Stub::PrepareAsyncCreateDeviceRaw(::grpc::ClientContext* context, const ::google::cloud::iot::v1::CreateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::iot::v1::Device>::Create(channel_.get(), cq, rpcmethod_CreateDevice_, context, request, false);
}

::grpc::Status DeviceManager::Stub::GetDevice(::grpc::ClientContext* context, const ::google::cloud::iot::v1::GetDeviceRequest& request, ::google::cloud::iot::v1::Device* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDevice_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::iot::v1::Device>* DeviceManager::Stub::AsyncGetDeviceRaw(::grpc::ClientContext* context, const ::google::cloud::iot::v1::GetDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::iot::v1::Device>::Create(channel_.get(), cq, rpcmethod_GetDevice_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::iot::v1::Device>* DeviceManager::Stub::PrepareAsyncGetDeviceRaw(::grpc::ClientContext* context, const ::google::cloud::iot::v1::GetDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::iot::v1::Device>::Create(channel_.get(), cq, rpcmethod_GetDevice_, context, request, false);
}

::grpc::Status DeviceManager::Stub::UpdateDevice(::grpc::ClientContext* context, const ::google::cloud::iot::v1::UpdateDeviceRequest& request, ::google::cloud::iot::v1::Device* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateDevice_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::iot::v1::Device>* DeviceManager::Stub::AsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::google::cloud::iot::v1::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::iot::v1::Device>::Create(channel_.get(), cq, rpcmethod_UpdateDevice_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::iot::v1::Device>* DeviceManager::Stub::PrepareAsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::google::cloud::iot::v1::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::iot::v1::Device>::Create(channel_.get(), cq, rpcmethod_UpdateDevice_, context, request, false);
}

::grpc::Status DeviceManager::Stub::DeleteDevice(::grpc::ClientContext* context, const ::google::cloud::iot::v1::DeleteDeviceRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteDevice_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceManager::Stub::AsyncDeleteDeviceRaw(::grpc::ClientContext* context, const ::google::cloud::iot::v1::DeleteDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteDevice_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceManager::Stub::PrepareAsyncDeleteDeviceRaw(::grpc::ClientContext* context, const ::google::cloud::iot::v1::DeleteDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteDevice_, context, request, false);
}

::grpc::Status DeviceManager::Stub::ListDevices(::grpc::ClientContext* context, const ::google::cloud::iot::v1::ListDevicesRequest& request, ::google::cloud::iot::v1::ListDevicesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListDevices_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::iot::v1::ListDevicesResponse>* DeviceManager::Stub::AsyncListDevicesRaw(::grpc::ClientContext* context, const ::google::cloud::iot::v1::ListDevicesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::iot::v1::ListDevicesResponse>::Create(channel_.get(), cq, rpcmethod_ListDevices_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::iot::v1::ListDevicesResponse>* DeviceManager::Stub::PrepareAsyncListDevicesRaw(::grpc::ClientContext* context, const ::google::cloud::iot::v1::ListDevicesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::iot::v1::ListDevicesResponse>::Create(channel_.get(), cq, rpcmethod_ListDevices_, context, request, false);
}

::grpc::Status DeviceManager::Stub::ModifyCloudToDeviceConfig(::grpc::ClientContext* context, const ::google::cloud::iot::v1::ModifyCloudToDeviceConfigRequest& request, ::google::cloud::iot::v1::DeviceConfig* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ModifyCloudToDeviceConfig_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::iot::v1::DeviceConfig>* DeviceManager::Stub::AsyncModifyCloudToDeviceConfigRaw(::grpc::ClientContext* context, const ::google::cloud::iot::v1::ModifyCloudToDeviceConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::iot::v1::DeviceConfig>::Create(channel_.get(), cq, rpcmethod_ModifyCloudToDeviceConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::iot::v1::DeviceConfig>* DeviceManager::Stub::PrepareAsyncModifyCloudToDeviceConfigRaw(::grpc::ClientContext* context, const ::google::cloud::iot::v1::ModifyCloudToDeviceConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::iot::v1::DeviceConfig>::Create(channel_.get(), cq, rpcmethod_ModifyCloudToDeviceConfig_, context, request, false);
}

::grpc::Status DeviceManager::Stub::ListDeviceConfigVersions(::grpc::ClientContext* context, const ::google::cloud::iot::v1::ListDeviceConfigVersionsRequest& request, ::google::cloud::iot::v1::ListDeviceConfigVersionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListDeviceConfigVersions_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::iot::v1::ListDeviceConfigVersionsResponse>* DeviceManager::Stub::AsyncListDeviceConfigVersionsRaw(::grpc::ClientContext* context, const ::google::cloud::iot::v1::ListDeviceConfigVersionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::iot::v1::ListDeviceConfigVersionsResponse>::Create(channel_.get(), cq, rpcmethod_ListDeviceConfigVersions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::iot::v1::ListDeviceConfigVersionsResponse>* DeviceManager::Stub::PrepareAsyncListDeviceConfigVersionsRaw(::grpc::ClientContext* context, const ::google::cloud::iot::v1::ListDeviceConfigVersionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::iot::v1::ListDeviceConfigVersionsResponse>::Create(channel_.get(), cq, rpcmethod_ListDeviceConfigVersions_, context, request, false);
}

::grpc::Status DeviceManager::Stub::ListDeviceStates(::grpc::ClientContext* context, const ::google::cloud::iot::v1::ListDeviceStatesRequest& request, ::google::cloud::iot::v1::ListDeviceStatesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListDeviceStates_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::iot::v1::ListDeviceStatesResponse>* DeviceManager::Stub::AsyncListDeviceStatesRaw(::grpc::ClientContext* context, const ::google::cloud::iot::v1::ListDeviceStatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::iot::v1::ListDeviceStatesResponse>::Create(channel_.get(), cq, rpcmethod_ListDeviceStates_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::iot::v1::ListDeviceStatesResponse>* DeviceManager::Stub::PrepareAsyncListDeviceStatesRaw(::grpc::ClientContext* context, const ::google::cloud::iot::v1::ListDeviceStatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::iot::v1::ListDeviceStatesResponse>::Create(channel_.get(), cq, rpcmethod_ListDeviceStates_, context, request, false);
}

::grpc::Status DeviceManager::Stub::SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::google::iam::v1::Policy* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetIamPolicy_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* DeviceManager::Stub::AsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::Policy>::Create(channel_.get(), cq, rpcmethod_SetIamPolicy_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* DeviceManager::Stub::PrepareAsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::Policy>::Create(channel_.get(), cq, rpcmethod_SetIamPolicy_, context, request, false);
}

::grpc::Status DeviceManager::Stub::GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::google::iam::v1::Policy* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetIamPolicy_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* DeviceManager::Stub::AsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::Policy>::Create(channel_.get(), cq, rpcmethod_GetIamPolicy_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* DeviceManager::Stub::PrepareAsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::Policy>::Create(channel_.get(), cq, rpcmethod_GetIamPolicy_, context, request, false);
}

::grpc::Status DeviceManager::Stub::TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::google::iam::v1::TestIamPermissionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TestIamPermissions_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* DeviceManager::Stub::AsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::TestIamPermissionsResponse>::Create(channel_.get(), cq, rpcmethod_TestIamPermissions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* DeviceManager::Stub::PrepareAsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::TestIamPermissionsResponse>::Create(channel_.get(), cq, rpcmethod_TestIamPermissions_, context, request, false);
}

DeviceManager::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceManager_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceManager::Service, ::google::cloud::iot::v1::CreateDeviceRegistryRequest, ::google::cloud::iot::v1::DeviceRegistry>(
          std::mem_fn(&DeviceManager::Service::CreateDeviceRegistry), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceManager_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceManager::Service, ::google::cloud::iot::v1::GetDeviceRegistryRequest, ::google::cloud::iot::v1::DeviceRegistry>(
          std::mem_fn(&DeviceManager::Service::GetDeviceRegistry), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceManager_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceManager::Service, ::google::cloud::iot::v1::UpdateDeviceRegistryRequest, ::google::cloud::iot::v1::DeviceRegistry>(
          std::mem_fn(&DeviceManager::Service::UpdateDeviceRegistry), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceManager_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceManager::Service, ::google::cloud::iot::v1::DeleteDeviceRegistryRequest, ::google::protobuf::Empty>(
          std::mem_fn(&DeviceManager::Service::DeleteDeviceRegistry), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceManager_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceManager::Service, ::google::cloud::iot::v1::ListDeviceRegistriesRequest, ::google::cloud::iot::v1::ListDeviceRegistriesResponse>(
          std::mem_fn(&DeviceManager::Service::ListDeviceRegistries), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceManager_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceManager::Service, ::google::cloud::iot::v1::CreateDeviceRequest, ::google::cloud::iot::v1::Device>(
          std::mem_fn(&DeviceManager::Service::CreateDevice), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceManager_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceManager::Service, ::google::cloud::iot::v1::GetDeviceRequest, ::google::cloud::iot::v1::Device>(
          std::mem_fn(&DeviceManager::Service::GetDevice), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceManager_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceManager::Service, ::google::cloud::iot::v1::UpdateDeviceRequest, ::google::cloud::iot::v1::Device>(
          std::mem_fn(&DeviceManager::Service::UpdateDevice), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceManager_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceManager::Service, ::google::cloud::iot::v1::DeleteDeviceRequest, ::google::protobuf::Empty>(
          std::mem_fn(&DeviceManager::Service::DeleteDevice), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceManager_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceManager::Service, ::google::cloud::iot::v1::ListDevicesRequest, ::google::cloud::iot::v1::ListDevicesResponse>(
          std::mem_fn(&DeviceManager::Service::ListDevices), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceManager_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceManager::Service, ::google::cloud::iot::v1::ModifyCloudToDeviceConfigRequest, ::google::cloud::iot::v1::DeviceConfig>(
          std::mem_fn(&DeviceManager::Service::ModifyCloudToDeviceConfig), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceManager_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceManager::Service, ::google::cloud::iot::v1::ListDeviceConfigVersionsRequest, ::google::cloud::iot::v1::ListDeviceConfigVersionsResponse>(
          std::mem_fn(&DeviceManager::Service::ListDeviceConfigVersions), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceManager_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceManager::Service, ::google::cloud::iot::v1::ListDeviceStatesRequest, ::google::cloud::iot::v1::ListDeviceStatesResponse>(
          std::mem_fn(&DeviceManager::Service::ListDeviceStates), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceManager_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceManager::Service, ::google::iam::v1::SetIamPolicyRequest, ::google::iam::v1::Policy>(
          std::mem_fn(&DeviceManager::Service::SetIamPolicy), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceManager_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceManager::Service, ::google::iam::v1::GetIamPolicyRequest, ::google::iam::v1::Policy>(
          std::mem_fn(&DeviceManager::Service::GetIamPolicy), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceManager_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceManager::Service, ::google::iam::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse>(
          std::mem_fn(&DeviceManager::Service::TestIamPermissions), this)));
}

DeviceManager::Service::~Service() {
}

::grpc::Status DeviceManager::Service::CreateDeviceRegistry(::grpc::ServerContext* context, const ::google::cloud::iot::v1::CreateDeviceRegistryRequest* request, ::google::cloud::iot::v1::DeviceRegistry* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceManager::Service::GetDeviceRegistry(::grpc::ServerContext* context, const ::google::cloud::iot::v1::GetDeviceRegistryRequest* request, ::google::cloud::iot::v1::DeviceRegistry* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceManager::Service::UpdateDeviceRegistry(::grpc::ServerContext* context, const ::google::cloud::iot::v1::UpdateDeviceRegistryRequest* request, ::google::cloud::iot::v1::DeviceRegistry* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceManager::Service::DeleteDeviceRegistry(::grpc::ServerContext* context, const ::google::cloud::iot::v1::DeleteDeviceRegistryRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceManager::Service::ListDeviceRegistries(::grpc::ServerContext* context, const ::google::cloud::iot::v1::ListDeviceRegistriesRequest* request, ::google::cloud::iot::v1::ListDeviceRegistriesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceManager::Service::CreateDevice(::grpc::ServerContext* context, const ::google::cloud::iot::v1::CreateDeviceRequest* request, ::google::cloud::iot::v1::Device* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceManager::Service::GetDevice(::grpc::ServerContext* context, const ::google::cloud::iot::v1::GetDeviceRequest* request, ::google::cloud::iot::v1::Device* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceManager::Service::UpdateDevice(::grpc::ServerContext* context, const ::google::cloud::iot::v1::UpdateDeviceRequest* request, ::google::cloud::iot::v1::Device* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceManager::Service::DeleteDevice(::grpc::ServerContext* context, const ::google::cloud::iot::v1::DeleteDeviceRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceManager::Service::ListDevices(::grpc::ServerContext* context, const ::google::cloud::iot::v1::ListDevicesRequest* request, ::google::cloud::iot::v1::ListDevicesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceManager::Service::ModifyCloudToDeviceConfig(::grpc::ServerContext* context, const ::google::cloud::iot::v1::ModifyCloudToDeviceConfigRequest* request, ::google::cloud::iot::v1::DeviceConfig* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceManager::Service::ListDeviceConfigVersions(::grpc::ServerContext* context, const ::google::cloud::iot::v1::ListDeviceConfigVersionsRequest* request, ::google::cloud::iot::v1::ListDeviceConfigVersionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceManager::Service::ListDeviceStates(::grpc::ServerContext* context, const ::google::cloud::iot::v1::ListDeviceStatesRequest* request, ::google::cloud::iot::v1::ListDeviceStatesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceManager::Service::SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceManager::Service::GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceManager::Service::TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace cloud
}  // namespace iot
}  // namespace v1

